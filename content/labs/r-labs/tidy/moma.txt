---
title: "Lab 05: What use is a Book without any Pictures?"
author: "Arvind Venkatadri"
date: 06/July/2021
date-modified: "`r Sys.Date()`"
editor: 
  markdown: 
    wrap: 72
---

## {{< iconify openmoji japanese-symbol-for-beginner >}} Introduction

This Quarto document is part of my workshop on R. The material is based
on *A Layered Grammar of Graphics* by Hadley Wickham. The course is
meant for First Year students pursuing a Degree in Art and Design.

The intent is to build Skill in coding in R, and also appreciate R as a
way to metaphorically visualize information of various kinds, using
predominantly geometric figures and structures.

All Quarto document files combine code, text, web-images, and figures
developed using code. Everything is text; code chunks are enclosed in
**fences** (\`\`\`)

## Setting up the Packages

```{r}
#| label: setup
#| include: true
#| message: false
library(tidyverse)
library(mosaic)

```

## Goals for this Lab

-   Understand the idea of "tidy" data
-   Using "tidy data" and the "tidyverse" way of programming in R allows
    to translate our thoughts readily into code.
-   Understand `dplyr` VERB functions to get to know and manipulate a
    dataset

## Pedagogical Note

The method followed will be based on
[PRIMM](https://blogs.kcl.ac.uk/cser/2017/09/01/primm-a-structured-approach-to-teaching-programming/):

-   **PREDICT** Inspect the code and guess at what the code might do,
    **write predictions**
-   **RUN** the code provided and check what happens
-   **INFER** what the `parameters` of the code do and **write comments
    to explain**. What bells and whistles can you see?
-   **MODIFY** the `parameters` code provided to understand the
    `options` available. **Write comments** to show what you have aimed
    for and achieved.
-   **MAKE** : take an idea/concept of your own, and graph it. \#
    Inspiration + data

We'll use data from the Museum of Modern Art (MoMA)

-   Publicly available on
    [GitHub](https://github.com/MuseumofModernArt/collection)
-   As analyzed by
    [fivethirtyeight.com](https://fivethirtyeight.com/features/a-nerds-guide-to-the-2229-paintings-at-moma/)
-   And by
    [others](https://medium.com/@foe/here-s-a-roundup-of-how-people-have-used-our-data-so-far-80862e4ce220)

## Read in the data

This dataset has been created by Alison Hill(@apreshill on Twitter).
Download the dataset, save it into your **data** folder and then import
it into R:

{{< downloadthis ../../../materials/data/tidy/artworks-cleaned.csv dname="moma" label="Download the MOMA data" icon="database-fill-down" type="info" >}}

```{r}
#| include: false
moma <- read_csv("../../../materials/data/tidy/artworks-cleaned.csv")

```

```{r}
#| eval: false
#| echo: fenced

moma <- read_csv("data/artworks-cleaned.csv",
                 show_col_types = FALSE)
```

```{r}
inspect(moma)

```

## {{< iconify icon-park-outline file-question >}} Getting to Know your data: Make up some Questions

::: callout-note
## Questions and still more Questions

Try to answer all of these questions using `dplyr`. Answers are below
but try them on your own first!

1.  How many paintings (rows) are in `moma`?
2.  How many variables (columns) are in `moma`?
3.  What is the first painting acquired by MoMA? Which year? Which
    artist? What title?
4.  What is the oldest painting in the collection? Which year? Which
    artist? What title?
5.  How many distinct artists are there?
6.  Which artist has the most paintings in the collection? How many
    paintings are by this artist?
7.  How many paintings by male vs female artists?
8.  How many paintings acquired by year, and by gender of artist, over
    time?

If you want more:

1.  How many artists of each gender are there?
2.  In what year were the most paintings acquired? Created?
3.  In what year was the first painting by a (solo) female artist
    acquired? When was that painting created? Which artist? What title?
:::

::: callout-note
## How many paintings? How many Variables?

-   How many rows/observations are in `moma`?

-   How many variables are in `moma`?

    ::: callout-tip
    **Hint:** These questions can be answered using the `dplyr` function
    `glimpse`.
    :::

```{r}
library(dplyr)
moma
glimpse(moma)

```
:::

::: callout-note
## What is the first painting acquired?

-   What is the first painting acquired by MoMA (since they started
    tracking)?
-   What year was it acquired?
-   Which artist?
-   What title?

::: callout-tip
**Hint:** These questions can be answered by combining two `dplyr`
functions: `select` and `arrange`.
:::

```{r}
moma %>% 
  select(artist, title, year_acquired) %>% 
  arrange(year_acquired)
```
:::

::: callout-note
## What is the oldest painting in the MoMA collection?

-   What is the oldest painting in the MoMA collection historically
    (since they started tracking)?
-   What year was it created?
-   Which artist?
-   What title?

::: callout-tip
**Hint:** These questions can be answered by combining two `dplyr`
functions: `select` and `arrange`.
:::

```{r}
moma %>% 
  select(artist, title, year_created) %>% 
  arrange(year_created)
```

```{r}
oldest <- moma %>% 
  select(artist, title, year_created) %>% 
  arrange(year_created) %>% 
  slice(1)
oldest

```

To do inline comments, I could say that the oldest painting is
`r oldest %>% pull(title)`, painted by `r oldest %>% pull(artist)` in
`r oldest %>% pull(year_created)`.
:::

::: callout-note
## How many artists?

-   How many distinct artists are there?

::: callout-tip
**Hint:** Try `dplyr::distinct`.
:::

```{r}
moma %>% 
  distinct(artist)
```

You could add a `tally()` too to get just the number of rows. You can
also then use `pull()` to get that single number out of the tibble:

```{r}
num_artists <- moma %>% 
  distinct(artist) %>% 
  tally() %>% 
  pull()
num_artists
```

Then I can refer to this number in inline comments like: there are
`r num_artists` total.
:::

::: callout-note
## Which artist has the most paintings?

-   Which artist has the most paintings ever owned by `moma`?
-   How many paintings in the MoMA collection by that artist?

::: callout-tip
**Hint:** Try `dplyr::count`. Use `?count` to figure out how to sort the
output.
:::

```{r}
moma %>% 
  count(artist, sort = TRUE)
```

```{r include = FALSE}
pablo <- moma %>% 
  count(artist, sort = TRUE) %>% 
  slice(1)
pablo
```

In the `?count` documentation, it says: "`count` and `tally` are
designed so that you can call them repeatedly, each time rolling up a
level of detail." Try running `count()` again (leave parentheses empty)
on your last code chunk. ( before the `slice()`)

```{r}
moma %>% 
  count(artist, sort = TRUE) %>% 
  count()
```
:::

::: callout-note
## How many paintings by male vs female artists?

```{r}
moma %>% 
  count(artist_gender)
```

Now together we'll count the number of artists by gender. You'll need to
give `count` two variable names in the parentheses: `artist_gender` and
`artist`.

```{r}
moma %>% 
  count(artist_gender, artist, sort = TRUE) 
```

This output is not super helpful as we already know that
`pablo %>% pull(artist)` has `pablo %>% pull(n)` paintings in the MoMA
collection. But how can we find out which female artist has the most
paintings? We have a few options. Let's first add a `filter` for
females.

```{r}
moma %>% 
  count(artist_gender, artist, sort = TRUE) %>% 
  filter(artist_gender == "Female")
```

Another option is to use another `dplyr` function called `top_n()`. Use
`?top_n` to see how it works. How it won't work in this context:

```{r}
moma %>% 
  count(artist_gender, artist, sort = TRUE) %>% 
  slice_max(n = 2, order_by = n)
```

How it will work better is following a `group_by(artist_gender)`:

```{r}
moma %>% 
  count(artist_gender, artist, sort = TRUE) %>% 
  group_by(artist_gender) %>% 
  slice_max(n = 1, order_by = n)
```

```{r include = FALSE}
sherrie <- moma %>% 
  count(artist_gender, artist, sort = TRUE) %>% 
  filter(artist_gender == "Female") %>% 
  slice(1)
sherrie
```

Now we can see that `sherrie %>% pull(artist)` has `sherrie %>% pull(n)`
paintings. This is a pretty far cry from the `pablo %>% pull(n)`
paintings by `pablo %>% pull(artist)`.
:::

::: callout-note
## How many artists of each gender are there?

This is a harder question to answer than you think! This is because the
level of observation in our current `moma` dataset is *unique
paintings*. We have multiple paintings done by the same artists though,
so counting just the number of unique paintings is different than
counting the number of unique artists.

Remember how `count` can be used back-to-back to roll up a level of
detail? Try running `count(artist_gender)` again on your last code
chunk.

```{r}
moma %>% 
  count(artist_gender, artist) %>% 
  count(artist_gender)
```

This output takes the previous table (made with
`count(artist_gender, artist)`), and essentially ignores the `n` column.
So we no longer care about how *many* paintings each individual artist
created. Instead, we want to `count` the rows in this *new* table where
each row is a unique artist. By counting by `artist_gender` in the last
line, we are grouping by levels of that variable (so Female/Male/`NA`)
and `nn` is the number of unique artists for each gender category
recorded.
:::

::: callout-note
## When were the most paintings in the collection acquired?

```{r}
moma %>% 
  count(year_acquired, sort = TRUE)
```
:::

::: callout-note
## When were the most paintings in the collection created?

Which variable should we `count`?

```{r}
moma %>% 
  count(year_created, sort = TRUE)
```
:::

::: callout-note
## What about the first painting by a solo female artist?

::: callout-tip
**Hint:** Try combining three `dplyr` functions: `filter`, `select`, and
`arrange`.
:::

When was the first painting by a solo female artist **acquired**?

```{r}
moma %>% 
  filter(num_artists == 1 & n_female_artists == 1) %>% 
  select(title, artist, year_acquired, year_created) %>% 
  arrange(year_acquired)
```

What is the oldest painting by a solo female artist, and when was it
**created**?

```{r}
moma %>% 
  filter(num_artists == 1 & n_female_artists == 1) %>% 
  select(title, artist, year_acquired, year_created) %>% 
  arrange(year_created)
```

```{r eval = FALSE}
# or, because artist_gender is missing when num_artists > 1
moma %>% 
  filter(artist_gender == "Female") %>% 
  select(title, artist, year_acquired, year_created) %>% 
  arrange(year_acquired)

```
:::

::: callout-note
## How many paintings acquired by year, and by gender of artist, over time?

```{r}
moma %>% group_by(year_created, artist_gender) %>% count()
```
:::

The process of creating Questions and obtaining Answers with code is not
as *linear* as it may seem. Some Questions may lead to no particular
insight and may need to be modified. Some Questions may spark new ones!
It is important to write down the Questions and save the results as and
when needed.
