---
title: "Rank"
subtitle: "My Daddy can beat your Daddy"
date: 19/July/2024
lastmod: "`r Sys.Date()`"
summary: Better than all the Rest
order: 60
tags:
- Bump Charts
- Lollipop Charts
- Radar Plots
fig-cap-location: bottom
image: preview.jpg
---

```{r}
#| echo: false
## Markdown boiler plate stuff!!
# ![An Elephant](elephant.png){#fig-elephant}
# This is illustrated well by @fig-elephant.
# 
# ### Figure Panel Divs
#     ::: {#fig-elephants layout-ncol=2}
#     ![Surus](surus.png){#fig-surus}
#     ![Hanno](hanno.png){#fig-hanno}
#      Famous Elephants
#     :::
#     Adding download buttons
#     data that has been read in
#     {{< downloadthis ../../../../materials/Data/housing_train.csv dname="house_prices" label="Download the House Prices Dataset" icon="database-fill-down" type="info" >}}
#    existing file
#    {{< downloadthis Orange/grouped-summaries.ows dname="grouped_summaries" label="Download the Orange Workflow" icon="database-fill-down" type="info" >}} 
```



## The Shape of [~~You~~](https://youtu.be/JGwWNGJdvx8) Data

Never mind that silly song now. 

As mentioned above, data can be in [wide or long form](https://www.wikiwand.com/en/Wide_and_narrow_data). How does one imagine this shape-shifting that seems needed now and then? Let's see. 

::: callout-important
### Long Form and Wide Form Data
Several tools such as DataWrapper (and others, yes, I agree, even with code, as we will see) need data transformed to a specific **shape**. this is usually mandated by the "shape or geometry" we intend to use in the visualization. We should now look at this *idea* of *shape* in data. Consider the data tables below:

```{r}
#| label: fig-pivotting-data
#| echo: false
#| layout-ncol: 2
#| column: body-outset-right
library(tidyverse)
library(kableExtra)
## Wide Form
set.seed(4)
df4 <- tibble(Product = c("G1", "G2", "G3"),
              Power = runif(3), 
              Cost = runif(3),
              Harmony = runif(3),
              Style = runif(3),
              Size = runif(3),
              Manufacturability = runif(3),
              Durability = runif(3),
              Universality = runif(3))
df4 %>% kbl()
## 
df4 %>% 
  tidyr::pivot_longer(cols = -Product, names_to = "Parameter", values_to = "Rating") %>% kbl()

```

What we have done is:\

- convert all the variable names into a stacked column `Parameter`\
- Put all the numbers into another column `Rating`\
- Repeated the `Product` column values as many times as needed to cover all `Parameter`s (8 times).\

See the gif below to get an idea of how this transformation can be worked reversibly. (Yeah, never mind the code also.)

![](../../../../materials/images/tidyr-pivoting.gif)

:::

So how can we actually do this? Turns out there are some nice people at U. San Diego who have built an R-oriented app called [Radiant  for Business Analytics](https://radiant-rstats.github.io/docs/about.html) that can do this pretty much click-and-point style, though it is nowhere as much fun as Orange. Head off there:\

<https://vnijs.shinyapps.io/radiant>

We upload our original data, pivot it, and download the pivotted data. Peasants. Now the pivotted wide-form data should work in DataWrapper. 

Whatever. 


