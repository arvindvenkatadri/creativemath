---
title: "Lab-12: Time is a Him!!"
date: 14 Feb 2022
date-modified: "`r Sys.Date()`"
subtitle: "Time Series in R"
summary: "Time Series in R"
author: Arvind Venkatadri
order: 120
categories:
  - Line Charts
  - Boxplot Charts
  - Heatmaps
  - Averaging
  - Predictions
  - Exponential Smoothing
  - ARIMA models
  - Forecasting
editor: 
  markdown: 
    wrap: 72
---

![](featured.jpg){fig-align="center" width="235"}

## Introduction

Time Series data are important in data visualization where events have a
temporal dimension, such as with finance, transportation, music,
telecommunications for example.

```{r}
#| label: setup
#| include: true
#| message: false
library(tidyverse)
library(mosaic)
library(ggformula)
##########################################
# Install core TimeSeries Packages
# library(ctv)
# ctv::install.views("TimeSeries", coreOnly = TRUE)
# To update core TimeSeries packages
# ctv::update.views("TimeSeries")
# Time Series Core Packages
##########################################
library(tsibble)
library(feasts) # Feature Extraction and Statistics for Time Series
library(fable) # Forecasting Models for Tidy Time Series
library(tseries) # Time Series Analysis and Computational Finance
library(forecast)
library(zoo)
##########################################
library(tsibbledata) # Time Series Demo Datasets 
## New package from Mitchell Ohara-Wild in June 2025
library(ggtime)
```

## {{< iconify fe beginner >}} Introduction to Time Series: Data Formats

There are multiple formats for time series data.

-   The base `ts` format: The `stats::ts()` function will convert a
    numeric vector into an R time series object. The format is
    `ts(vector, start=, end=, frequency=)` where start and end are the
    times of the first and last observation and frequency is the number
    of observations per unit time (1=annual, 4=quarterly, 12=monthly,
    etc.). Used by established packages like `forecast`
-   Tibble format: the simplest is of course the standard tibble /
    dataframe, with a `time` variable to indicate that the other
    variables vary with time. Used by more recent packages such as
    `timetk` & `modeltime`
-   The modern `tsibble` (time series tibble) format: this is a new
    format for time series analysis, and is used by the
    [tidyverts](https://tidyverts.org) set of packages (`fable`,
    `feasts` and others).
-   There is also a `tsbox` package from
    [ROpenScience](https://docs.ropensci.org/tsbox/) that allows easy
    inter-conversion between these ( and other! ) formats!

## Creating time series

In this first example, we will use simple `ts` data, and then do another
with a `tibble` dataset, and then a third example with an `tsibble`
formatted dataset.

### `ts` format data

There are a few datasets in base R that are in `ts` format already.

```{r ts-data}

AirPassengers
str(AirPassengers)

```

This can be easily plotted using base R:

```{r}

plot(AirPassengers)

```

Let us take data that is "time oriented" but not in `ts` format, and
convert it to `ts`: the syntax of `ts()` is:

Syntax: `objectName <- ts(data, start, end, frequency)` whereÂ  - `data`
represents the data vector - `start` represents the first observation in
time series\
- `end` represents the last observation in time series\
- `frequency` represents number of observations per unit time. For
example, `frequency=1` for monthly data.

We will pick simple **numerical vector data** ( i.e. not a timeseries )
`ChickWeight`:

```{r ChickWeights-ts}

ChickWeight %>% head()
ChickWeight_ts <- ts(ChickWeight$weight, frequency = 2)
plot(ChickWeight_ts)

```

::: callout-caution
## The `ts` format

The `ts` format is not recommended for new analysis since it does not
permit inclusion of multiple time series in one dataset, nor other
*categorical variables* for grouping etc.
:::

### `tibble` format data

Some "time-oriented" datasets are available in `tibble` form. Let us try
to plot one, the `walmart_sales_weekly` dataset from the `timetk`
package:

```{r}

data(walmart_sales_weekly, package = "timetk")
walmart_sales_weekly

```

This dataset is a tibble with a `Date` column. The `Dept` column is
clearly a *categorical* column that allows us to distinguish separate
time series, i.e. one for each value of `Dept`. We will convert that to
a factor( it is an double precision number ) and then plot the data
using this column on the `Date` on the $x$-axis:

```{r}
#| column: page
walmart_sales_weekly %>% 
  
  # convert Dept number to a **categorical factor**
  mutate(Dept = forcats::as_factor(Dept)) %>% 
  
  gf_point(Weekly_Sales ~ Date, 
           group = ~ Dept, 
           colour = ~ Dept, data = .) %>% 
  gf_line() %>% 
  gf_theme(theme_minimal())

```

For more analysis and forecasting etc., it is useful to convert this
tibble into a `tsibble`:

```{r}
#| label: tibble-as-tsibble
#| column: page
walmart_tsibble <- as_tsibble(walmart_sales_weekly,
                         index = Date,
                         key = c(id, Dept))
walmart_tsibble

```

The `7D` states the data is weekly. There is a `Date` column and all the
other *numerical variables* are time-varying quantities. The
*categorical variables* such as `id`, and `Dept` allow us to identify
separate time series in the data, and these have 7 combinations hence
are 7 time series in this data, as indicated.

::: column-margin
Let us plot `Weekly_Sales`, colouring the time series by `Dept`:

```{r}
#| label: fig-together
#| fig.cap: "Walmart Time Series"
#| fig.show: 'hold'
#| cache: TRUE
#| message: FALSE

walmart_tsibble %>% 
  gf_line(Weekly_Sales ~ Date, 
          colour = ~ as_factor(Dept), data = .) %>% 
  gf_point() %>%
  gf_theme(theme_minimal()) %>% 
  labs(title = "Weekly Sales by Dept at Walmart")

```
:::

::: column-margin
We can also do a quick *autoplot* that seems to offer less control and
is also not interactive.

```{r}
walmart_tsibble %>% 
  dplyr::group_by(Dept) %>% 
  autoplot(Weekly_Sales) %>% 
  gf_theme(theme_minimal())

```
:::

### `tsibble` format data

In the packages `tsibbledata` and `fpp3` we have a good choice of
`tsibble` format data. Let us pick one:

```{r}
#| column: page
hh_budget
```

There are 4 keys ( id variables ) here, one for each country. Six other
*quantitative* columns are the individual series. Let us plot (some of)
the timeseries:

```{r}
#| layout-ncol: 2
ggplot2::theme_set(theme_classic())
hh_budget %>% 
  gf_path(Debt ~ Year, colour = ~ Country,
          title = "Debt over Time")
##
hh_budget %>% 
  gf_path(Savings ~ Year, colour = ~ Country,
          title = "Savings over Time")
##
hh_budget %>% 
  gf_path(Expenditure ~ Year, colour = ~ Country,
          title = "Expenditure over Time")
##
hh_budget %>% 
  gf_path(Wealth ~ Year, colour = ~ Country,
          title = "Wealth over Time")

```

## One more example

Often we have data in table form, that is time-oriented, with a date
like column, and we need to convert it into a `tsibble` for analysis:

```{r prison-data-fpp3}

prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
glimpse(prison)

```

We have a `Date` column for the time `index`, and we have unique `key`
variables like `State, Gender, Legal` and `Indigenous`. `Count` is the
value that is variable over time. It also appears that the data is
`quarterly`, since `mosaic::inspect` reports the `max_diff` in the
`Date` column as $92$. [Run `mosaic::inspect(prison)` in your
Console]{.aside}.

```{r prison-tsibble}

prison_tsibble <- prison %>% 
  mutate(quarter = yearquarter(Date)) %>% 
  select(-Date) %>% # Remove the Date column now that we have quarters
  as_tsibble(index = quarter, key = c(State, Gender, Legal, Indigenous))

prison_tsibble

```

(Here, ATSI stands for *Aboriginal or Torres Strait Islander*.). We have
$64$ time series here, organized quarterly.

Let us examine the `key` variables:

```{r}

prison_tsibble %>% distinct(Indigenous)
prison_tsibble %>% distinct(State)

```

So we can plot the time series, **faceted / coloured** by `State`:

```{r}
#| column: margin

prison_tsibble %>% 
  tsibble::index_by() %>% 
  group_by(Indigenous, State) %>% 
  #filter(State == "NSW") %>% 
  summarise(Total = sum(Count))  %>%
  gf_point(Total ~quarter, colour = ~ Indigenous, 
             shape = ~ Indigenous) %>% 
  gf_line() %>% 
  
  # Note that the y-axes are all. different!!
  gf_facet_wrap(vars(State), scale = "free_y") %>% 
  
  gf_theme(theme_minimal())

```

Hmm...looks like New South Wales(NSW) as something different going on
compared to the rest of the states in Aus. Because of the large cities
there...

## Decomposing Time Series

We can decompose the `Weekly_Sales` into components representing trends,
seasonal events that repeat, and irregular noise. Since each Dept could
have a different set of trends, we will do this first for one Dept, say
Dept #95:

```{r}
#| column: page
walmart_decomposed_season <- walmart_tsibble %>% 
  dplyr::filter(Dept == "95") %>% # filter for Dept 95
  #
  # feasts depends upon fabletools.
  # 
  fabletools::model(
    season = STL(Weekly_Sales ~ season(window = "periodic"))) 
walmart_decomposed_season %>% fabletools::components()

###
walmart_decomposed_ets <- walmart_tsibble %>% 
  dplyr::filter(Dept == "95") %>% # filter for Dept 95
  #
  # feasts depends upon fabletools.
  # 
  fabletools::model(
    ets = ETS(box_cox(Weekly_Sales, 0.3)))
###
walmart_decomposed_ets %>% fabletools::components()

###
walmart_decomposed_arima <- walmart_tsibble %>%
  dplyr::filter(Dept == "95") %>% # filter for Dept 95
  fabletools::model(arima = ARIMA(log(Weekly_Sales)))
walmart_decomposed_arima %>% broom::tidy()

```

```{r}
#| column: page

walmart_decomposed_season %>% 
  components() %>% 
  autoplot() + 
  labs( title = "Seasonal Variations in Weekly Sales, Dept #95")

walmart_decomposed_ets %>% 
  components() %>% 
  autoplot() + 
  labs( title = "ETS Variations in Weekly Sales, Dept #95")

```

## Conclusion

TBW

## References

1.  [Forecasting: PrinciplesÂ andÂ Practice (3rdÂ ed) *Rob J Hyndman and
    George Athanasopoulos*](https://otexts.com/fpp3/)
