---
title: "Lab-8: Did you ever see such a thing as a drawing of a muchness?"
subtitle: "Working with htmlwidgets in R!"
author: "Arvind Venkatadri"
date: 10/July/2022
date-modified: "`r Sys.Date()`"
summary: "Using Javascript libraries in R"
df-print: paged
order: 80
view: 2
image: featured.jpg
image-alt: "Image credit: [**Alice In Wonderland dot Net**](https://www.alice-in-wonderland.net/)"
---

![](featured.jpg){fig-align="center" width="380"}

## {{< iconify noto-v1 package >}} Setting up R Packages

```{r}
#| label: setup
#| include: true
#| message: false
#| warning: false
# Data manipulation and data sources
options(htmltools.preserve.raw = FALSE, echo = TRUE)
library(tidyverse)
library(tidygraph)
library(igraph)
library(palmerpenguins)
library(igraphdata)


# To render htmlwidgets as iframe widgets
# https://communicate-data-with-r.netlify.app/docs/communicate/htmlwidgets-in-documents/
#library(widgetframe)

# htmlwidget related libraries
library(htmlwidgets)


# Widget Libraries
library(leaflet)
library(plotly)
library(DT)
library(echarts4r)
library(echarts4r.assets)
library(canvasXpress)
library(rgl)
library(networkD3)
library(threejs)
library(slickR)
library(crosstalk)
# Linkable widgets in crosstalk - github repo only
#devtools::install_github("kent37/summarywidget")
library(summarywidget)

```

## Introduction

There are very many great JavaScript libraries for creating eye-popping
and even interactive charts! And these are now available in R, and can
be invoked using R code! So we can "use JavaScript" in R, as it were,
without knowing JavaScript! And create something like this:

<br>

```{r, echo=FALSE,warning=FALSE,message=FALSE, fig.show='hold'}

# url <- "https://echarts.apache.org/examples/data-gl/asset/data/population.json"

data <- jsonlite::fromJSON(txt = "./data/population.json")
data <- as.data.frame(data)
names(data) <- c("lon", "lat", "value")

data %>% 
  e_charts(lon) %>% 
  e_globe(
    environment = ea_asset("starfield"),
    base_texture = ea_asset("world topo"), 
    height_texture = ea_asset("world topo"),
    displacementScale = 0.04
  ) %>% 
  e_bar_3d(lat, value, coord_system = "globe") %>% 
  e_visual_map(show = TRUE)
# ->myplot

#widgetframe::frameWidget(myplot)

```


```{r, echo=FALSE,warning=FALSE,message=FALSE, fig.show='hold'}
y=read.table("./data/cX-chord-dat.txt", 
             header=TRUE, sep="\t", quote="", 
             row.names=1, fill=TRUE, 
             check.names=FALSE, stringsAsFactors=FALSE)
canvasXpress(
  data=y,
  circularArc=360,
  circularRotate=0,
  circularType="chord",
  colors=list("#000000", "#FFDD89", "#957244", "#F26223"),
  graphType="Circular",
  higlightGreyOut=TRUE,
  legendKeyBackgroundBorderColor="rgba(0,0,0,0)",
  legendKeyBackgroundColor="rgba(0,0,0,0)",
  objectBorderColor="rgb(0,0,0)",
  rAxisTickFormat=list("%sK", " / 1000"),
  showTransition=FALSE,
  title="Simple Chord Graph",
  transitionStep=50,
  transitionTime=1500) 

# -> mynetwork


# widgetframe::frameWidget(mynetwork)


```

<br>

```{r}
#| echo: false
#| layout: [[1,1], [1]]
library(dygraphs)
dygraph(fdeaths, "Female Deaths")
dygraph(mdeaths, "Male Deaths")
dygraph(ldeaths, "All Deaths")

```

Unlike the Dormouse, no complaints!

We will explore a few them, as an alternative to `ggplot` !!

This may be too much of a good thing, or `a much of muchness` but then,
we can always use more then one way of telling our stories!!

## `htmlwidgets` usage

`htmlwidgets` creates, well, widgets, that can visualize data in many
ways. HTML widgets work just like R plots except they produce
interactive web visualizations. These can be used in `RMarkdown`, in
`flexdashboards`, and in `shiny` apps.

All the possible widgets ( 127 of them on CRAN ) are listed here:
<https://gallery.htmlwidgets.org/>

Some packages that offer widgets for use in `htmlwidgets`:

1.  `networkD3`:

-   Force directed networks with `simpleNetwork` and `forceNetwork`
-   Sankey diagrams with `sankeyNetwork`
-   Radial networks with `radialNetwork`
-   Dendro networks with `dendroNetwork`

### Using `networkD3`

```{r networkD3}
library(networkD3)
data("karate")

# Make separate data frames for edges and nodes
# networkD3 needs indices starting from 1
karate_edges <- karate %>% 
  as_tbl_graph() %>% 
  tidygraph::activate(edges) %>% 
  as.data.frame() %>% 
  dplyr::mutate(source = from - 1, target = to - 1) %>% 
  rename(value = weight) %>% 
  select(source, target, value)
karate_edges

karate_nodes <- karate %>% 
  as_tbl_graph() %>% 
  tidygraph::activate(nodes) %>% 
  as.data.frame() %>% 
  dplyr::mutate(group = as.character(Faction)) %>% 
  select(name, label, group, color)
karate_nodes

simpleNetwork(karate_edges, 
              charge = -50, 
              fontSize = 12, zoom = FALSE, 
              fontFamily = "serif")

```


```{r forceNetwork}
forceNetwork(
  Links = karate_edges,
  Nodes = karate_nodes,
  Value = "value",
  # width of edges, dbl
  NodeID = "name",
  # chr
  Group = "group",
  # Node group, chr
  # Nodesize = "label" # chr !!!
  # linkColour = "value"
)

```

### Creating a Sankey Diagram.

```{r sankeyNetwork}
#| label: Sankey Network
#| eval: false

# Code is not working need to fix
# No nodes showing up...
UCB_graph <-
  UCBAdmissions %>% 
  as.data.frame() %>% 
  # select(Gender, Admit, Dept, Freq) %>% 
  as_tbl_graph()
UCB_graph

UCB_nodes <- UCB_graph %>% activate(nodes) %>% as_tibble()
UCB_nodes

UCB_links <- UCB_graph %>% 
  activate(edges) %>% 
  as_tibble() %>%
  dplyr::mutate(from = from - 1, to = to - 1)
UCB_links

sankeyNetwork(
  Links = UCB_links,
  Nodes = UCB_nodes,
  Source = "from",
  Target = "to",
  Value = "Freq",
  LinkGroup = "Dept",
  fontSize = 20,
  fontFamily = "Arial"
)

```

`simpleNetwork`, `forceNetwork` and `sankeyNetwork` use a similar `node`
and `link` data structure, organized as two **data frames** (not
tibbles)

`chordNetwork` uses an *association matrix* type of matrix or a data
frame organized in the same way, where entry (n,m) represents the
strength of the link from group n to group m. Matrix needs to be
**square** !! "Column names" and "Row names" need to be the same if the
data is a `data.frame`.

```{r chordNetwork}
data <- matrix(rpois(n = 16, lambda = 50), 
               nrow = 4, ncol = 4)
chordNetwork(data,
             labels = c("A", "B", "C", "D"))

```

## Using threejs ( WIP )

1.  <https://bwlewis.github.io/rthreejs/>
2.  <https://bwlewis.github.io/rthreejs/crosstalk.html>

### `graphjs` usage

```{r}
data("LeMis") # igraph object
LeMis
#V(LeMis)$label
#V(LeMis)$color
graphjs(LeMis,
    layout=list( # animates between a list of layouts
      # layouts need to be 3D layouts
      # Or each can be a 3 column matrix with n(rows) = n(vertices)
    layout_randomly(LeMis, dim=3),
    layout_on_sphere(LeMis),
    layout_with_drl(LeMis, dim=3),  # note! somewhat slow...
    layout_with_fr(LeMis, dim=3, niter=30)
    ),
  main=list("random layout", "sphere layout", "drl layout", "fr layout"),
  fpl=300)

```

## `globejs` usage

Plot points, arcs and images on a globe in 3D using `three.js`. The
globe can be rotated and and zoomed. Great Circles and historical routes
are a good idea for this perhaps.

Refer to this page for more ideas
<http://bwlewis.github.io/rthreejs/globejs.html>

```{r}
# Random Lats and Longs
lat <- rpois(10, 60) + rnorm(10, 80)
long <- rpois(10, 60) + rnorm(10, 10)

# Random "Spike" heights for each location. Population? Tourists? GDP?
value <- rpois(10, lambda = 80)
 
globejs(lat = lat, long = long)

globejs(
  lat = lat,
  long = long,
  
  # random heights of the Spikes (!!) at lat-long combo
  value = value,
  color = "red",
  # Zoom factor, default is 35
  fov = 50
)

globejs(
  lat = lat,
  long = long,
  value = value,
  color = "red",
  pointsize = 4, # width of the columns
  # Zoom position
  fov = 35,
  # initial position of the globe
  rotationlat = 0.6, #  in RADIANS !!! Good Heavens!!
  rotationlong = 0.2 #  in RADIANS !!! Good Heavens!!
)

globejs(
  lat = lat,
  long = long,
  value = value,
  color = "red",
  pointsize = 4,
  fov = 35,
  rotationlat = 0.6,
  rotationlong = 0.2,
  lightcolor = "#aaeeff",
  emissive = "#0000ee",
  bodycolor = "#ffffff",
  bg = "grey"
)

```

```{r}
# Plotting arcs on the globe
# Requires 4 column data frame for start and end lat and long

arcs <- data.frame(start_lat = runif(10, min = -20, max = 20), 
                   start_lon = runif(10, min = -20, max = 20), 
                   end_lat = runif(10, min = -20, max = 20),
                   end_lon = runif(10, min = -20, max = 20) + 60)
arcs

globejs(arcs = arcs,
        arcsColor = "gold",
        arcsLwd = 4,
        arcsHeight = 0.6,
        arcsOpacity = 1,
        rotationlat = 0,
        rotationlong = -2.2,
        bg = "lightblue",atmosphere = FALSE,
        pointsize = 2)
```

`threejs` contains a dataset called `flights` obtained from Callum
Prentice's FlightStream page:
<http://callumprentice.github.io/apps/flight_stream/index.html>

```{r}
data("flights",package = "threejs")
flights %>% head()

frequent_destinations <-
  flights %>% group_by(dest_lat, dest_long) %>% 
  count(sort = TRUE) %>% 
  ungroup() %>% 
  slice_max(n = 10, order_by = n)
frequent_destinations

frequent_flights <- flights %>% 
  semi_join(frequent_destinations,
            by = c("dest_lat" = "dest_lat", "dest_long" = "dest_long")) %>% unique() 

frequent_flights %>% 
  kableExtra::kbl() %>%
  kableExtra::kable_paper(full_width = TRUE) %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "condensed", "responsive")) %>%
  kableExtra::scroll_box(width = "700px", height = "500px")


# Get a nice image of the globe from NASA
earth <- "http://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/world.topo.bathy.200412.3x5400x2700.jpg"

globejs(
  img = earth,
  lat = frequent_flights$dest_lat,
  long = frequent_flights$dest_long,
  arcs = frequent_flights,
  #value = frequent_destinations$n,
  color = "red",
  #bodycolor = "#aaaaff",
  arcsHeight = 0.3,
  arcsLwd = 2,
  arcsColor = "#ffff00",
  arcsOpacity = 0.35,
  atmosphere = FALSE,
  #color="#00aaff",
  pointsize = 2,
  rotationlat = 0.6,
  rotationlong = 0.2,
  # lightcolor = "#aaeeff",
  # emissive = "#0000ee",
  # bodycolor = "#ffffff",
  bg = "grey"
        )
```

## Using `scatterplot3js` and friends

3D scatter plots with points and lines can be achieved using
`scatterplot3js`, `points3D`, and `lines3D`.

```{r}
library(palmerpenguins)
penguins <- penguins %>% drop_na()
scatterplot3js(x = penguins$bill_length_mm, 
               y = penguins$flipper_length_mm, 
               z = penguins$body_mass_g)

```

```{r}
library(palmerpenguins)
penguins <- penguins %>% drop_na()
scatterplot3js(x = penguins$bill_length_mm, 
               y = penguins$flipper_length_mm, 
               z = penguins$body_mass_g,
               cex.symbols = 0.2) # Smaller Points

```

```{r}
library(palmerpenguins)
penguins <- penguins %>% drop_na()

scatterplot3js(x = penguins$bill_length_mm, 
               y = penguins$flipper_length_mm, 
               z = penguins$body_mass_g,
               cex.symbols = 0.2) # Smaller Points

```

## References

1.  Bring the best of JavaScript data visualization to R,
    <https://www.htmlwidgets.org/>

2.  *Using htmlwidgets in Rmarkdown*, <https://communicate-data-with-r.netlify.app/docs/communicate/htmlwidgets-in-documents/>

3.  Karambelkar et al, *htmlwidgets and knitr* ,
    <https://cran.r-project.org/web/packages/widgetframe/vignettes/widgetframe_and_knitr.html>

4.  The `patchwork` package to combine plots. <https://patchwork.data-imaginist.com/>

5.  The threejs package: three.js widgets for R
    <https://bwlewis.github.io/rthreejs/>
