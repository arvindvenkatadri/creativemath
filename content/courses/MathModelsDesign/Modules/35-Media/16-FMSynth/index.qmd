---
title: <iconify-icon icon="mdi:reiterate" width="1.2em" height="1.2em"></iconify-icon> <iconify-icon icon="gravity-ui:function" width="1.2em" height="1.2em"></iconify-icon> FM based Sound Synthesis
subtitle: ""
subject: ""
abstract: ""
date: 23/Jan/2025
date-modified: "`r Sys.Date()`"
order: 16
categories:
  - Frequency Modulation
  - Bessel Functions
  - Chowning Method
  - Aliasing
  - Harmonic Synth
  - Inharmonic Synth
bibliography: 
  - grateful-refs.bib
citation: true
editor: 
  markdown: 
    wrap: 72
draft: true
---

```{r}
#| label: setup
#| include: true
#| echo: false
library(blogdown)
library(tidyverse)
library(ggformula)
library(mosaicCalc) # Analytic Calculus
library(ambient) # Noise generation in R
library(plot3D) # 3D plots for explanation
library(rgl) # Interactive 3D plots for explanation
library(plotly)
knitr::knit_hooks$set(webgl = hook_webgl)
#library(caracas)
library(downloadthis)
library(knitr)
library(kableExtra)
library(gm) # Grammar of Music
# Install https://musescore.org/en

```

```{r}
#| label: Extra Pedagogical Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(grateful)
library(MKdescr)
library(shinylive) # To create a Shiny app in a Quarto HTML doc
# Will not work if webr is also used in the SAME Quarto doc!
library(sysfonts)
library(gfonts)
library(kableExtra)
# library(conflicted)
# conflicted::conflicts_prefer(dplyr::filter, dplyr::count, dplyr::last, dplyr::glimpse, base::max)
library(downloadthis)
#devtools::install_github("mccarthy-m-g/embedr")
library(embedr) # Embed multimedia in HTML files
```


```{r}
#| label: plot-theme
#| echo: false
#| cache: false
#| messages: false
#| warning: false

library(systemfonts)
library(showtext)
## Clean the slate
systemfonts::clear_local_fonts()
systemfonts::clear_registry()
##
showtext_opts(dpi = 96) #set DPI for showtext
sysfonts::font_add(family = "Alegreya",
  regular = "../../../../../../fonts/Alegreya-Regular.ttf",
  bold = "../../../../../../fonts/Alegreya-Bold.ttf",
  italic = "../../../../../../fonts/Alegreya-Italic.ttf",
  bolditalic = "../../../../../../fonts/Alegreya-BoldItalic.ttf")

sysfonts::font_add(family = "Roboto Condensed", 
  regular = "../../../../../../fonts/RobotoCondensed-Regular.ttf",
  bold = "../../../../../../fonts/RobotoCondensed-Bold.ttf",
  italic = "../../../../../../fonts/RobotoCondensed-Italic.ttf",
  bolditalic = "../../../../../../fonts/RobotoCondensed-BoldItalic.ttf")
showtext_auto(enable = TRUE) #enable showtext

theme_custom <- function(){ 
    font <- "Roboto Condensed"   #assign font family up front
    
    theme_classic(base_size = 14) %+replace%    #replace elements we want to change
    
    theme(
      panel.grid.minor = element_blank(),    #strip minor gridlines
      text = element_text(family = font),
      #text elements
      plot.title = element_text(             #title
                   family = font,            #set font family
                   #size = 20,               #set font size
                   face = 'bold',            #bold typeface
                   hjust = 0,                #left align
                   #vjust = 2                #raise slightly
                   margin=margin(0,0,10,0)
),               
      
      plot.subtitle = element_text(          #subtitle
                   family = font,            #font family
                   #size = 14,                #font size
                   hjust = 0,
                   margin=margin(2,0,5,0)
),               
      
      plot.caption = element_text(           #caption
                   family = font,            #font family
                   size = 8,                 #font size
                   hjust = 1),               #right align
      
      axis.title = element_text(             #axis titles
                   family = font,            #font family
                   size = 10                 #font size
),
      
      axis.text = element_text(              #axis text
                   family = font,            #axis family
                   size = 8)               #font size
    )
}

# Set graph theme
theme_set(new = theme_custom())
#
```

## Introduction

So we understand the Fourier Transform: we can express any waveform as a sum of sinusoids that are appropriately weighted and are at discrete multiples of a chosen "fundamental frequency".

In the module [Additive Synthesis](../12-AdditiveSynth/index.qmd), we learnt about how a sum of properly tuned and weighted frequency components can be used to synthesize sounds. Here is another approach: of **frequency-modulation**, or changing the *frequency* of a base *carrier* wave to generate a large multiple of harmonic and in-harmonic sidetones to synthesize sound. 

## {{< iconify icons8 idea >}} Inspiration
To be Found!!

## What is the Frequency Modulation?
```{r}
#| eval: false
nus <- c(0:5, 10, 20)

x <- seq(0, 40, length.out = 801); yl <- c(-.5, 1)
plot(x, x, ylim = yl, ylab = "", type = "n",
     main = "Bessel Functions  J_nu(x)")
abline(h=0, v=0, lty=3)
for(nu in nus) lines(x, besselJ(x, nu = nu), col = nu + 2)
legend("topright", legend = paste("nu=", nus), col = nus + 2, lwd = 1, bty="n")
```


```{r}
#| label: bessel
#| echo: false
#| fig-cap: "Bessel Functions"
##
theme_set(new = theme_custom())
##
gf_fun(
  besselJ(x, nu = 0) ~ x,
  xlim = c(0, 10),
  colour = ~ "0",
  linetype = ~ "0", linewidth = 1
) %>%
  gf_fun(
    besselJ(x, nu = 1) ~ x,
    xlim = c(0, 10),
    colour = ~ "1",
    linetype = ~ "1", linewidth = 1
  ) %>%
  gf_fun(
    besselJ(x, nu = 2) ~ x,
    xlim = c(0, 10),
    colour = ~ "2",
    linetype = ~ "2", linewidth = 1
  ) %>%
  
  gf_fun(
    besselJ(x, nu = 3) ~ x,
    xlim = c(0, 10),
    colour = ~ "3",
    linetype = ~ "3", linewidth = 1
  ) %>%
  
  gf_fun(
    besselJ(x, nu = 4) ~ x,
    xlim = c(0, 10),
    colour = ~ "4",
    linetype = ~ "4", linewidth = 1
  ) %>%
  
  gf_fun(
    besselJ(x, nu = 5) ~ x,
    xlim = c(0, 10),
    colour = ~ "5",
    linetype = ~ "5", linewidth = 1
  ) %>%
  gf_hline(yintercept = 0,
           linewidth = 1,
           color = "grey40") %>%
  gf_refine(
    scale_colour_manual("Order", values = c(1:6)),
    scale_linetype_manual("Order", values = c(1:6))
  ) %>%
  gf_labs(x = "Modulation Index", y = "Amplitude", title = "Bessel Functions", subtitle = "Weights of FM harmonic sidebands")



```


## What is FM based Sound Synthesis?



## Design Principles for FM Synthesis
We will follow the Chowning method here. 

## FM Synthesis with Code

::: {.panel-tabset .nav-pills style="background: whitesmoke; "}

### Using p5.js

### Using R

:::



## {{< iconify mingcute thought-line >}} Wait, But Why?

## {{< iconify ooui references-ltr >}} References

1. John Chowning.(September 1973). *The Synthesis of Complex Audio Spectra by Means of Frequency Modulation*. Journal of the Audio Society. [PDF](../../../../../materials/pdfs/Chowning-Synthesis-using-FM.pdf)
1. Chapter 4: The Synthesis of Sound by Computer; Section 4.7: FM Synthesis. <http://sites.music.columbia.edu/cmc/MusicAndComputers/chapter4/04_07.php>

::: {#refs style="font-size: 60%;"}
###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
#scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("ambient", "gm","mosaicCalc", "plot3D")
) %>%
  knitr::kable(format = "simple")

```
:::
