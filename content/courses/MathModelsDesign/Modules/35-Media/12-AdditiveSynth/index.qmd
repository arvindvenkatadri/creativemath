---
title: Additive Sound Synthesis
subtitle: ""
subject: ""
abstract: ""
date: 23/Jan/2025
date-modified: "`r Sys.Date()`"
order: 12
categories:
  - Component Addition
  - Time-varying Parameters
bibliography: 
  - grateful-refs.bib
  - references.bib
citation: true
editor: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
library(blogdown)
library(tidyverse)
library(ggformula)
library(mosaicCalc) # Analytic Calculus
library(ambient) # Noise generation in R
library(plot3D) # 3D plots for explanation
library(rgl) # Interactive 3D plots for explanation
library(plotly)
library(gm)
knitr::knit_hooks$set(webgl = hook_webgl)
#library(caracas)
library(downloadthis)
library(knitr)
library(kableExtra)
## Markdown boiler plate stuff!!
# ![An Elephant](elephant.png){#fig-elephant}
# This is illustrated well by @fig-elephant.
# 
# ### Figure Panel Divs
#     ::: {#fig-elephants layout-ncol=2}
#     ![Surus](surus.png){#fig-surus}
#     ![Hanno](hanno.png){#fig-hanno}
#      Famous Elephants
#     :::
#     Adding download buttons
#     data that has been read in
#     {{< downloadthis ../../../../materials/Data/housing_train.csv dname="house_prices" label="Download the House Prices Dataset" icon="database-fill-down" type="info" >}}
#    existing file
#    {{< downloadthis Orange/grouped-summaries.ows dname="grouped_summaries" label="Download the Orange Workflow" icon="database-fill-down" type="info" >}} 

```

```{r}
#| label: Extra Pedagogical Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(grateful)
library(MKdescr)
library(shinylive) # To create a Shiny app in a Quarto HTML doc
# Will not work if webr is also used in the SAME Quarto doc!
library(sysfonts)
library(gfonts)
library(kableExtra)
# library(conflicted)
# conflicted::conflicts_prefer(dplyr::filter, dplyr::count, dplyr::last, dplyr::glimpse, base::max)
library(downloadthis)
#devtools::install_github("mccarthy-m-g/embedr")
library(embedr) # Embed multimedia in HTML files
```

```{r}
#| label: Plot Sizing and theming
#| echo: false
#| message: false
#| results: hide

# https://stackoverflow.com/questions/74491138/ggplot-custom-fonts-not-working-in-quarto

# Chunk options
knitr::opts_chunk$set(
 fig.width = 7,
 fig.asp = 0.618, # Golden Ratio
 #out.width = "80%",
 fig.align = "center"
)
### Ggplot Theme
### https://rpubs.com/mclaire19/ggplot2-custom-themes

theme_custom <- function(){ 
    font <- "Roboto Condensed"   #assign font family up front
    
    theme_classic(base_size = 14) %+replace%    #replace elements we want to change
    
    theme(
      panel.grid.minor = element_blank(),    #strip minor gridlines
      text = element_text(family = font),
      #text elements
      plot.title = element_text(             #title
                   family = font,            #set font family
                   #size = 20,               #set font size
                   face = 'bold',            #bold typeface
                   hjust = 0,                #left align
                   #vjust = 2                #raise slightly
                   margin=margin(0,0,10,0)
),               
      
      plot.subtitle = element_text(          #subtitle
                   family = font,            #font family
                   #size = 14,                #font size
                   hjust = 0,
                   margin=margin(2,0,5,0)
),               
      
      plot.caption = element_text(           #caption
                   family = font,            #font family
                   size = 8,                 #font size
                   hjust = 1),               #right align
      
      axis.title = element_text(             #axis titles
                   family = font,            #font family
                   size = 10                 #font size
),
      
      axis.text = element_text(              #axis text
                   family = font,            #axis family
                   size = 8)               #font size
    )
}

# Set graph theme
theme_set(new = theme_custom())
#
```

## Introduction

So we understand the Fourier Transform: we can express any waveform as a
sum of sinusoids that are appropriately weighted and are at discrete
multiples of a chosen "fundamental frequency".

How do we use these ideas to synthesize sound?

## {{< iconify icons8 idea >}} Inspiration

TO BE ADDED (sic!)

## What is Additive Synthesis?

First we need to get used to the idea of an
[**oscillator**](https://p5js.org/reference/p5.sound/p5.Oscillator/).

An *oscillator* is a source: it generates waveforms that we perceive as
sound. Let us play with a few oscillator types here:

<https://musiclab.chromeexperiments.com/Oscillators/>

Each of these waveforms, by the Fourier series, is the **sum of an (
infinite) number** of **sine wave** outputs.

In Fourier series, we normally use just *sine wave oscillators*, and use
many of them to add up to obtain the wave form we need. Now let us hear
from Mr Shiffman again:

{{< video https://youtu.be/Bk8rLzzSink?list=PLRqwX-V7Uu6aFcVjlDAkkGIixw70s7jpW >}}

## The Math of Waveform Addition

In general, we can write a sum of sine/cos waves as:

$$
f(\theta) = \frac{1}{a_0} + \sum_{k=0}^{\infty} a_k*sin(k\theta) + b_k*cos(k\theta)
$$ {#eq-additive-synthesis}

$f$ is the desired time-waveform, the
$\theta = 2\pi\times fundamental~frequency \times t$, and the $a_k$ and
$b_k$ are weights for the individual components that are to be designed.

How does this look like? Mr. Shiffman again:

{{< video https://youtu.be/okfZRl4Xw-c >}}


Now let us see how we can design something using the Additive Method. 

## Design Principles for Additive Synthesis

How do we do this with intent? We will follow the development in
[Farnell](https://mitpress.mit.edu/9780262014410/designing-sound/) and
Risset and Mathews, [@risset1969a] and
[Moorer](https://ccrma.stanford.edu/STANM/stanms/stanm5/stanm5.pdf).

1. The idea is to take an original sound, analyze that using the Fourier Series, and then use those coefficients to synthesize the sound with code.
1. The coefficients, or parameters, need to be manipulated and transformed with time, in order for the synthesized sound to have a "live" feel. 
1. The number of such parameters and their control over time could pose a formidable data management challenge. This leads to the idea of *data reduction* in order to have a manageable number of these, and generate the sound in its essentials. 
1. One essential part of this is to use **envelopes** around the amplitudes of several sine waves, what is called the [ADSR]() method. This could also lead to several oscillators being turned on or off based on need. 
1. So one needs to break down the sound into "principal components" that are harmonically related ( as with the Fourier series) and then fill in [**inharmonic tones**]() using additional oscillators. 

## What is ADSR?

*ADSR* stands for "Attack Decay Sustain Release". These related to the way a note of music varies over time in a typical piece of music. 

{{< video https://www.youtube.com/watch?v=wUSva_BnedA&pp=ygURQURTUiBjb2RpbmcgdHJhaW4%3D >}}


## Additive Synthesis with Code

::: {.panel-tabset .nav-pills style="background: whitesmoke; "}
### Using p5.js

### Using R
:::

## {{< iconify mingcute thought-line >}} Wait, But Why?

To be Written Up.

## {{< iconify ooui references-ltr >}} References

1.  James Moorer. (Nov 1976) *The Synthesis of Complex Audio Spectra by
    Means of Discrete Summation Formulae*. Journal of the Audio Society.
    [PDF](../../../../../materials/pdfs/Moorer-Sine-Summation.pdf)
1.  Jean-Claude Risset, Max V. Matthews. (Feb 1969). *Analysis of
    Musical Instrument Tones*. Physics Today.
    <https://sci-hub.se/https://doi.org/10.1063/1.3035399>
1.  p5.Sound
    Tutorial.<https://pdm.lsupathways.org/6_resources/7_soundandmusic/p5.sound/>
1.  Sound in p5.js Playlist.
    <https://www.youtube.com/playlist?list=PLRqwX-V7Uu6aFcVjlDAkkGIixw70s7jpW>
1.  *Sounds with Tone.js*. <https://pdm.lsupathways.org/3_audio/>
1.  Mister Bomb. *p5.Sound project tutorials*
    <https://www.youtube.com/playlist?list=PLIsdHp2z9wFl7A1wWb2VmQUUojEGsKELE>
1. <https://www.cs.cmu.edu/~tcortina/15104-f20/lectures/24-MoreSound.pdf>
1.  *R package `gm`: the grammar of Music*.
    <https://cran.r-project.org/web/packages/gm/vignettes/gm.html>
1.  Phil Burk,Larry Polansky, Douglas Repetto, Mary Roberts Dan
    Rockmore. *Music and Computers: A Theoretical and Historical
    Approach* <https://musicandcomputersbook.com>


::: {#refs style="font-size: 60%;"}
###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
#scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("gm")
) %>%
  knitr::kable(format = "simple")

```
:::
