---
title: <iconify-icon icon="mdi:reiterate" width="1.2em" height="1.2em"></iconify-icon> <iconify-icon icon="gravity-ui:function" width="1.2em" height="1.2em"></iconify-icon> From Circles to Fourier Series
subtitle: ""
subject: "Shapes, Code, and Sound"
abstract: ""
date: 02/May/2024
date-modified: "`r Sys.Date()`"
order: 10
categories:
- Euler Formula
- Fourier Series
- Harmonics
bibliography: 
  - grateful-refs.bib
citation: true
editor: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
library(blogdown)
library(tidyverse)
library(ggformula)
library(mosaicCalc) # Analytic Calculus
library(ambient) # Noise generation in R
library(plot3D) # 3D plots for explanation
library(rgl) # Interactive 3D plots for explanation
library(plotly)
knitr::knit_hooks$set(webgl = hook_webgl)
#library(caracas)
library(downloadthis)
library(knitr)
library(kableExtra)
## Markdown boiler plate stuff!!
# ![An Elephant](elephant.png){#fig-elephant}
# This is illustrated well by @fig-elephant.
# 
# ### Figure Panel Divs
#     ::: {#fig-elephants layout-ncol=2}
#     ![Surus](surus.png){#fig-surus}
#     ![Hanno](hanno.png){#fig-hanno}
#      Famous Elephants
#     :::
#     Adding download buttons
#     data that has been read in
#     {{< downloadthis ../../../../materials/Data/housing_train.csv dname="house_prices" label="Download the House Prices Dataset" icon="database-fill-down" type="info" >}}
#    existing file
#    {{< downloadthis Orange/grouped-summaries.ows dname="grouped_summaries" label="Download the Orange Workflow" icon="database-fill-down" type="info" >}} 

```

```{r}
#| label: Extra Pedagogical Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(grateful)
library(MKdescr)
library(shinylive) # To create a Shiny app in a Quarto HTML doc
# Will not work if webr is also used in the SAME Quarto doc!
library(sysfonts)
library(gfonts)
library(kableExtra)
# library(conflicted)
# conflicted::conflicts_prefer(dplyr::filter, dplyr::count, dplyr::last, dplyr::glimpse, base::max)
library(downloadthis)
#devtools::install_github("mccarthy-m-g/embedr")
library(embedr) # Embed multimedia in HTML files
```


```{r}
#| label: Plot Sizing and theming
#| echo: false
#| message: false
#| results: hide

# https://stackoverflow.com/questions/74491138/ggplot-custom-fonts-not-working-in-quarto

# Chunk options
knitr::opts_chunk$set(
 fig.width = 7,
 fig.asp = 0.618, # Golden Ratio
 #out.width = "80%",
 fig.align = "center"
)
### Ggplot Theme
### https://rpubs.com/mclaire19/ggplot2-custom-themes

theme_custom <- function(){ 
    font <- "Roboto Condensed"   #assign font family up front
    
    theme_classic(base_size = 14) %+replace%    #replace elements we want to change
    
    theme(
      panel.grid.minor = element_blank(),    #strip minor gridlines
      text = element_text(family = font),
      #text elements
      plot.title = element_text(             #title
                   family = font,            #set font family
                   #size = 20,               #set font size
                   face = 'bold',            #bold typeface
                   hjust = 0,                #left align
                   #vjust = 2                #raise slightly
                   margin=margin(0,0,10,0)
),               
      
      plot.subtitle = element_text(          #subtitle
                   family = font,            #font family
                   #size = 14,                #font size
                   hjust = 0,
                   margin=margin(2,0,5,0)
),               
      
      plot.caption = element_text(           #caption
                   family = font,            #font family
                   size = 8,                 #font size
                   hjust = 1),               #right align
      
      axis.title = element_text(             #axis titles
                   family = font,            #font family
                   size = 10                 #font size
),
      
      axis.text = element_text(              #axis text
                   family = font,            #axis family
                   size = 8)               #font size
    )
}

# Set graph theme
theme_set(new = theme_custom())
#
```

## Introduction

Can circles do more for us than draw these lovely patterns? Can they give us an *alphabet*, a universal way of generating and representing many forms of interest? Can we treat them like a bunch of kitchen ingredients, that we throw into a recipe to conjure up new dishes that look different?


## {{< iconify icons8 idea >}} Inspiration

Take a look at these paintings:

<centre> <iframe 
width = 600 height = 600
src="https://editor.p5js.org/arvindv/full/OKJD6E7qL">
</iframe>
</centre> 


<https://x.com/jagarikin/status/962449509782495232>

<https://www.jezzamon.com/fourier/index.html>

## What is the Fourier Series?

<iframe src="https://phet.colorado.edu/sims/html/fourier-making-waves/latest/fourier-making-waves_en.html"
        width="800"
        height="600"
        allowfullscreen>
</iframe>


## Videos

{{< video https://youtu.be/Mm2eYfj0SgA >}}
<br>
{{< video https://youtu.be/r6sGWTCMz2k >}}



## Rolling Circles and the Fourier Series

So, if we *choose* number of circles $M$ and their complex amplitudes
$a_j$, $j={1..M}$ relying on our (hopefully growing) intuition, we can
systematically generate symmetric patterns based on the idea of rolling
circles. By trial and error, we can design both the value of $M$ and the
values for $a_j$, $j={1..M}$. So far, so good.

But how about the other way around? What if we had a "pattern" in mind,
and wanted to compute the circles, their number and amplitudes, that
would generate that pattern? This is where the Fourier Series comes in.

## {{< iconify mingcute thought-line >}} Wait, But Why?

- Think of the Fourier Series as a set of sinewaves that are derived by decomposing an original waveform
- How are these components related? As integer multiples of a fundamental frequency.
- How are their amplitudes calculated? By taking a **correlation** between the original waveform and the given sinewave component (unit amplitude)
- How is this accurate? By minimizing a "least square error" between the original waveform and the sum of sinusoids. 

## {{< iconify mingcute thought-line >}} A Sound Vocabulary

Some terms will show up repeatedly in our work and we should be clear what they mean:

1. Frequency
1. Amplitude
1. Phase
1. Sinusoid
1. Oscillation: <https://natureofcode.com/oscillation/>
1. Harmonic
1. In-harmonic
1. Partials
1. Waveform
1. Transient
1. Alias

## {{< iconify ooui references-ltr >}} References

1.  Alex Miler. (2018). *Fourier Series and Spinning Circles*. <https://alex.miller.im/posts/fourier-series-spinning-circles-visualization/>
1. Aatish Bhatia (November 6, 2013). The Math Trick Behind MP3s, JPEGs, and Homer Simpsonâ€™s Face. <https://nautil.us/the-math-trick-behind-mp3s-jpegs-and-homer-simpsons-face-234629/>
1. Better Explained. *An Interactive Guide to the Fourier Transform*. <http://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/>
1. Amid Fish.(May 2017). *Karplus Strong String Synthesis*. <http://amid.fish/karplus-strong>
1. Karplus, K., & Strong, A. (1983). *Digital Synthesis of Plucked-String and Drum Timbres*. Computer Music Journal, 7(2), 43. doi:10.2307/3680062. <https://sci-hub.se/https://doi.org/10.2307/3680062> 

## Resources

1.  <https://mathlets.org/mathlets/fourier-coefficients/>
2.  Working with Audio in `p5.js`.
    <https://pdm.lsupathways.org/3_audio/>
3.  Violet Whitney. (Sep 28, 2023) *Sounds: Working with sounds and
    speech in P5.js*.
    <https://medium.spatialpixel.com/sounds-bd05429aba38>
4.  Mister Bomb. *p5.Sound project tutorials*.
    <https://www.youtube.com/playlist?list=PLIsdHp2z9wFl7A1wWb2VmQUUojEGsKELE>
5.  <https://musiclab.chromeexperiments.com/oscillators>
6.  <https://www.electronicbeats.net/the-feed/excel-drum-machine/>
7.  <https://junshern.github.io/algorithmic-music-tutorial/>
8.  <https://blackwhiskercult.com/visual-music-in-p5-js-i/>


### Other tools to explore

1.  Strudel REPL <https://strudel.cc>
2.  Introducing Jukebox, a neural net that generates music, including
    rudimentary singing, as raw audio in a variety of genres and artist
    styles. We're releasing a tool for everyone to explore the generated
    samples, as well as the model and code:
    <https://openai.com/index/jukebox/> (OpenAI (@OpenAI) April 30,
    2020,via Twitter https://twitter.com/OpenAI)
3.  <https://algorithmicpattern.org/2023/05/15/strudel-live-coding-patterns-on-the-web/>
4.  <https://betterexplained.com/articles/vector-calculus-understanding-the-dot-product/>
5.  Freesound: Find Any Sound you Like. <https://freesound.org>
6.  WebSpeech API.
    <https://developer.chrome.com/blog/voice-driven-web-apps-introduction-to-the-web-speech-api/>
7.  <https://dogbotic.com>


::: {#refs style="font-size: 60%;"}
###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
#scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("ambient", "mosaicCalc", "plot3D")
) %>%
  knitr::kable(format = "simple")

```
:::
