---
title: "Matrix Algebra Whirlwind Tour"
---

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false
library(matlib)
library(caracas)
library(ggformula)
```


## Introduction

In this hopefully short and crisp tour, we will look at elementary operations on matrices: transpose, addition/subtraction and multiplication, and finally the inverse.

## What is a Matrix?

An rectangular array of numbers, arranged with rows and columns. A few examples are:

:::: {.columns}
::: {.column width=48%}
@eq-3-by-3-matrix is a 3 x 3 matrix (3 rows and 3 columns).
:::
::: {.column width=48%}
$$
\begin{bmatrix}
2,3,3\\
3,1,2\\
1,2,4\\
\end{bmatrix}
$$ {#eq-3-by-3-matrix}
:::

::: {.column width=48%}
@eq-3-by-4-matrix is a 3 x 4 matrix (3 rows and 4 columns).
:::
::: {.column width=48%}
$$
\begin{bmatrix}
2,3,3,4\\
3,1,2,3\\
1,2,4,1\\
\end{bmatrix}
$$ {#eq-3-by-4-matrix}
:::

::: {.column width=48%}
@eq-1-by-4-matrix is a 1 x 4 matrix (1 rows and 4 columns).
:::
::: {.column width=48%}
$$
\begin{bmatrix}
2 ~ 3 ~ 4 ~ 2\\
\end{bmatrix}
$$ {#eq-1-by-4-matrix}
:::

::: {.column width=48%}
@eq-3-by-4-matrix is a 3 x 1 matrix (3 rows and 1 columns).
:::
::: {.column width=48%}
$$
\begin{bmatrix}
2\\
3\\
1\\
\end{bmatrix}
$$ {#eq-3-by-1-matrix}
:::
::::

## Transpose
A matrix transpose is accomplished by writing rows as columns and vice versa. Hence an $r~ x ~ c$ matrix becomes transposed into a $c~ x ~ r$ matrix, as shown below:

:::: {.columns}
::: {.column width=48%}
```{r}
#| echo: false
A <- matrix_(c("a", "b", "c","d", "1","2"), 2, 3) 
A %>% as_sym()

```

:::
::: {.column width=48%}
```{r}
#| echo: false
t(A) %>% as_sym()

```
:::
::::


## Addition and Subtraction

Matrices can be added or subtracted when they are of the ***same*** dimensions, rows and columns. Matrix elements are added or subtracted in element-wise fashion.


### Addition
```{r}
#| echo: false
A <- matrix_(c("a", "b", "0", "1"), 2, 2) %>% as_sym()
B <- matrix_(c("a", "b", "c", "1"), 2, 2) %>% as_sym()
```

:::: {.columns}
::: {.column width=30%}
```{r}
#| echo: false
A
```
:::

::: {.column width=30%}
```{r}
#| echo: false
B
```
:::
::: {.column width=30%}
```{r}
#| echo: false
A + B
```
:::
::::

### Subtraction
```{r}
#| echo: false
A <- matrix_(c("a", "b", "0", "1"), 2, 2) %>% as_sym()
B <- matrix_(c("a", "b", "c", "1"), 2, 2) %>% as_sym()
```

:::: {.columns}
::: {.column width=30%}
```{r}
#| echo: false
A
```
:::

::: {.column width=30%}
```{r}
#| echo: false
B
```
:::
::: {.column width=30%}
```{r}
#| echo: false
A - B
```
:::
::::

## Multiplication

Matrix multiplication can be visualized in many ways!! According to Gilbert Strang's famous book on Linear Algebra, there are no less than 4 very useful ways. Let us understand perhaps the easiest one, *Linear combination of Columns*.

Suppose there are three students who bought two kinds of food and drink:

- Student A: 2 samosas and 1 chai
- Student B: 3 samosas and 0 chai
- Student C: 0 samosa and 2 chai-s (Just before Arvind's R class.)

Samosas cost 20 and chai costs 10. How much do they pay?

```{r}
#| echo: false
A <- matrix_(c(2,3,0,1,0,2),3,2) 
B <- matrix_(c(20, 10), 2,1) 
C <- A %*% B
#A;B;C
# tex(A)
# tex(B)
#tex(C)
```
:::: {.columns}
::: {.column width=30%}
$$
\left[\begin{matrix}\color{red}{2} & \color{blue}{1}\\\\\color{red}{3} & \color{blue}{0}\\\\\color{red}{0} & \color{blue}{2}\end{matrix}\right]
$$
:::
::: {.column width=30%}
$$
\left[\begin{matrix}\color{red}{20}\\\\\color{blue}{10}\end{matrix}\right]
$$
:::
::: {.column width=30%}
$$
\left[\begin{matrix}50\\\\60\\\\20\end{matrix}\right]
$$
:::
::::

:::: {.columns}
::: {.column width=30%}
$$A$$
:::
::: {.column width=30%}
$$B$$
:::
::: {.column width=30%}
$$C$$
:::
::::

We see that the first number $20$ in B multiplies the entire first column in A, and the second number $10$ multiplies the entire second column in A. These two multiplied columns are added to get the matrix C.

Suppose they had two options for shops? And the prices were different?

- Samosas cost 20 and chai costs 10 at Shop#1. (as before)
- Samosas cost 15 and chai costs 15 at Shop#2. 

```{r}
#| echo: false
A2 <- matrix_(c(2,3,0,1,0,2),3,2) 
B2 <- matrix_(c(20, 10, 15,15), 2,2) 
C2 <- A2 %*% B2
# A2;B2;C2
# tex(A2)
# tex(B2)
# tex(C2)
```
:::: {.columns}
::: {.column width=30%}
$$
\left[\begin{matrix}\color{red}{2} & \color{blue}{1}\\\\\color{red}{3} & \color{blue}{0}\\\\\color{red}{0} & \color{blue}{2}\end{matrix}\right]
$$
:::
::: {.column width=30%}
$$
\left[\begin{matrix}20 & 15\\\\10 & 15\end{matrix}\right]
$$
:::
::: {.column width=30%}
$$
\left[\begin{matrix}50 & 45\\\\60 & 45\\\\20 & 30\end{matrix}\right]
$$
:::
::::

:::: {.columns}
::: {.column width=30%}
$$A2$$
:::
::: {.column width=30%}
$$B2$$
:::
::: {.column width=30%}
$$C2$$
:::
::::

Shop#2 is cheaper. Drag peasant#3 and go there, peasants#1 and #2.

How did this multiplication happen?
Same story as with one shop/prices, repeated to handle the second shop.
Matrix B2 now has *two* columns for prices, for Shop#1 and Shop#2.
Multiplication takes each column in B2 and does the same weighted-column-addition with A2. Hence two columns of answers in C2.

::: callout-important
### Matrix Multiplication in 4 ways
As shown in Gilbert Strang's book, there are 4 ways of thinking about matrix multiplication:

- Our method of weighting *columns* in A using *columns* B and adding
- Weighting *rows* in B using *rows* in A and adding
- Multiplying *individual values* from *rows* in A and *columns* in B and adding up, for each location in C. ( This is the common textbook method)
- Multiplying rows in A and columns in B. ( A *vectorized* version of the previous method).

For now, this one method should suffice. 

## References
1. Gilbert Strang. Linear Algebra and its Applications. Thomson/Brooks-Cole.
1. Glenn Henshaw.(Sep 28, 2019) *Three Ways to Understand Matrix Multiplication*. <https://ghenshaw-work.medium.com/3-ways-to-understand-matrix-multiplication-fe8a007d7b26>


