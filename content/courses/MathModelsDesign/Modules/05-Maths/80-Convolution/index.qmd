---
date-modified: "`r Sys.Date()`"
date: 15/Apr/2025
title: "What is Convolution?"
order: 80
summary: 
tags:
- Convolution

---


```{r setup, include=FALSE}
library(blogdown)
library(tidyverse)
library(ggformula)
library(mosaicCalc) # Analytic Calculus
library(ambient) # Noise generation in R
library(plot3D) # 3D plots for explanation
library(caracas)
library(downloadthis)
library(knitr)
library(kableExtra)
## Markdown boiler plate stuff!!
# ![An Elephant](elephant.png){#fig-elephant}
# This is illustrated well by @fig-elephant.
# 
# ### Figure Panel Divs
#     ::: {#fig-elephants layout-ncol=2}
#     ![Surus](surus.png){#fig-surus}
#     ![Hanno](hanno.png){#fig-hanno}
#      Famous Elephants
#     :::
#     Adding download buttons
#     data that has been read in
#     {{< downloadthis ../../../../materials/Data/housing_train.csv dname="house_prices" label="Download the House Prices Dataset" icon="database-fill-down" type="info" >}}
#    existing file
#    {{< downloadthis Orange/grouped-summaries.ows dname="grouped_summaries" label="Download the Orange Workflow" icon="database-fill-down" type="info" >}} 

```

```{r}
#| label: Extra Pedagogical Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(grateful)
library(MKdescr)
library(shinylive) # To create a Shiny app in a Quarto HTML doc
# Will not work if webr is also used in the SAME Quarto doc!
library(sysfonts)
library(gfonts)
library(kableExtra)
# library(conflicted)
# conflicted::conflicts_prefer(dplyr::filter, dplyr::count, dplyr::last, dplyr::glimpse, base::max)
library(downloadthis)
#devtools::install_github("mccarthy-m-g/embedr")
library(embedr) # Embed multimedia in HTML files
```

```{r}
#| label: Plot Sizing and theming
#| echo: false
#| message: false
#| results: hide

# https://stackoverflow.com/questions/74491138/ggplot-custom-fonts-not-working-in-quarto

# Chunk options
knitr::opts_chunk$set(
 fig.width = 7,
 fig.asp = 0.618, # Golden Ratio
 #out.width = "80%",
 fig.align = "center"
)
### Ggplot Theme
### https://rpubs.com/mclaire19/ggplot2-custom-themes

theme_custom <- function(){ 
    font <- "Roboto Condensed"   #assign font family up front
    
    theme_classic(base_size = 14) %+replace%    #replace elements we want to change
    
    theme(
      panel.grid.minor = element_blank(),    #strip minor gridlines
      text = element_text(family = font),
      #text elements
      plot.title = element_text(             #title
                   family = font,            #set font family
                   #size = 20,               #set font size
                   face = 'bold',            #bold typeface
                   hjust = 0,                #left align
                   #vjust = 2                #raise slightly
                   margin=margin(0,0,10,0)
),               
      
      plot.subtitle = element_text(          #subtitle
                   family = font,            #font family
                   #size = 14,                #font size
                   hjust = 0,
                   margin=margin(2,0,5,0)
),               
      
      plot.caption = element_text(           #caption
                   family = font,            #font family
                   size = 8,                 #font size
                   hjust = 1),               #right align
      
      axis.title = element_text(             #axis titles
                   family = font,            #font family
                   size = 10                 #font size
),
      
      axis.text = element_text(              #axis text
                   family = font,            #axis family
                   size = 8)               #font size
    )
}

# Set graph theme
theme_set(new = theme_custom())
#
```


```{r,echo = FALSE, eval = FALSE, fig.alt="Petr Slováček on Unsplash", fig.align='center'}
knitr::include_graphics("featured.jpg")

```

## {{< iconify icons8 idea >}} Inspiration

Consider that you live in a high rise apartment complex. Have you heard an ambulance go by? How does the sound of the siren change as the ambulance approaches towards your dwelling and then goes past it to get lost amidst the surrounding buildings again?

The siren's **emitted** sound is always the **same**. It is the local surroundings and the *geometry of the echoes* that brings the **same** sound to your ears again and again, but in altered/weighted form. The sound from the ambulance goes all around, hits on or other of the buildings, reflects, and comes back to your ears **after a delay** and **weighted** by the *strength* of the echo geometry.

What you hear is the ***overlapping*** of multiple, weighted copies of the sound emitted by the ambulance. As long as you have direct, i.e. non-reflected path from the ambulance to your ears, the echoes are *relatively subdued*. Once the vehicle gets right into your building complex and you lose the direct line-of-sight path, the echoes take over and the sound becomes a very confused mass that is barely recognizable.

#### What is Convolution?

All right, what does this have to do with **convolution**? Let us make some definitions first:

::: callout-important
### Channel
The free-space medium plus the buildings and other things that reflect sound in our environment, are called the "Channel". The channel ascts as a conduit between a source (transmitter) and a receiver.
:::

::: callout-important
### Impulse Response of the Channel
The geometry of the echoes that connect transmitter to receiver, including the bounces of the walls, the resulting path-delays, and weighting are together denoted as the **impulse response** of the *channel*. This is what the *channel* would put out at the receiver if the source transmitter were to emit a very-short-duration signal, like the squeak of a mouse. 
:::

Now, most signals emitted by a source are usually not "squeak-like": the ambulance has a siren that continuously emits the wellknown sound. Such a continuous signal is capable of mathematically decomposed into a series of "squeak-like" signals, which we call ***impulses***.

So finally:

::: callout-important
### What is Convolution?
Each impulse undergoes the same geometry path-delays and path-weightings posed by the *channel impulse response*. This is diagrammatically shown below:

![Convolution](../../../../../materials/images/Convolution.drawio.png){#fig-convolution}


We see that impulses in the *input waveform* that arrive ***later*** undergo wieghting by the ***earliest*** of path-delays and path-weightings. This should give you an intuition, that mathematically, this is like taking a ***weighted average*** but with the sequence of weights ***inverted in time***!!! 

If $in(t)$ is the emitted sound waveform, and $f(t)$ is the channel impulse response, we write the output of the channel as:

$$
\Large{out(t) = \int_{-\infty}^{\infty} in(t) * f(t-\tau) *d\tau}
$${#eq-convolution}

Note that we are integrating wrt ***delay*** $\tau$; and $f$ uses negative $\tau$ as its variable. Hence it is hence inverted in time, as shown in the bottom left of the @fig-convolution. 
:::

## Convolution in Code

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### Using p5.js


### Using R
We'll see

:::


## {{< iconify mingcute thought-line >}} Wait, But Why?

- [Perceptrons](../../100-AI/30-MLP/index.qmd) are a standard convolution operation. 
- Convolution is an operation that is crucial to the operation of [Convolutional Neural Networks](../../100-AI/60-Convnet/index.qmd). The early *(spatial) filter layers* in a CNN implement a convolution with impulse responses that learn to look for edges, curves and similar *canonical* pieces in an input image. 
- When we generate guitar-like sounds using the [Karplus-Strong Guitar Algorithm](../../35-Media/99-KarplusStrong/index.qmd), we are using a set of filters (with low-pass/band-pass impulse responses) in the feedback loop of a delay-line primed with random noise. 
- Convolution can be seen as a series of [Vector Dot Products](../../05-Maths/20-Vectors/index.qmd#what-is-the-inner-product) between two vectors sliding past each other. 

## {{< iconify ooui references-ltr >}} References
To be Written Up.


::: {#refs style="font-size: 60%;"}
###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
#scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("keras", "tensorflow", "safetensors")
) %>%
  knitr::kable(format = "simple")

```
:::


