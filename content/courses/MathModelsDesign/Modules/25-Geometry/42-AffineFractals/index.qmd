---
title: <iconify-icon icon="mdi:reiterate" width="1.2em" height="1.2em"></iconify-icon> <iconify-icon icon="gravity-ui:function" width="1.2em" height="1.2em"></iconify-icon> Affine Transformation Fractals
subtitle: "Created in Translation"
subject: ""
abstract: ""
date: 28/Jan/2025
date-modified: "`r Sys.Date()`"
order: 42
categories:
- Iterated Functions
- Fractals
- Affine Transformations
- Barnsley
bibliography: 
  - grateful-refs.bib
  - references.bib
citation: true
editor: 
  markdown: 
    wrap: 72
filters:
  - d2
d2:
  layout: elk
  theme: "CoolClassics"
  sketch: true
---

```{r setup, include=FALSE}
library(blogdown)
library(tidyverse)
library(ggformula)
library(mosaicCalc) # Analytic Calculus
library(ambient) # Noise generation in R
library(plot3D) # 3D plots for explanation
library(caracas)
library(downloadthis)
library(knitr)
library(kableExtra)
library(grid)
library(matlib) # Matrix Algebra teaching aid
## Markdown boiler plate stuff!!
# ![An Elephant](elephant.png){#fig-elephant}
# This is illustrated well by @fig-elephant.
# 
# ### Figure Panel Divs
#     ::: {#fig-elephants layout-ncol=2}
#     ![Surus](surus.png){#fig-surus}
#     ![Hanno](hanno.png){#fig-hanno}
#      Famous Elephants
#     :::
#     Adding download buttons
#     data that has been read in
#     {{< downloadthis ../../../../materials/Data/housing_train.csv dname="house_prices" label="Download the House Prices Dataset" icon="database-fill-down" type="info" >}}
#    existing file
#    {{< downloadthis Orange/grouped-summaries.ows dname="grouped_summaries" label="Download the Orange Workflow" icon="database-fill-down" type="info" >}} 

```

```{r}
#| label: Extra Pedagogical Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(grateful)
library(MKdescr)
library(shinylive) # To create a Shiny app in a Quarto HTML doc
# Will not work if webr is also used in the SAME Quarto doc!
library(sysfonts)
library(gfonts)
library(kableExtra)
library(caracas) # Analytic Maths in R
# library(conflicted)
# conflicted::conflicts_prefer(dplyr::filter, dplyr::count, dplyr::last, dplyr::glimpse, base::max)
library(downloadthis)
#devtools::install_github("mccarthy-m-g/embedr")
library(embedr) # Embed multimedia in HTML files

```

```{r}
#| label: Plot Sizing and theming
#| echo: false
#| message: false
#| results: hide

# https://stackoverflow.com/questions/74491138/ggplot-custom-fonts-not-working-in-quarto

# Chunk options
knitr::opts_chunk$set(
 fig.width = 7,
 fig.asp = 0.618, # Golden Ratio
 #out.width = "80%",
 fig.align = "center"
)
### Ggplot Theme
### https://rpubs.com/mclaire19/ggplot2-custom-themes

theme_custom <- function(){ 
    font <- "Roboto Condensed"   #assign font family up front
    
    theme_classic(base_size = 14) %+replace%    #replace elements we want to change
    
    theme(
      panel.grid.minor = element_blank(),    #strip minor gridlines
      text = element_text(family = font),
      #text elements
      plot.title = element_text(             #title
                   family = font,            #set font family
                   #size = 20,               #set font size
                   face = 'bold',            #bold typeface
                   hjust = 0,                #left align
                   #vjust = 2                #raise slightly
                   margin=margin(0,0,10,0)
),               
      
      plot.subtitle = element_text(          #subtitle
                   family = font,            #font family
                   #size = 14,                #font size
                   hjust = 0,
                   margin=margin(2,0,5,0)
),               
      
      plot.caption = element_text(           #caption
                   family = font,            #font family
                   size = 8,                 #font size
                   hjust = 1),               #right align
      
      axis.title = element_text(             #axis titles
                   family = font,            #font family
                   size = 10                 #font size
),
      
      axis.text = element_text(              #axis text
                   family = font,            #axis family
                   size = 8)               #font size
    )
}

# Set graph theme
theme_set(new = theme_custom())
#
```

## {{< iconify icons8 idea >}} Inspiration

```{r}
#| echo: false
# Iteratively build the fern
theme_set(theme_custom())
#
n <- 50000
x <- numeric(n)
y <- numeric(n)
x[1] <- 0
y[1] <- 0 # Starting point (0,0). Can be anything!

# Four Affine translation Matrices
A <- vector(mode = "list", length = 4)
A[[1]] <- matrix(c(0,0,0,0.18), nrow=2)
A[[2]] <- matrix(c(0.85,-0.04,0.04,0.85), nrow=2)
A[[3]] <- matrix(c(0.2,0.23,-0.26,0.22), nrow=2)
A[[4]] <- matrix(c(-0.15,0.36,0.28,0.24), nrow=2)

# Four Simple translation Matrices
b <- vector(mode = "list", length = 4)
b[[1]] <- matrix(c(0,0))
b[[2]] <- matrix(c(0,1.6))
b[[3]] <- matrix(c(0,1.6))
b[[4]] <- matrix(c(0,0.54))

for (i in 1:(n-1)) {
# Randomly sample the 4 + 4 translations based on a probability
# Change these to try different kinds of ferns
trans <- sample(1:4, prob=c(.02, .9, .09, .08), size=1)

# Translate **current** xy based on the selected translation
# Apply one of 16 possible affine transformations
xy <- A[[trans]] %*% c(x[i],y[i]) + b[[trans]]
x[i+1] <- xy[1] # Save x component
y[i+1] <- xy[2] # Save y component
}
# Plot this baby
#plot(y,x,col= "pink",cex=0.1)
gf_point(y ~ x, colour = "lightgreen", size = 0.02,
         title = "Barnsley Fern") 

```
This is a mathematically created fern! It uses, (gasp!) repeated matrix multiplication and addition! 

We'll see.

## Introduction

The *self-similarity* of fractals suggests that we could create new
fractals from a basic shape using the following procedure:

1.  Start with a basic shape, e.g. a rectangle
2.  Define a set of transformations: scaling / mirroring / translation /
    combination (say n scaled+rotated replicates)
3.  Run these transformations on the basic shape
4.  Feed the output back to the input ( Classic IFR )
5.  Wait for the pattern to emerge.

Well, this works, provided the transformations include significant
amounts of scaling (i.e. **reduction in size**). You can imagine that
if the basic shape does not shrink fast enough, the pattern converges
very slowly and would remain ***chunky*** even after a large number of
iterations.

Secondly, the number of operations quickly becomes exponentially high,
as each stage creates n-fold computation increase. Indeed, if we run $d$
iterations, then the computations scale as $n^d$, which can very quickly
become out of hand!!

So what to do? Just like with the
[DeepSeek-R1](https://arxiv.org/abs/2501.12948) algorithm that
simplified a great deal of AI algorithms, we have recourse to what is
called the [**Barnsley
Algorithm**](https://mathematica.stackexchange.com/questions/124919/construction-steps-of-barnsleys-fern).
NOTE: especially note the terrific pictures on this stackexchange page!

First let us understand what are ***Affine Transformations*** and then
build our fractals.

## What is an Affine Transformation?

Affine Transformations are defined as a transformations of a space that
are:

-   linear (no nonlinear functions of an x-coordinate, say $e^x$)
-   reversible.

Affine transformations can be represented by matrices which multiply the
coordinates of a shape in space. Multiple transformations can be
understood a series of matrix multiplications, and can indeed be
collapsed into a **SINGLE** matrix multiplication of the coordinates of the shape.

See this webpage at Mathigon to get an idea of [**rigid transformations of shape.**](https://mathigon.org/course/transformations/rigid#transformations)

## Some Examples of Affine Transformations

![](https://i.pinimg.com/originals/b6/4d/88/b64d88b5898ffff0885db0ff9f1ccb27.png)

Here are some short videos of affine transformations:

::: {layout-nrow="3"}

::: {#fig-1}

{{< video ../../../../../materials/images/a11_square_white.mp4 title="Scaling Along X" >}}

Scaling Along X

:::


::: {#fig-2}
{{< video ../../../../../materials/images/a22_square_white.mp4 title="Scaling Along Y" >}}

Scaling Along Y

:::

::: {#fig-3}

{{< video ../../../../../materials/images/a12_square_white.mp4 title="Shearing Along X">}}

Shearing Along X

:::

::: {#fig-4}
{{< video ../../../../../materials/images/a21_square_white.mp4 title="Shearing Along Y">}}

Shearing Along Y

:::

::: {#fig-5}
{{< video ../../../../../materials/images/a13_square_white.mp4 title="Translation Along X">}}

Translation Along X

:::

::: {#fig-6}
{{< video ../../../../../materials/images/a23_square_white.mp4 title="Translation Along Y">}}

Translation Along Y

:::
:::


## Designing with Affine Transformations

So how do we use these Affine Transformations? Let us paraphrase what
[Gary William
Flake](https://mitpress.mit.edu/9780262561273/the-computational-beauty-of-nature/)
says in his book *The Computational Beauty of Nature*:

If $p$ is a point in space, and its *affine transformation(s)* is
$L(p$), then:

-   If $p$ is on the final fractal, then so is $L(p)$;
-   If $p$ is **not** part of the final fractal, then $L(p)$ will be
    atleast closer to the final fractal than $p$ itself.

These ideas give us our final algorithm for *designing a fractal with
affine transformations*.

-   Start with any point $p$
-   Pick a (set of) Affine transformations $L_i(p)$ that allow us to
    imagine the final shape
-   Take the *affine transformation* $L_i(p)$ of point $p$. Choose $i$
    at random!
-   Use an IFR: pipe the result back into the input
-   Make a large number of iterations
-   Plot all intermediate points that come out of the IFR

With this approach, the points rapidly land up on the fractal which
builds up over multiple iterations. We can start anywhere in space and
it will still converge.

The additional feature of the Barnsley algorithm is the **randomness**:
since most fractals use not one but several affine transformations to
create a multiplicity of forms, at each iteration we can randomly choose
between them!

The block diagram of the Barnsley Algorithm looks like this:

```{d2}
title: Barnsley Fractal Algorithm {
  shape: text
  near: top-center
  style: {
    font-size: 60
    italic: true
  }
}
direction: right

in: "" {shape: circle
     style: {
      font-size: 45
      stroke: white
      fill: white
     }}
out: "" {shape: circle
     style: {
      font-size: 45
      stroke: white
      fill: white
    }}
Random Choice {shape: circle
     style: {
      font-size: 45
    }}

  Af1 {shape: circle
     style: {
      font-size: 45
    }}
  Af2 {shape: circle
     style: {
      font-size: 45
    }}
  Af3 {shape: circle
     style: {
      font-size: 45
     }}
  Af4 {shape: circle
     style: {
      font-size: 45
    }}

Output {shape: circle
     style: {
      font-size: 45
    }}
Random Choice -> Af1: {
  source-arrowhead.label: ""
  style: {
    font-size: 45
    fill: LightBlue
    stroke: Blue
    stroke-width: 9
    animated: true
  }
}
Random Choice -> Af2: {
  source-arrowhead.label: ""
  style: {
    font-size: 45
    fill: LightBlue
    stroke: Blue
    stroke-width: 9
    animated: true
  }
}
Random Choice -> Af3: {
  source-arrowhead.label: ""
  style: {
    font-size: 45
    fill: LightBlue
    stroke: Blue
    stroke-width: 9
    animated: true
  }
}
Random Choice -> Af4: {
  source-arrowhead.label: ""
  style: {
    font-size: 45
    fill: LightBlue
    stroke: Blue
    stroke-width: 9
    animated: true
  }
}

Af1 -> Output: {
  source-arrowhead.label: ""
  style: {
    font-size: 45
    fill: LightBlue
    stroke: Blue
    stroke-width: 9
    animated: true
  }
}
Af2 -> Output: {
  source-arrowhead.label: ""
  style: {
    font-size: 45
    fill: LightBlue
    stroke: Blue
    stroke-width: 9
    animated: true
  }
}
Af3 -> Output: {
  source-arrowhead.label: ""
  style: {
    font-size: 45
    fill: LightBlue
    stroke: Blue
    stroke-width: 9
    animated: true
  }
}
Af4 -> Output: {
  source-arrowhead.label: ""
  style: {
    font-size: 45
    fill: LightBlue
    stroke: Blue
    stroke-width: 9
    animated: true
  }
}

in -> Random Choice: {
  source-arrowhead.label: "input"
  style: {
    stroke-width: 9
    font-size: 25
  }
}
out -> Random Choice: Recursion: {
  source-arrowhead.label: ""
  style: {
    font-size: 45
    fill: LightBlue
    stroke: FireBrick
    stroke-width: 9
    animated: true
  }
}
Output -> out: {
  source-arrowhead.label: ""
  style: {
    stroke-width: 9
    font-size: 25
  }
}
explanation: |md
  # Affine Transformations
  The Affine Transformations are\
  of the form AX + B and are\
  randomly chosen at each iteration.\
  Probabilities can be assigned by the user.
| {
  near: center-left
  style: {
  font-size: 40
  italic: false
  }
}

```

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### Using p5.js

<iframe width="780px" height="600px"
src="https://editor.p5js.org/codingtrain/full/G4V940Y8V">
</iframe>

### Using R

In the code below, the Affine transformations $Af_i$ are of the form

$$
AF_i = A_i * X + B_i, ~ i = 1...4
$${#eq-barnsley-fern-affine-transformation}


with four options each for matrix $A$ and matrix $B$, and $X = (x,y)$, the current point coordinates (seed input, then output feedback for recursion). There are 50000 iterations performed and at each interation, a random A and a random B are picked to provide the Affine Transformation for that iteration. 

The starting "seed point" is simply $X = (0,0)$.

The probabilities with which each affine transformation is chosen are not all equal; these can be tweaked to see the effect on the fractal. 

The four options for the $A_i$ matrices are:

::: {layout-nrow="2"}
```{r}
#| code-fold: true
#| results: hold
A <- vector(mode = "list", length = 4)
# Four Affine translation Matrices
A[[1]] <- matrix(c(0,0,0,0.18), nrow=2)
A[[2]] <- matrix(c(0.85,-0.04,0.04,0.85), nrow=2)
A[[3]] <- matrix(c(0.2,0.23,-0.26,0.22), nrow=2)
A[[4]] <- matrix(c(-0.15,0.36,0.28,0.24), nrow=2)
as_sym(A[[1]])
as_sym(A[[2]])
as_sym(A[[3]])
as_sym(A[[4]])

```
:::

```{r}
#| echo: false
#| results: asis
latexMatrix(A[[1]],matrix = "bmatrix") %>% Eqn(quarto = TRUE,label = "eq-A1")
latexMatrix(A[[2]],matrix = "bmatrix") %>% Eqn()
latexMatrix(A[[3]],matrix = "bmatrix") %>% Eqn()
latexMatrix(A[[4]],matrix = "bmatrix") %>% Eqn()

```


```{r results = "asis", echo = FALSE}
Eqn(r"{\mathbf{X} = \mathbf{U} \mathbf{\Lambda} \mathbf{V}}", label = 'eq-svn')
```


```{r results = "asis", echo = FALSE}
latexMatrix(A[[1]], matrix = "bmatrix") %>% 
  Eqn(label = 'eq-A1', quarto = TRUE, preview = F)

```


And the four options for the $B_i$ matrices are: 

```{r}
#| code-fold: true
#| results: hold
# Four Simple translation Matrices
b <- vector(mode = "list", length = 4)
b[[1]] <- matrix(c(0,0))
b[[2]] <- matrix(c(0,1.6))
b[[3]] <- matrix(c(0,1.6))
b[[4]] <- matrix(c(0,0.54))
as_sym(b[[1]])
as_sym(b[[2]])
as_sym(b[[3]])
as_sym(b[[4]])

```

By randomly choosing any of the $16$ resulting transformations, with different but fixed probablilities, we compute and render the Barnsley fern:

```{r}
#| code-fold: true
# Iteratively build the fern
theme_set(theme_custom())
#
n <- 50000
x <- numeric(n)
y <- numeric(n)
x[1] <- 0
y[1] <- 0 # Starting point (0,0). Can be anything!

for (i in 1:(n-1)) {
# Randomly sample the 4 + 4 translations based on a probability
# Change these to try different kinds of ferns
trans <- sample(1:4, prob=c(.02, .9, .09, .08), size=1)

# Translate **current** xy based on the selected translation
# Apply one of 16 possible affine transformations
xy <- A[[trans]] %*% c(x[i],y[i]) + b[[trans]]
x[i+1] <- xy[1] # Save x component
y[i+1] <- xy[2] # Save y component
}
# Plot this baby
#plot(y,x,col= "pink",cex=0.1)
gf_point(y ~ x, colour = "lightgreen", size = 0.02,
         title = "Barnsley Fern") 

```

```{r}
#| code-fold: true
#| results: hold
#| fig-cap: "Vertical movement with Shrinkage"
#| fig-subcap: 
#|   - "Vertical movement with Shrinkage"
X <- matrix(c(5,5), nrow=2)
as_sym(A[[1]])
as_sym(X)
as_sym(A[[1]]) %*% as_sym(X)
```

```{r}
#| code-fold: true
#| results: hold
#| fig-cap: "Modest Shrinkage of Both X and Y, X more than Y"
#| fig-subcap: 
#|   - "Modest Shrinkage of Both X and Y, X more than Y"
X <- matrix(c(5,5), nrow=2)
as_sym(A[[2]])
as_sym(X)
as_sym(A[[2]]) %*% as_sym(X)
```

```{r}
#| code-fold: true
#| results: hold
#| fig-cap: "Large Shrinkage of Both X and Y, Y more than X"
#| fig-subcap: 
#|   - "Large Shrinkage of Both X and Y, Y more than X"
X <- matrix(c(5,5), nrow=2)
as_sym(A[[3]])
as_sym(X)
as_sym(A[[3]]) %*% as_sym(X)

```

```{r}
#| code-fold: true
#| results: hold
#| fig-cap: "Shrinkage of Both X and Y, X more than Y"
#| fig-subcap: 
#|   - "Shrinkage of Both X and Y, X more than Y"
X <- matrix(c(5,5), nrow=2)
as_sym(A[[4]])
as_sym(X)
as_sym(A[[4]]) %*% as_sym(X)
```

:::


## {{< iconify mingcute thought-line >}} Wait, But Why?

OK, so **why** did this become a fern??

If we look at the list of affine transformations, we see that there are essentially 4 movements possible:

- a simple ***vertical*** y movement, with shrinkage
- a gentle rotation with very little shrinkage
- a rotation to the right with shrinkage
- a rotation to the left with shrinkage

The second transformation is the one most commonly used!! The others are relatively rarely used! So the points slowly slope to the right and do now get squashed up close to the start: they retain sufficient size in (x,y) coordinates for the fern to slowly spread to the right. 

So we can design the affine transformations based on an intuition of how  **we might draw** the fractal by hand, say larger strokes to the right, smaller to the left etc, and and decide on the frequency of strokes based on how often these strokes might be used in drawing.


## {{< iconify ooui references-ltr >}} References

1.  Ryan Bradley-Evans. (Oct 7, 2020). *Barnsley’s Fern Fractal in R*.
    <https://astro-ryan.medium.com/barnsleys-fern-fractal-in-r-e52a357e23db>
1.  Affine Transformations @ [The Algorithm Archive](https://www.algorithm-archive.org).
<https://www.algorithm-archive.org/contents/affine_transformations/affine_transformations.html>
1. Iterated Function systems @ [The Algorithm Archive](https://www.algorithm-archive.org)<https://www.algorithm-archive.org/contents/IFS/IFS.html>
1. p5.js Tutorial: Coordinates and Transformations. <https://p5js.org/tutorials/coordinates-and-transformations/>
1. The Coding Train: Algorithmic Botany. <https://thecodingtrain.com/tracks/algorithmic-botany>
1. Barnsley Fern @ Wikipedia <https://en.wikipedia.org/wiki/Barnsley_fern>


::: {#refs style="font-size: 60%;"}
###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
#scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("caracas", "matlib")
) %>%
  knitr::kable(format = "simple")

```
:::
