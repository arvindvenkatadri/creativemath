---
title: "Classification using Support Vector Machines"
date: 21/April/2025
date-modified: "`r Sys.Date()`"
order: 35
abstract: We will look at the basic models for Classification of Data
caegories:
  - Machine Learning
  - Orange Data Mining

editor: 
  markdown: 
    wrap: 72
---

```{r setup,include=FALSE}
#| message: false
library(DiagrammeR)
library(tidyverse)
library(palmerpenguins)
library(ggformula)
library(mosaic)
library(ISLR)
# devtools::install_github("seankross/p5")
library(p5)
```

```{r}
#| include: false
ggplot2::theme_set(new = theme_classic())
```

## Introduction

```{r}
#| label: penguins-classification
#| code-fold: true
#| tidy: styler

penguins %>% gf_point(body_mass_g ~ flipper_length_mm, colour = ~ species)
```

```{r}
library(p5)
library(tibble)

# Create drawings from data frames

squares <- data_frame(x = c(100, 100, 200, 200),
                      y = c(50, 150, 50, 150),
                      w = rep(40, 4),
                      h = rep(40, 4))

squares %>%
  p5() %>%
  createCanvas(300, 200) %>%
  background("#002d72") %>%
  rect()
```

```{r}
# Draw complex shapes
  
p5() %>%
  createCanvas(200, 200) %>%
  background("#DCDCDC") %>%
  arc(50, 55, 50, 50, 0, ~HALF_PI) %>%
  noFill() %>%
  arc(50, 55, 60, 60, ~HALF_PI, ~PI) %>%
  arc(50, 55, 70, 70, ~PI, ~PI+QUARTER_PI) %>%
  arc(50, 55, 80, 80, ~PI+QUARTER_PI, ~TWO_PI)
```


```{r}
# Create a sketch piece-by-piece

squares %>%
  draw() %>%
  fill("#808080") %>%
  rect() %>%
  sketch(draw = ., 
    setup = setup() %>% createCanvas(300, 200))

```

```{r}
# Create interactions

draw() %>%
  background("#F4F8FC") %>%
  line(~mouseX, 0, ~mouseX, 200) %>%
  sketch(draw = ., 
    setup = setup() %>% createCanvas(300, 200))
```

```{r}
# Let users draw

p5() %>%
  createCanvas(400, 300) %>%
  background("#F4F8FC") %>%
  ellipse(~mouseX, ~mouseY, 30, 30)
  
# Click to change the brush
  
setup_ <- setup() %>%
  createCanvas(640, 380, ~WEBGL)
draw_ <- draw() %>%
  js("
      if (mouseIsPressed) {
        fill(0);
      } else {
        fill(255);
      }
  ") %>%
  ellipse(~mouseX, ~mouseY, 80, 80)

sketch(setup = setup_, draw = draw_)

```

```{r}
#| include: false
setup_ <- setup() %>%
  createCanvas(710, 400, renderer = ~ WEBGL) %>%
  background("pink")





sketch(setup = setup_, draw = draw_)

```

## What is Classification, again?
Classification is a Machine Learning method that predicts the **class** or **level** of a target Qualitative variable, based on several Qualitative and Quantitative predictors. 

## How does one Classify? 


## What is a Hyperplane?

Consider a dataset that contains a pair of Quantitative **predictor variables** and a **target** Qualitative variable. 

```{r}
#| label: using-dot-product
#| echo: false
set.seed(42)
my_data <- tibble(x1 = runif(20, 1,20), x2 = runif(20, 1,20)) %>% 
  mutate(y = if_else((x1 - x2) >0, -1, 1)) %>% 
  mutate(y = factor(y, levels = c(-1,1), labels = c(-1,1)))
my_data
gf_point(my_data, x2 ~ x1, colour = ~ y) %>% 
  gf_abline(slope = 1, intercept = 0) %>% 
  gf_abline(slope = -1, intercept = 20) %>% 
  gf_refine(coord_equal()) %>% 
  gf_theme(theme_classic()) 
  
```





![Hyperplane](../../../../materials/images/SVM-1.png){#fig-hyperplane-SVM}


## References

1.  <https://towardsdatascience.com/data-science-made-easy-data-modeling-and-prediction-using-orange-f451f17061fa>
2.  The beauty of Random Forests:
    <https://orangedatamining.com/blog/2016/12/22/the-beauty-of-random-forest/>
3.  Pythagorean Trees for Random Forests:
    <https://orangedatamining.com/blog/2016/07/29/pythagorean-trees-and-forests/>
4.  *data.tree* sample applications, Christoph Glur, 2020-07-31.
    <https://cran.r-project.org/web/packages/data.tree/vignettes/applications.html>
5.  <https://ryjohnson09.netlify.app/post/caret-and-tidymodels/>
