---
title: <iconify-icon icon="icon-park-twotone:data-user" width="1.2em" height="1.2em"></iconify-icon> Data
subtitle: "Where does Data come from, and Why do we visualize it"
date: 2021-11-01
date-modified: "`r Sys.Date()`"
order: 05
fig-cap-location: bottom
image: preview.png
image-alt: By Rudityas on Glazestock.com
categories: 
  - Scientific Inquiry
  - Experiments
  - Observations
  - Nature of Data
  - Experience
  - Measurement
bibliography: 
  - grateful-refs.bib
citation: true
editor: 
  markdown: 
    wrap: 72
webr:
  packages: ['readr', 'dplyr','mosaic', 'skimr', 'ggformula', 'palmerpenguins', 'Lock5withR']
---

## {{< iconify mdi web-check >}} Using web-R

This tutorial uses `web-r` that allows you to run all code within your
browser, on all devices. Most code chunks herein are formatted in a
tabbed structure ( like in an old-fashioned library) with duplicated
code. The tabs in front have regular R code that will work when
copy-pasted in your RStudio session. The tab "behind" has the `web-R`
code that can work directly in your browser, and can be modified as
well. The R code is also there to make sure you have original code to go
back to, when you have made several modifications to the code on the
`web-r` tabs and need to compare your code with the original!

#### Keyboard Shortcuts

-   Run selected code using either:
    -   macOS: <kbd>⌘</kbd> + <kbd>↩/Return</kbd>
    -   Windows/Linux: <kbd>Ctrl</kbd> + <kbd>↩/Enter</kbd>
-   Run the entire code by clicking the "Run code" button or pressing <kbd>Shift</kbd>+<kbd>↩</kbd>.

::: callout-important
## Click on any Picture to Zoom

All embedded **figures** are displayed full-screen when clicked.
:::

::: pa4
::: {.athelas .ml0 .mt0 .pl4 .black-90 .bl .bw2 .b--blue}
["Difficulties strengthen the mind, as labor does the body."]{.f5 .f4-m
.f3-l .lh-copy .measure .mt0}

[--- Seneca]{.f6 .ttu .tracked .fs-normal}
:::
:::

## {{< iconify noto-v1 package >}} Setting up R Packages

```{r}
#| label: setup
#| message: false
#| warning: false

library(tidyverse) # Data processing with tidy principles
library(mosaic) # Our go-to package for almost everything
library(ggformula) # Our plotting package
# devtools::install_github("rpruim/Lock5withR")
library(Lock5withR)
library(Lock5Data) # Some neat little datasets from a lovely textbook
library(kableExtra)

```

```{r}
#| label: Extra Pedagogical Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(TeachHist)
library(TeachingDemos)
library(grateful)
library(plotly)
#devtools::install_github("mccarthy-m-g/embedr")
library(embedr) # Embed multimedia in HTML files
```


```{r}
#| label: themes-and-colours
#| eval: false
#| echo: false
library(ggthemr)
library(ggsci)
library(paletteer)
# Chunk options
knitr::opts_chunk$set(
 fig.width = 7,
 fig.asp = 0.618, # Golden Ratio
 #out.width = "80%",
 fig.align = "center"
)
##
## https://stackoverflow.com/questions/36476751/associate-a-color-palette-with-ggplot2-theme
## 
my_colours <- c("#fd7f6f", "#7eb0d5", "#b2e061", "#bd7ebe", "#ffb55a", "#ffee65", "#beb9db", "#fdcce5", "#8bd3c7")
my_pastels <- c("#66C5CC","#F6CF71","#F89C74","#DCB0F2","#87C55F","#9EB9F3","#FE88B1","#C9DB74","#8BE0A4","#B497E7","#D3B484","#B3B3B3")
my_greys <- c("#000000", "#333333", "#666666","#999999", "#cccccc")
my_vivids <- c("#E58606","#5D69B1","#52BCA3","#99C945","#CC61B0","#24796C","#DAA51B","#2F8AC4","#764E9F","#ED645A","#CC3A8E","#A5AA99")

my_bolds <- c("#7F3C8D","#11A579","#3969AC","#F2B701","#E73F74","#80BA5A","#E68310","#008695","#CF1C90","#f97b72","#4b4b8f","#A5AA99")

font <- "Roboto Condensed"
mytheme <- theme_classic(base_size = 14) + ### %+replace%    #replace elements we want to change
  
  theme(
    text = element_text(family = font),
    panel.grid.minor = element_blank(),
    #text elements
    plot.title = element_text(family = font,
      face = 'bold',
      hjust = 0, #left align
      #vjust = 2 #raise slightly
      margin = margin(0, 0, 10, 0)
    ),
    
    plot.subtitle = element_text(
      family = font,
      hjust = 0,
      margin = margin(2, 0, 5, 0)
    ),
    
    plot.caption = element_text(
      family = font,
      size = 8,
      hjust = 1
    ),
    #right align
    
    axis.title = element_text(#axis titles
      family = font, #font family
      size = 10), #font size
    axis.text = element_text(#axis text
        family = font, #axis family
        size = 8) #font size
    )
theme_custom <- list(
  mytheme,
  scale_colour_manual(values = my_bolds, aesthetics = c("colour", "fill"))
)
  
```

#### Plot Themes
```{r}
#| label: Plot Sizing and theming
#| code-fold: true
#| message: false
#| results: hide

# https://stackoverflow.com/questions/74491138/ggplot-custom-fonts-not-working-in-quarto

# Chunk options
knitr::opts_chunk$set(
 fig.width = 7,
 fig.asp = 0.618, # Golden Ratio
 #out.width = "80%",
 fig.align = "center"
)
### Ggplot Theme
### https://rpubs.com/mclaire19/ggplot2-custom-themes

theme_custom <- function(){ 
    font <- "Roboto Condensed"   #assign font family up front
    
    theme_classic(base_size = 14) %+replace%    #replace elements we want to change
    
    theme(
      panel.grid.minor = element_blank(),    #strip minor gridlines
      text = element_text(family = font),
      #text elements
      plot.title = element_text(             #title
                   family = font,            #set font family
                   size = 20,               #set font size
                   face = 'bold',            #bold typeface
                   hjust = 0,                #left align
                   #vjust = 2                #raise slightly
                   margin=margin(0,0,10,0)
),               
      
      plot.subtitle = element_text(          #subtitle
                   family = font,            #font family
                   size = 14,                #font size
                   hjust = 0,
                   margin=margin(2,0,5,0)
),               
      
      plot.caption = element_text(           #caption
                   family = font,            #font family
                   size = 8,                 #font size
                   hjust = 1),               #right align
      
      axis.title = element_text(             #axis titles
                   family = font,            #font family
                   size = 10                 #font size
),
      
      axis.text = element_text(              #axis text
                   family = font,            #axis family
                   size = 8)               #font size
    )
}

# Set graph theme
theme_set(new = theme_custom())
#
```


::: {#fig-kandinsky layout-ncol="2"}
![Composition
VIII](https://uploads4.wikiart.org/00280/images/wassily-kandinsky/37-262-ph-web-1-1.jpg!Portrait.jpg){#fig-kandinsky-composition8}

![Blue](https://uploads7.wikiart.org/images/wassily-kandinsky/blue-1922.jpg!PinterestLarge.jpg){#fig-kandinsky-blue}

Kandinsky: Abstract Paintings, or Data Visualizations?
:::

## {{< fa envelope title="An envelope" >}} Where does Data come from? {#sec-where-data}

We will need to form a basic understanding of basic scientific
enterprise. Let us look at the slides. (Also embedded below!)

{{< revealjs file = "https://r-for-artists.netlify.app/slides/10-nature-of-data/10-nature-of-data" >}}

```{r}
#| echo: false
#| eval: false
#| out-width: 780px
#| out-height: 640px
#| fig-align: center

knitr::include_url("https://r-for-artists.netlify.app/slides/10-nature-of-data/10-nature-of-data")

```

## {{< fa chart-simple >}} Why Visualize?

-   We can digest information more easily when it is pictorial
-   Our [Working
    Memories](https://www.understood.org/en/articles/working-memory-what-it-is-and-how-it-works)
    are both *short-term* and *limited* in capacity. So a picture
    abstracts the details and presents us with [an overall
    summary]{style="background-color: yellow;"}, an insight, or a story
    that is both easy to recall and easy on retention.
-   Data Viz includes [*shapes* that carry strong cultural
    memories]{style="background-color: yellow;"}; and impressions for
    us. These cultural memories help us to use data viz in a *universal
    way* to appeal to a wide variety of audiences. [(Do humans have a
    gene for
    geometry?]{style="background-color: yellow;"}[^1][)]{style="background-color: yellow;"};
-   It helps sift facts and mere statements: for example:

[^1]: <https://www.xcode.in/genes-and-personality/how-genes-influence-your-math-ability/>

![Rape
Capital](../../../../../materials/images/rape-capital.png){#fig-rape-capital}

![Data Reveals
Crime](../../../../../materials/images/data-reveals-crime.png){#fig-data_reveals-crime}

- Visuals are a good starting point [to make **hypotheses**]{.black .bg-yellow} of what may be happening in the situation represented by the data

## {{< iconify bx analyse >}} Why Analyze?

- Merely looking at visualizations may not necessarily tell us the true magnitude or *significance* of things. 
- We need analytic methods or statistics to assure ourselves, or otherwise, of what we might suspect is happening
- These methods also help to remove human bias and ensure that we are speaking with the assurance that our problem deserves. 
- Analysis uses numbers, or metrics, that allow us to crystallize our ambiguous words/guesses into quantities that can be calculated with. 
- These metrics are calculable from our data, of course, but are not directly visible, despite often being intuitive

So both visuals and analytics. 


## {{< iconify mdi category-plus >}} What are Data Types?

::: {layout="[[40,-5, 40]]"}
{{< youtube dwFsRZv4oHA >}}

{{< youtube hZxnzfnt5v8 >}}
:::

```{r}
#| echo: false
knitr::include_graphics("../../../../../materials/images/fig-variables-1.png")

```

```{r}
#| echo: false
#| out-width: "680px"
#| out-height: "400px"
#| fig-align: "center"
knitr::include_graphics("./images/tidydata.jpg")

```

::: callout-important
## Tidy Data

Each **variable** is a column; a column contains *one kind* of data.
Each **observation** or **case** is a row.
:::

## {{< fa glasses >}} How do we Spot Data Variable Types? {#sec-data-types}

[By asking questions!]{style="background-color: yellow;"} Shown below is
a table of different kinds of questions you could use to query a
dataset. The variable or variables that "answer" the question would be
in the category indicated by the question.

::: column-page
```{r}
#| message: false
#| echo: false
#| warning: false
pronouns <- read_csv("pronouns.csv")
pronouns %>% kbl() %>%
  kable_paper("hover", full_width = T)
```
:::

As you go from [Qualitative to Quantitative data
types](https://openintro-ims.netlify.app/data-hello.html#variable-types)
in the table, I hope you can detect a movement from fuzzy
groups/categories to more and more crystallized numbers.

![Type of
Variables](/content/materials/images/Ratio-Interval-Ordinal-Nominal.PNG){fig-align="center"}

Each variable/scale can be subjected to the operations of the previous
group. In the words of [S.S.
Stevens](https://stats.idre.ucla.edu/other/mult-pkg/whatstat/what-is-the-difference-between-categorical-ordinal-and-interval-variables/)

> the basic operations needed to create each type of scale is
> cumulative: to an operation listed opposite a particular scale must be
> added all those operations preceding it.

## Some Examples of Data Variables

### Example 1: `AllCountries`

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}
#### Base R

```{r}
#| echo: true

head(AllCountries,5) %>% arrange(desc(Internet))
```

#### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
head(AllCountries,5) %>% arrange(desc(Internet))
```
:::

::: callout-note
#### Questions

Q1. How many people in Andorra have internet access?\
A1. This leads to the `Internet` variable, which is a Quantitative
variable, a proportion.[^2] The answer is $70.5\%$.
:::

[^2]: How might this data have been obtained? By asking people in a
    survey and getting **Yes/No** answers!

### Example 2:`StudentSurveys`

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}
#### Base R

```{r}
#| echo: true

head(StudentSurvey,5)

```

#### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
#| echo: false
#| column: body-outset-right
head(StudentSurvey,5)

```
:::

::: callout-note
## Questions

Q.1. *What kind* of students are these?\
A.1. The *variables* `Gender`, and `Year` both answer to this Question.
And they are both Qualitative/Categorical variables, of course.\
Q.2. *What is* their status in their respective families?\
A.2. Hmm...they are either first-born, or second-born, or third...etc.
While this is **recorded** as a number, it is **still a Qualitative**
variable[^3]! Think! Can you do math operations with `BirthOrder`? Like
`mean` or `median`?\
Q.3.**How big** are the families?\
A.3. Clearly, the variable that answers is `Siblings` and since the
question is synonymous with "how many", this is a Quantitative
variable.\
:::

[^3]: Qualitative variables are called *Factor variables* in R, and are
    stored, internally, as numeric variables together with their levels.
    The actual values of the numeric variable are 1, 2, and so on.

## {{< iconify material-symbols auto-graph >}} What is a Data Visualization?

### {{< iconify carbon chart-network >}} Data Viz = Data + Geometry

#### {{< iconify fa6-solid shapes >}} Shapes

[Data Visualization is the act of "mapping" a **geometric
aspect/aesthetic** to a **variable** in
data.]{style="background: yellow;"} The aesthetic then varies in
accordance with the data variable, creating (part of) a chart.

What might be the geometric aesthetics available to us? An
[aesthetic]{style="background: yellow;"} is a geometric property, such
as `x-coordinate`, `y-coordinate`,
`length/breadth/height`,`radius`,`shape`,`size`, `linewidth`,
`linetype`, and even `colour`...

![Common Geometric Aesthetics in
Charts](/content/materials/images/common-aesthetics-1.png){fig-align="center"}

#### {{< iconify material-symbols function >}} Mapping

What does this "mapping" mean? [**That the geometric aesthetics are used
to *represent* qualitative or quantitative variables from your data, by
varying in accordance to the data
variable**]{style="background: yellow;"}.

For instance, `length` or `height` of a `bar` can be made proportional
to the`age` or `income` of a person. `Colour` of points can be mapped to
`gender`, with a unique `colour` for each `gender`. `Position` along an
axis x can vary in accordance with a `height` variable and position
along the y axis can vary with a `bodyWeight` variable.

```{r}
#| echo: false
#| message: false
#| fig-cap: "Data Vis using R"

# Set graph theme
theme_set(new = theme_custom())
#

diamonds %>% 
  slice_sample(n = 150, weight_by = cut) %>% 
  gf_point(price ~ carat, colour = ~ cut, 
           shape = ~ cut, 
           size = 2, data = .) %>% 
  gf_labs(title = "Plot Title", 
          subtitle = "Plot Subtitle",
          caption = "Plot Caption",
          x = "x-Axis Title",
          y = "y-Axis Title") %>%
  
  # Use same name for scales to merge legends
  gf_refine(scale_color_brewer(name = "Legend",
                               palette = "Set1"),
            scale_shape_manual(name = "Legend",
                               values = c(15:21)),
            
            annotate('text', x = 1.0,y = 17000, 
                     label = 'These Points are Super Important!!',
                     fontface = 'bold', 
                     size = 3.5),
            annotate('curve',x = 0.75, 
    y = 16000,
    yend = 8000,
    xend = 0.95,
    linewidth = 1,
    curvature = +0.5,
    arrow = arrow(length = unit(0.5, 'cm'))
  ),
  annotate(
    'rect',
    xmin = 1,
    xmax = 1.24,
    ymin = 8000,
    ymax = 2250,
    alpha = 0.5, 
    fill = 'grey40',
    col = 'black'
  )) %>% 
  gf_theme(theme_custom) 


```


A chart may use more than one aesthetic: `position`, `shape`, `colour`,
`height` and `angle`,`pattern` or `texture` to name several. Usually,
each aesthetic is mapped to **just one** variable to ensure there is no
cognitive error. There is of course a choice and you should be able to
**map** any kind of variable to any geometric aspect/aesthetic that may
be available.

::: callout-note
### A Natural Mapping

Note that here is also a "natural" mapping between aesthetic and
\[**kind of variable**\] @sec-data-types, Quantitative or Qualitative.
For instance, `shape` is rarely mapped to a Quantitative variable; we
understand this because the nature of variation between the Quantitative
variable and the `shape` aesthetic is not similar (i.e. not continuous).
Bad choices may lead to bad, or worse, misleading charts!
:::

In the above chart, it is pretty clear what kind of variable is plotted
on the `x-axis` and the `y-axis`. What about `colour`? Could this be
considered a `z-axis` in the chart? There are also other aspects that
you can choose (not explicitly shown here) such as the
`plot theme`(colours, fonts, backgrounds etc), which may **not be
mapped** to data, but are nonetheless choices to be made. We will get
acquainted with this aspect as we build charts.

Some essential concepts to master when working with charts in R are:

- geoms & aesthetics,
- scales,
- statistical transformations,
- coordinate transformations.
- the group aesthetic,
- position adjustments,
- facets,
- themes.

## {{< iconify flat-color-icons workflow >}} Basic Types of Charts {#sec-data-viz}

We can think of simple visualizations as [combinations of aesthetics,
mapped to combinations of variables]{style="background: yellow;"}. Some
examples:

| Variable #1 | Variable #2 | Chart Names                                                                                   | Chart Shape                                                                                                                                                                                                                                                                                                                                    |
|---------------|---------------|---------------|--------------------------|
| Quant       | None        | Histogram and Density                                                                         | {{< iconify mdi-light chart-histogram size=4x >}} {{< iconify mdi chart-bell-curve size=4x >}} {{< iconify carbon box-plot size=4x >}}                                                                                                                                                                                                         |
| Qual        | None        | Bar Chart                                                                                     | {{< iconify ion bar-chart size=4x >}}                                                                                                                                                                                                                                                                                                          |
| Quant       | Quant       | Scatter Plot, Line Chart, Bubble Plot, Area Chart                                             | {{< iconify ph chart-scatter-bold size=4x >}} {{< iconify healthicons chart-line size=4x >}} {{< iconify carbon chart-bubble size=4x >}} {{< iconify ic twotone-area-chart size=4x >}}                                                                                                                                                         |
| Quant       | Qual        | Pie Chart, Donut Chart, Column Chart, Box-Whisker Plot, Radar Chart, Bump Chart, Tree Diagram | {{< iconify teenyicons pie-chart-solid size=4x >}} {{< iconify teenyicons donut-chart-outline size=4x >}} {{< iconify fa6-solid chart-column size=4x >}} {{< iconify fluent data-whisker-20-regular size=4x >}} {{< iconify solar dumbbell-bold size=4x >}} {{< iconify carbon chart-radar size=4x >}} {{< iconify mdi family-tree size=4x >}} |
| Qual        | Qual        | Stacked Bar Chart, Mosaic Chart, Sankey, Chord Diagram, Network Diagram                       | {{< iconify iwwa chart-style4 size=4x >}} {{< iconify carbon chart-marimekko size=4x >}} {{< iconify carbon sankey-diagram-alt size=4x >}} {{< iconify carbon network-4 size=4x >}}                                                                                                                                                            |
|             |             |                                                                                               |                                                                                                                                                                                                                                                                                                                                                |

: Geometries , Combinations, and Graphs

## {{< iconify fluent-mdl2 decision-solid >}} Conclusion

Let us take a look at Wickham and Grolemund's Data Science workflow picture:

![Data Science Workflow](../../../../../materials/images/workflow.svg){#fig-datascience-workflow height="240px"}

So there we have it:

-   We import and clean the data
-   Questions lead us to identify Types of Variables (Quant and Qual)\
-   Sometimes we may need to transform the data (long to wide, summarize, create new variables...)
-   Further Questions lead to *relationships* between variables, which we describe using Data Visualizations\
-   Visualizations may lead to Hypotheses, which we Analyze or Model
-   Data Visualizations are Data mapped onto Geometry 
-   Multiple Variable-to-Geometry Mappings = A Complete Data
    Visualization\
-   Which is finally Communicated


You might think of all these Questions, Answers, Mapping as being
[equivalent to **metaphors** as a language in itself]{.black .bg-yellow}. And indeed, in R we use a philosophy called the **Grammar of Graphics**! We will use this grammar in the R graphics packages that we will encounter. Other parts of the Workflow (Transformation, Analysis and Modelling) are also following similar grammars, as we shall see. 

## {{< iconify eos-icons ai >}} AI Generated Summary and Podcast

This is a tutorial on data visualization using the R programming language. It introduces concepts such as data types, variables, and visualization techniques. The tutorial utilizes metaphors to explain these concepts, emphasizing the use of geometric aesthetics to represent data. It also highlights the importance of both visual and analytic approaches in understanding data. The tutorial then demonstrates basic chart types, including histograms, scatterplots, and bar charts, and discusses the "Grammar of Graphics" philosophy that guides data visualization in R. The text concludes with a workflow diagram for data science, emphasizing the iterative process of data import, cleaning, transformation, visualization, hypothesis generation, analysis, and communication.

<center>
```{r}
#| echo: false
embedr::embed_audio("../../../../../materials/audio/NatureOfData.wav")
``` 
</center>



## {{< iconify ooui references-ltr >}} References

1.  Randomized Trials:<br>

{{< youtube eGRd8jBdNYg >}} 
<br>

1.  Martyn Shuttleworth, Lyndsay T Wilson (Jun 26, 2009). *What is the Scientific Method?* Retrieved Mar 12, 2024 from Explorable.com: <https://explorable.com/what-is-the-scientific-method>
1.  Adam E.M. Eltorai, Jeffrey A. Bakal, Paige C. Newell, Adena J. Osband (editors). (March 22, 2023) *Translational Surgery: Handbook for Designing and Conducting Clinical and Translational Research*. A very lucid and easily explained set of chapters. ( I have a copy. Yes.)
      - Part III. Clinical: fundamentals
      - Part IV: Statistical principles
1.  <u><https://safetyculture.com/topics/design-of-experiments/></u>
1. Emi Tanaka. <https://emitanaka.org/teaching/monash-wcd/2020/week09-DoE.html>
1.  [Open Intro Stats: Types of
    Variables](https://openintro-ims.netlify.app/data-hello.html#variable-types)
1.  Lock, Lock, Lock, Lock, and Lock. *Statistics: Unlocking the Power
    of Data*, Third Edition, Wiley, 2021.
    <https://www.wiley.com/en-br/Statistics:+Unlocking+the+Power+of+Data,+3rd+Edition-p-9781119674160)>
1.  Claus Wilke. *Fundamentals of Data Visualization*.
    <https://clauswilke.com/dataviz/>
1.  Tim C. Hesterberg (2015). *What Teachers Should Know About the Bootstrap: Resampling in the Undergraduate Statistics Curriculum*, The American Statistician, 69:4, 371-386,
    <u><DOI:10.1080/00031305.2015.1089789></u>. <u>[PDF
    here](hesterberg2015.pdf)</u>
1. Albert Rapp. *Adding images to ggplot*. <https://albert-rapp.de/posts/ggplot2-tips/27_images/27_images>

::: {#refs style="font-size: 60%;"}
###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
#scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("ggformula", "mosaic", "Lock5Data",
           "TeachingDemos")
) %>%
  knitr::kable(format = "simple")

```
:::
