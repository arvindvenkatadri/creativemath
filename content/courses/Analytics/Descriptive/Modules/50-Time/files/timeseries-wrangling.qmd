---
title: "\U0001F554 Time Series Wrangling"
author: "Arvind V."
date: 15/Dec/2022
date-modified: "`r Sys.Date()`"
abstract: Grouping, Filtering, and Summarizing Time Series Data
categories:
  - Time Series
  - Filtering
  - Summarizing
image: feature.jpg
bibliography: 
  - grateful-refs.bib
citation: true
#suppress-bibliography: true
webr:
  packages: ['readr', 'tidyr', 'dplyr','lubridate', 'ggformula','mosaic', 'skimr', 'timetk', 'tsibble', 'tsibbledata','TSstudio','scales']
editor: 
  markdown: 
    wrap: 72
---

## {{< iconify mdi web-check >}} Using web-R
This tutorial uses `web-r` that allows you to run all code within your browser, on all devices. Most code chunks herein are formatted in a tabbed structure (like in an old-fashioned library), with duplicated code. The tabs in front have regular R code that will work when copy-pasted in your RStudio session. The tab "behind" has the `web-R` code that can work directly in your browser, and can be modified as well. ~~The R code is also there to make sure you have original code to go back to, when you have made several modifications to the code on the `web-r` tabs and need to compare your code with the original!~~ If you have messed up the code there, then you can hit the "recycle" button on the `web-r` tab to go back to the original!

#### Keyboard Shortcuts

- Run selected code using either:
  - macOS: <kbd>⌘</kbd> + <kbd>↩/Return</kbd>
  - Windows/Linux: <kbd>Ctrl</kbd> + <kbd>↩/Enter</kbd>
- Run the entire code by clicking the "Run code" button or pressing <kbd>Shift</kbd>+<kbd>↩</kbd>. 

## {{< iconify noto-v1 package >}} Setting up R Packages

```{r}
#| label: setup
#| message: false
library(mosaic)
library(tidyverse)
library(ggformula) # Our Formula based graphing package
library(scales) # Some nice time-oriented scales in graphs!
library(tsibble)
library(timetk)

# Datasets
library(tsibbledata)

```

```{r}
#| label: Plot Sizing and theming
#| echo: false
#| message: false
#| results: hide

# Chunk options
knitr::opts_chunk$set(
 #fig.width = 7,
 #fig.asp = 0.618, # Golden Ratio
 #out.width = "80%",
 fig.align = "center"
)
### Ggplot Theme
library(ragg)
library(showtext)
library(thematic)
#extrafont::loadfonts(quiet = TRUE)

ggplot2::theme_set(ggplot2::theme_classic(base_size = 14)) + 
ggplot2::theme_update(
  panel.grid.minor = element_blank(),
  panel.background = element_blank(),
  plot.title = element_text(face = "bold"),
  plot.title.position = "plot",
)

thematic_on(font = "Roboto Condensed",inherit = TRUE,
             bg = "#FFFFFF",fg = "#111111",
             accent = "#DD1144")

```


```{r}
#| label: Extra Pedagogical Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(grateful)

```

## {{< iconify openmoji japanese-symbol-for-beginner >}} Introduction

We have now arrived at the need to start from raw, multiple time series
data and `filter`, `group`, and `summarize` these time series grasp
their meaning, a process known as "wrangling".

::: callout-note
### Wrangling with `dplyr`

The tutorial for wrangling using `dplyr` is
[here](../../../../../../labs/r-labs/tidy/dplyr.qmd).
:::

Here, we will first use the `births` data we encountered earlier which
had a *single time series*, and then proceed to a more complex example
which has multiple time-series.

## {{< iconify eos-icons data-mining >}} Time-Series Wrangling

We can do this in two ways, and with two packages:

::: callout-note
### Two Wrangling "Dimensions"

For all the above operations, we can either use `time` variable as the
basis, by filtering for specific periods, or computing summaries over
larger intervals of time e.g. month, quarter, year;

AND/OR

We can do the same over `space` variables, i.e. the Qualitative
variables that define individual time series, and based on which we can
filter and and analyze these specific time series. Each unique setting of these Qualitative variables could potentially define a time series! There are 336 groups/combinations of them in `PBS`, but not all are unique times eries, since some of the Qual variables are `nested` inside others, e.g `ATC1_desc` provides more info on each value of `ATC1` and is not truly a separate Qual variable.
:::

And the packages are:

::: callout-tip
### `tsibble` has `dplyr`-like functions

Using `tsibble` data, the `tsibble` package has specialized **filter**
and **group_by** functions to do with the `index` (i.e time) variable
and the `key` variables, such as `index_by()` and `group_by_key()`.

(Filtering based on Qual variables can be done with `dplyr`. We can use
`dplyr` functions such as `group_by`, `mutate()`, `filter()`, `select()`
and `summarise()` to work with `tsibble` objects.)
:::

::: callout-tip
### `timetk` **also** has `dplyr`-like functions!

Using tibbles, `timetk` provides functions such as `summarize_by_time`,
`filter_by_time` and `slidify` that are quite powerful. Again, as with
`tsibble`, `dplyr` can always be used for other Qual variables (i.e
non-time).
:::

## {{< iconify pajamas issue-type-test-case >}} Case Study #1: Births Dataset

As a second example let us read and inspect in the now familiar
`US births data` from 2000 to 2014. Download this data by clicking on
the icon below, and saving the downloaded file in a sub-folder called
`data` inside your project.

{{< downloadthis ../data/US_births_2000-2014_SSA.csv dname="US_births_2000-2014_SSA" label="Download the US Births data" icon="database-fill-down" type="info" >}}


```{webr-r}
#| context: setup
## https://github.com/fivethirtyeight/data/blob/master/births/US_births_2000-2014_SSA.csv

births_2000_2014 <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/births/US_births_2000-2014_SSA.csv")

```


::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R

```{r}
#| label: timeseries and tsibble-1
#| layout: [[60], [40]]
#| message: false

births_2000_2014 <- read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/births/US_births_2000-2014_SSA.csv")
#births_2000_2014

births_timeseries <- 
  births_2000_2014 %>% 
  mutate(date = lubridate::make_date(year = year,
                                     month = month,
                                     day = date_of_month)) %>%
  select(date, births)

births_timeseries
class(births_timeseries)

# Convert to tsibble
# combine the year/month/date_of_month columns into a date
# drop them thereafter
births_tsibble <- 
  births_2000_2014 %>%
  mutate(index = lubridate::make_date(year = year, 
                                      month = month,
                                      day = date_of_month)) %>%
  tsibble::as_tsibble(index = index) %>%
  select(index, births)

births_tsibble
class(births_tsibble)

```


### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: timeseries and tsibble with webr
#| layout-ncol: 2
#| message: false

births_timeseries <- 
  births_2000_2014 %>% 
  mutate(date = lubridate::make_date(year = year,
                                     month = month,
                                     day = date_of_month)) %>%
  select(date, births)
births_timeseries %>% head(6)
##
class(births_timeseries)

```

```{webr-r}
# Convert to tsibble
# combine the year/month/date_of_month columns into a date
# drop them thereafter
births_tsibble <- 
  births_2000_2014 %>%
  mutate(index = lubridate::make_date(year = year,month = month,
                                     day = date_of_month)) %>%
  tsibble::as_tsibble(index = index) %>%
  select(index, births)

births_tsibble
class(births_tsibble)

```


:::


Both data frames look identical, except for data class difference. This
is DAILY data of course. 

Let us say we want to *group by month and plot mean monthly births* as before, but now using `tsibble` and `timetk`:


::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R
Let us try a basic plot with both `tsibble` vs `timetk` packages.

```{r}
#| label: tsibble-with-time-variable-processing
#| layout-ncol: 2
#| results: hold
#| 
#column: body-outset-right

births_tsibble %>%
  gf_line(births ~ index, 
          data = ., 
          title = "Basic tsibble plotted with ggformula") 

# timetk **can** plot tsibbles. 
births_tsibble %>% 
  timetk::plot_time_series(.date_var = index, 
                           .value = births, .interactive = FALSE,
                           .title = "Tsibble Plotted with timetk")

```

### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: basic-plot-webr
#| 
births_tsibble %>%
  gf_line(births ~ index, 
          data = ., 
          title = "Basic tsibble plotted with ggformula")

# timetk **can** plot tsibbles. 
births_tsibble %>% 
  timetk::plot_time_series(.date_var = index, 
                           .value = births, .interactive = FALSE,
                           .title = "Tsibble Plotted with timetk")


```

:::



We can also group by month and get monthly aggregates to get another summary:

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R

Here we take Monthly Aggregates with both `tsibble` vs `timetk`:

```{r}
#| label: Per month Aggregation
#| layout-ncol: 2
#| results: hold
# column: body-outset-right

births_tsibble %>% 
  tsibble::index_by(month_index = ~ tsibble::yearmonth(.)) %>% 
  dplyr::summarise(mean_births = mean(births, na.rm = TRUE)) %>% 
  gf_point(mean_births ~ month_index, 
           data = ., 
           title = "Monthly Aggregate with tsibble + ggformula") %>% 
  gf_line() %>% 
  gf_smooth(se = FALSE, method = "loess")  %>% 
  gf_labs(x = "Year", y = "Mean Monthly Births")


births_timeseries %>% 
  
  # cannot use tsibble here
  # tsibble format cannot be summarized/wrangled by timetk

  timetk::summarize_by_time(.date_var = date, 
                            .by = "month", 
                            month_mean = mean(births)) %>% 
  timetk::plot_time_series(date, month_mean,
                           .title = "Monthly aggregate births with timetk",
                           .interactive = FALSE,
                           .x_lab = "year", 
                           .y_lab = "Mean Monthly Births")

```


### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
#| label: Per month Aggregation with webr
#| layout-ncol: 2
#| results: hold
# column: body-outset-right

births_tsibble %>% 
  tsibble::index_by(month_index = ~ tsibble::yearmonth(.)) %>% 
  dplyr::summarise(mean_births = mean(births, na.rm = TRUE)) %>% 
  gf_point(mean_births ~ month_index, 
           data = ., 
           title = "Monthly Aggregate with tsibble + ggformula") %>% 
  gf_line() %>% 
  gf_smooth(se = FALSE, method = "loess") %>% 
  gf_labs(x = "Year", y = "Mean Monthly Births")


births_timeseries %>% 
  
  # cannot use tsibble here
  # tsibble format cannot be summarized/wrangled by timetk

  timetk::summarize_by_time(.date_var = date, 
                            .by = "month", 
                            month_mean = mean(births)) %>% 
  timetk::plot_time_series(date, month_mean,
                           .title = "Monthly aggregate births with timetk",
                           .interactive = FALSE,
                           .x_lab = "year", 
                           .y_lab = "Mean Monthly Births")
```

:::

Apart from the bump during in 2006-2007, there are also **seasonal
trends** that repeat each year, which we glimpsed earlier.


### tsibble vs timetk: Annual Aggregates
Let us try getting *annual aggregates*.

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}


### {{< iconify la r-project >}} R

```{r}
#| label: Per Year Aggregation
#| layout-ncol: 2
#| results: hold
# column: body-outset-right

births_tsibble %>% 
  tsibble::index_by(year_index = ~ lubridate::year(.)) %>% 
  ## tsibble does not have a "year" function? So using lubridate..
  ## Summarize
  dplyr::summarise(mean_births = mean(births, na.rm = TRUE)) %>%
  ##Plot
  gf_point(mean_births ~ year_index, data = .) %>% 
  gf_line() %>% 
  gf_smooth(se = FALSE, method = "loess")
####
births_timeseries %>%
  ## Summarize
  timetk::summarise_by_time(.date_var = date, 
                            .by = "year", 
                            mean = mean(births)) %>% 
  ## Plot
  timetk::plot_time_series(date, mean,
                           .title = "Yearly aggregate births with timetk",
                           .interactive = FALSE,
                           .x_lab = "year", 
                           .y_lab = "Mean Yearly Births")

```

### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
#| label: Per Year Aggregation with webr
#| layout-ncol: 2
#| results: hold
# column: body-outset-right

births_tsibble %>% 
  tsibble::index_by(year_index = ~ lubridate::year(.)) %>% 
  ## tsibble does not have a "year" function? So using lubridate..
  ## Summarize
  dplyr::summarise(mean_births = mean(births, na.rm = TRUE)) %>%
  ##Plot
  gf_point(mean_births ~ year_index, data = .) %>% 
  gf_line() %>% 
  gf_smooth(se = FALSE, method = "loess") 
####
births_timeseries %>%
  ## Summarize
  timetk::summarise_by_time(.date_var = date, 
                            .by = "year", 
                            mean = mean(births)) %>% 
  ## Plot
  timetk::plot_time_series(date, mean,
                           .title = "Yearly aggregate births with timetk",
                           .interactive = FALSE,
                           .x_lab = "year", 
                           .y_lab = "Mean Yearly Births")

```

:::






### {{< iconify game-icons detour >}} A small detour

Ah yes....errors. There is a curious interplay between `dplyr` and `tsibble`...they play together but not all the time, it would seem. 

The original births tibble dataset allows `dplyr:group_by + summarize`:

```{r}
#| label: Errors-1

# The original dataset allows dplyr:group_by + summarize
births_2000_2014 %>% 
  dplyr::group_by(year) %>% 
  summarise(mean_births = mean(births, na.rm = TRUE))

```

However, `tsibble`-converted data does not quite work with `dplyr::group_by+summarize`:

```{r}
#| label: Errors-2
#| eval: false
#| echo: fenced

# This code will not work
births_tsibble %>% 
# Grouping does not work. Here is the problem
  dplyr::group_by(index) %>% 

# Trying to get Annual Birth Average as before
# Should give 15 rows, one per year, but does not!
  summarise(mean_births = mean(births, na.rm = TRUE)) 

```

Even if we pull out the `year` information in `index`, it gives confusing results...

```{r}
#| label: Error-3
births_tsibble %>% 
# All right, try to pull the year info from `index` then
  mutate(dplyr_year = lubridate::year(index)) %>% 
# Grouping does not work
  dplyr::group_by(dplyr_year) %>% 

# Trying to get Annual Birth Average as before
# Should give 15 rows, one per year, but does not!
  summarise(mean_births = mean(births, na.rm = TRUE)) 

```

This grouping does not give a proper result (though it does show 15 groups.)

Using `tsibble::index_by()` and then `dplyr::summarize()` does the trick...so all right. The `index_by()` operation is different from that of `dplyr::group_by()`!

```{r}
#| label: Errors-4
#|  
# tsibble works with index_by + summarize
# 15 rows, one for each year
births_tsibble %>% 
  # tsibble can get year info from index
  tsibble::index_by(year_date = year(index)) %>% 
  dplyr::summarise(mean_births = mean(births, na.rm = TRUE)) 

```



## {{< iconify game-icons candles >}} Candle-Stick Plots

Hmm...can we try to plot **boxplots over time** (Candle-Stick Plots)?
Over month, quarter or year?



### {{< iconify iwwa month >}} Monthly Box Plots


::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R
```{r}
#| label: Monthly_boxplots
#| layout-ncol: 2
#| results: hold
births_tsibble %>%
  index_by(month_index = ~ yearmonth(.)) %>%
  # 15 years
  # No need to summarise, since we want boxplots per year / month
  # Plot the groups
  # 180 plots!!
  gf_boxplot(births ~ index, group =  ~ month_index,
             fill = ~ month_index,
             data = ., 
             title = "Boxplots of Births by Month",
             caption = "tsibble + ggformula") 

           
####
births_tsibble %>% # Can try births_timeseries too
  timetk::plot_time_series_boxplot(index, births, .period = "month",
                                   .plotly_slider = TRUE,
                                   .title = "Boxplots of Births by Month",
                                   .interactive = TRUE,
                                   .x_lab = "year", 
                                   .y_lab = "Mean Monthly Births"
                                   )

```

### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: Monthly_boxplots with webr
#| layout-ncol: 2
#| results: hold
births_tsibble %>%
  index_by(month_index = ~ yearmonth(.)) %>%
  # 15 years
  # No need to summarise, since we want boxplots per year / month
  # Plot the groups
  # 180 plots!!
  gf_boxplot(births ~ index, group =  ~ month_index,
             fill = ~ month_index,
             data = ., 
             title = "Boxplots of Births by Month",
             caption = "tsibble + ggformula")
           
###
births_tsibble %>% # Can try births_timeseries too
  timetk::plot_time_series_boxplot(index, births, .period = "month",
                                   .plotly_slider = TRUE,
                                   .title = "Boxplots of Births by Month",
                                   .interactive = TRUE,
                                   .x_lab = "year", 
                                   .y_lab = "Mean Monthly Births"
                                   )
```

:::


We see 180 boxplots...yes this is still too busy a plot for us to learn
much from.

## {{< iconify system-uicons pie-quarter >}} Quarterly boxplots

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R

```{r}
#| label: Quarterly_boxplots
births_tsibble %>%
  index_by(qrtr_index = ~ yearquarter(.)) %>% # 60 quarters over 15 years
  # No need to summarise, since we want boxplots per year / month
  gf_boxplot(births ~ index, 
             group = ~ qrtr_index,
             fill = ~ qrtr_index,
             data = .) # 60 plots!!
###
births_tsibble %>% # Can try births_timeseries too
  timetk::plot_time_series_boxplot(
                            index, births, .period = "quarter",
                           .title = "Quarterly births with timetk",
                           .interactive = TRUE,
                           .plotly_slider = TRUE,
                           .x_lab = "year",
                           .y_lab = "Mean Monthly Births")
```

### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: Quarterly_boxplots with webr
births_tsibble %>%
  index_by(qrtr_index = ~ yearquarter(.)) %>% # 60 quarters over 15 years
  # No need to summarise, since we want boxplots per year / month
  gf_boxplot(births ~ index, 
             group = ~ qrtr_index,
             fill = ~ qrtr_index,
             data = .) # 60 plots!!
###
births_tsibble %>% # Can try births_timeseries too
  timetk::plot_time_series_boxplot(
                            index, births, .period = "quarter",
                           .title = "Quarterly births with timetk",
                           .interactive = TRUE,
                           .plotly_slider = TRUE,
                           .x_lab = "year",
                           .y_lab = "Mean Monthly Births")
```

:::

We have 60 boxplots...over a period of 15 years, one box plot per
quarter...

### {{< iconify fluent-mdl2 calendar-year >}} Yearwise boxplots

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R

```{r}
#| label: Annual_boxplots
births_tsibble %>% 
  index_by(year_index = ~ lubridate::year(.)) %>% # 15 years, 15 groups
  # No need to summarise, since we want boxplots per year / month

  gf_boxplot(births ~ index, 
              group = ~ year_index, 
              fill = ~ year_index, 
             data = .) %>%  # plot the groups 15 plots
  gf_theme(scale_fill_distiller(palette = "Spectral")) 
####

births_tsibble %>% 
  timetk::plot_time_series_boxplot(
                            index, births, .period = "year",
                           .title = "Yearly aggregate births with timetk",
                           .interactive = TRUE,
                           .plotly_slider = TRUE,
                           .x_lab = "year",
                           .y_lab = "Births")
```


### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: Annual_boxplots with webr
births_tsibble %>% 
  index_by(year_index = ~ lubridate::year(.)) %>% # 15 years, 15 groups
    # No need to summarise, since we want boxplots per year / month

  gf_boxplot(births ~ index, 
              group = ~ year_index, 
              fill = ~ year_index, 
             data = .) %>%  # plot the groups 15 plots
  gf_theme(scale_fill_distiller(palette = "Spectral"))
###

births_tsibble %>% 
  timetk::plot_time_series_boxplot(
                            index, births, .period = "year",
                           .title = "Yearly aggregate births with timetk",
                           .interactive = TRUE,
                           .plotly_slider = TRUE,
                           .x_lab = "year",
                           .y_lab = "Births")
```
:::

This looks much better...We can more easily see that 2006-2009 the
births were somewhat higher, because the medians in these years are the
highest.

## {{< iconify pajamas issue-type-test-case >}} Case Study #2: PBS Dataset

We previously encountered the `PBS` dataset from the `tsibbledata`
package earlier, which is a dataset containing Monthly Medicare
prescription data in Australia. We will resume from there:

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R
```{r}
#| label: PBS

data("PBS", package = "tsibbledata")
PBS
glimpse(PBS)
# inspect(PBS) # does not work since mosaic cannot handle tsibbles
# skimr::skim(PBS) # does not work, need to investigate

```

### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: PBS webr

data("PBS", package = "tsibbledata")
PBS
glimpse(PBS)
# inspect(PBS) # does not work since mosaic cannot handle tsibbles
# skimr::skim(PBS) # does not work, need to investigate

```
:::


### {{< iconify fluent group-list-20-filled >}} Counts by Qual variables

Let us first see how many observations there are for each combo of
`keys:`

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R
```{r}
#| label: counts

## Types
PBS %>% 
  dplyr::count(Type) # 2 Types

## Concessions
PBS %>% count(Concession) # 2 Types

## ATC1
PBS %>% count(ATC1) # 15 ATC1 groups

## ATC2
PBS %>% count(ATC2) # 84 ATC2 groups


# dplyr grouping with ATC1 and ATC2
PBS %>% 
  dplyr::group_by(ATC1, ATC2) %>% 
  count() # Still 84; ATC2 is nested in ATC1

## All possible groups
PBS %>% 
  group_by(ATC1, ATC2, Concession, Type) %>% 
  count() # 336 overall groups

```


### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
#| label: counts webr

## Types
PBS %>% 
  dplyr::count(Type) # 2 Types

## Concessions
PBS %>% count(Concession) # 2 Types

## ATC1
PBS %>% count(ATC1) # 15 ATC1 groups

## ATC2
PBS %>% count(ATC2) # 84 ATC2 groups


# dplyr grouping with ATC1 and ATC2
PBS %>% 
  dplyr::group_by(ATC1, ATC2) %>% 
  count() # Still 84; ATC2 is nested in ATC1

## All possible groups
PBS %>% 
  group_by(ATC1, ATC2, Concession, Type) %>% 
  count() # 336 overall groups

```


:::


::: callout-note
### Business Insights from inspecting `PBS`

This is a large-ish dataset:

-   67K observations
-   Quant Variables: Two Quant variables (`Scripts` and `Cost`)
-   Time Variable:
    -   Data appears to be *monthly,* as indicated by the `1M`.
    -   the time index variable is called `Month`
    -   formatted as `yearmonth`, a new type of variable introduced in
        the `tsibble` package. `yearmonth` does **not** show in
        `glimpse` output!
-   Qual variables:
    -   `Concession`: `Concessional` and `General` (Concessional
        `scripts` are given to pensioners, unemployed, dependents, and
        other card holders)
    -   `Type`: `Co-payments` and `Safety Net`
    -   `ATC1`: Anatomical Therapeutic Chemical index (level 1).
        -   15 types
-   `ATC2`: Anatomical Therapeutic Chemical index (level 2).
    -   84 types, nested inside `ATC1`.
:::

[Run `PBS` in your console]{.aside}

We will start with the familiar basic messy plot and work our way
towards filtering, summaries, and averages.

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}
### {{< iconify la r-project >}} R

```{r}
#| label: Basic-PBS-plot-ggformula
#| layout-ncol: 2
PBS %>% 
  gf_point(Cost ~ Month, data = .) %>% 
  gf_line(title = "PBS Costs vs time", caption = "ggformula")

####
PBS %>% ggplot(aes(Month, Cost)) + 
  geom_point() + 
  geom_line() + 
  labs(title = "PBS Costs vs time")

```

### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}

PBS %>% 
  gf_point(Cost ~ Month, data = .) %>% 
  gf_line(title = "PBS Costs vs time", caption = "ggformula") 
```


```{webr-r}
PBS %>% ggplot(aes(Month, Cost)) + 
  geom_point() + 
  geom_line() + 
  labs(title = "PBS Costs vs time") 

```


:::

As noted earlier, this basic plot is quite messy. Other than an overall
rising trend and more vigorous variations pointing to a multiplicative
process, we cannot say more. There is simply too much happening here and
it is now time (sic!) for us to look at summaries of the data using
`dplyr`-like verbs. We will perform summaries with `tsibble` and plots
with `ggformula` first. Then we will use `timetk` to perform both
operations.

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}
### {{< iconify la r-project >}} R

```{r}
#| label: PBS-Costs-filtered-ggformula

# Costs variable for a specific combo of Qual variables(keys)
PBS %>% 
  dplyr::filter(Concession == "General", 
                ATC1 == "A") %>% 
  gf_line(Cost ~ Month, 
          colour = ~ Type, 
          data = .) %>% 
  gf_point(title = "Costs per Month for General A category patients") %>%
  gf_refine(scale_y_continuous(labels = scales::label_comma()))


```


### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: PBS-Costs-filtered-ggformula-webr

# Costs variable for a specific combo of Qual variables(keys)
PBS %>% 
  dplyr::filter(Concession == "General", 
                ATC1 == "A") %>% 
  gf_line(Cost ~ Month, 
          colour = ~ Type, 
          data = .) %>% 
  gf_point(title = "Costs per Month for General A category patients") %>%
  gf_refine(scale_y_continuous(labels = scales::label_comma()))

```

:::


::: callout-note
### Insights

As can be seen:

-   strongly seasonal for both `Type`s of graphs;
-   seasonal variation increasing over the years, a clear sign of a
    *multiplicative time series*, especially for `Safety net`.
-   Upward *trend* with both types of subsidies, `Safety net` and
    `Co-payments`.
-   `Co-payments` type have some kind of dip around the year 2000...
-   But this is still messy and overwhelming and we could certainly use
    some summaries/aggregates/averages.
:::

We can now use `tsibble`'s dplyr-like commands to develop summaries by year,
quarter, month(original data): Look carefully at the new time variable
created each time, and the size the data frame decrease with each
aggregation:

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R
```{r}
#| label: summary-month

# Cost Summary by Month, which is the original data
# New Variable Name to make grouping visible
PBS_month <-  PBS %>% 
  dplyr::filter(Concession == "General", 
                ATC1 == "A") %>% 
  tsibble::index_by(Month_Date = Month) %>% 
  dplyr::summarise(across(.cols = c(Cost, Scripts),
                          .fn = mean,
                          .names = "mean_{.col}"))

PBS_month

###
PBS_month %>% 
  mutate(Month_Date = as_date(Month_Date)) %>%
  gf_line(mean_Cost ~ Month_Date) %>%
  gf_line(mean_Scripts ~ Month_Date, 
          title = "Mean Costs and Scripts for General + A category",
          subtitle = "Means over General + A category ") %>%
  gf_refine(scale_y_continuous(labels = scales::label_comma()))

```

### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: summary-month-webr
#| layout-ncol: 2

# Cost Summary by Month, which is the original data
# New Variable Name to make grouping visible
PBS_month <-  PBS %>% 
  dplyr::filter(Concession == "General", 
                ATC1 == "A") %>% 
  tsibble::index_by(Month_Date = Month) %>% 
  dplyr::summarise(across(.cols = c(Cost, Scripts),
                          .fn = mean,
                          .names = "mean_{.col}"))
PBS_month
###
PBS_month %>% 
  mutate(Month_Date = as_date(Month_Date)) %>%
  gf_line(mean_Cost ~ Month_Date) %>%
  gf_line(mean_Scripts ~ Month_Date, 
          title = "Mean Costs and Scripts for General + A category",
          subtitle = "Means over General + A category ") %>%
  gf_refine(scale_y_continuous(labels = scales::label_comma()))

```

:::

::: callout-note
### Insights

As can be seen:
To Be Written Up !!!
:::


::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R
```{r}
#| label: PBS-quarterly
# Cost Summary by Quarter
PBS_quarter <- 
  PBS %>% 
  tsibble::index_by(Quarter_Date = yearquarter(Month)) %>% # And the change here!
  dplyr::summarise(across(.cols = c(Cost, Scripts),
                          .fn = mean,
                          .names = "mean_{.col}"))
PBS_quarter
###
PBS_quarter %>% 
  gf_line(mean_Cost ~ Quarter_Date) %>%
  gf_refine(scale_y_continuous(labels = scales::label_comma()))

```

### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: PBS-quarterly-webr
# Cost Summary by Quarter
PBS_quarter <- 
  PBS %>% 
  tsibble::index_by(Quarter_Date = yearquarter(Month)) %>% # And the change here!
  dplyr::summarise(across(.cols = c(Cost, Scripts),
                          .fn = mean,
                          .names = "mean_{.col}"))
PBS_quarter

```

```{webr-r}

PBS_quarter %>% 
  gf_line(mean_Cost ~ Quarter_Date) %>%
  gf_refine(scale_y_continuous(labels = scales::label_comma()))

```

:::

::: callout-note
### Insights

As can be seen:
TBD
:::

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R
```{r}
#| label: PBS-annual
# Cost Summary by Year
PBS_year <- PBS %>% 
  index_by(Year_Date = year(Month)) %>% # Note this change!!!
  dplyr::summarise(across(.cols = c(Cost, Scripts),
                          .fn = mean,
                          .names = "mean_{.col}"))

PBS_year
PBS_year %>% 
  gf_line(mean_Cost ~ Year_Date) %>%
  gf_refine(scale_y_continuous(labels = scales::label_comma()))

```


### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: PBS-annual-webr
# Cost Summary by Year
PBS_year <- PBS %>% 
  index_by(Year_Date = year(Month)) %>% # Note this change!!!
  dplyr::summarise(across(.cols = c(Cost, Scripts),
                          .fn = mean,
                          .names = "mean_{.col}"))

PBS_year
PBS_year %>% 
  gf_line(mean_Cost ~ Year_Date) %>%
  gf_refine(scale_y_continuous(labels = scales::label_comma()))

```

:::

::: callout-note
### Insights

As can be seen:
TBD
:::


### Using `timetk`

::: callout-note
### The `time` variable for `timetk`

`The PBS-derived`tsibbles have their "time-oriented" variables formatted
as`yearmonth,yearquarter` and `dbl`, as seen. We need to mutate these
into a proper date format for the `timetk` package to summarise them
successfully. (Plotting a tsibble with timetk is possible, as seen
earlier.)
:::

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R
```{r}
#| label: Summary over months with timetk
#| message: false
PBS %>% 
  mutate(Month_Date = lubridate::as_date(Month)) %>%
##
  timetk::summarise_by_time(.date_var = Month_Date,
                            .by = "month",
                            mean_Cost = mean(Cost)) %>%
##
  timetk::plot_time_series(.date_var = Month_Date, 
                           .value = mean_Cost,
                           .interactive = FALSE,
                           .x_lab = "Time", .y_lab = "Costs",
                           .title = "Mean Costs by Month") + 
  labs(caption = "Tsibble Plotted with timetk")

```


### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: Summary over months with timetk webr
#| message: false
PBS %>% 
  mutate(Month_Date = lubridate::as_date(Month)) %>%
##
  timetk::summarise_by_time(.date_var = Month_Date,
                            .by = "month",
                            mean_Cost = mean(Cost)) %>%
##
  timetk::plot_time_series(.date_var = Month_Date, 
                           .value = mean_Cost,
                           .interactive = FALSE,
                           .x_lab = "Time", .y_lab = "Costs",
                           .title = "Mean Costs by Month") + 
  labs(caption = "Tsibble Plotted with timetk")

```

:::


::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R
```{r}

PBS %>% 
  mutate(Month_Date = lubridate::as_date(Month)) %>%
  as_tibble() %>%
  ##
  timetk::summarise_by_time(.date_var = Month_Date,
                            .by = "quarter",
                            mean_Cost = mean(Cost)) %>%
  ##
  timetk::plot_time_series(.date_var = Month_Date, 
                           .value = mean_Cost,
                           .interactive = FALSE,
                           .x_lab = "Time", .y_lab = "Costs",
                           .title = "Mean Costs by Quarter") + 
  labs(caption = "Tsibble Plotted with timetk")

```

### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}

PBS %>% 
  mutate(Month_Date = lubridate::as_date(Month)) %>%
  as_tibble() %>%
  ##
  timetk::summarise_by_time(.date_var = Month_Date,
                            .by = "quarter",
                            mean_Cost = mean(Cost)) %>%
  ##
  timetk::plot_time_series(.date_var = Month_Date, 
                           .value = mean_Cost,
                           .interactive = FALSE,
                           .x_lab = "Time", .y_lab = "Costs",
                           .title = "Mean Costs by Quarter") + 
  labs(caption = "Tsibble Plotted with timetk")

```

:::


::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R

```{r}
PBS %>% 
  mutate(Month_Date = lubridate::as_date(Month)) %>%
  as_tibble() %>%
  ##
  timetk::summarise_by_time(.date_var = Month_Date,
                            .by = "year",
                            mean_Cost = mean(Cost)) %>%
  ##
  timetk::plot_time_series(.date_var = Month_Date, 
                           .value = mean_Cost,
                           .interactive = FALSE,
                           .x_lab = "Time", .y_lab = "Costs",
                           .title = "Mean Costs by Year") + 
  labs(caption = "Tsibble Plotted with timetk")

```


### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
PBS %>% 
  mutate(Month_Date = lubridate::as_date(Month)) %>%
  as_tibble() %>%
  ##
  timetk::summarise_by_time(.date_var = Month_Date,
                            .by = "year",
                            mean_Cost = mean(Cost)) %>%
  ##
  timetk::plot_time_series(.date_var = Month_Date, 
                           .value = mean_Cost,
                           .interactive = FALSE,
                           .x_lab = "Time", .y_lab = "Costs",
                           .title = "Mean Costs by Year") + 
  labs(caption = "Tsibble Plotted with timetk")

```

:::

## {{< iconify fluent-mdl2 decision-solid >}} Conclusion

We have learnt how to filter, summarize and compute various aggregate
metrics from them and to plot these. Both `tsibble` and `timetk` offer
similar capability here.

## {{< iconify icon-park me >}} Your Turn

1.  Choose some of the datasets in the `tsdl` and in the `tsibbledata`
    packages. Plot basic, filtered and summarized graphs for these and
    interpret.

## {{< iconify ooui references-rtl >}} References

1. Robert Hyndman, *Forecasting: Principles and Practice (Third Edition)*.
[available online](https://otexts.com/fpp3/)\
1. [Time Series Analysis at Our Coding
Club](https://ourcodingclub.github.io/tutorials/time/)\

::: {#refs style="font-size: 60%;"}
###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
# scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("gapminder","timetk", 
           "tsibble", "tsibbledata")
) %>%
  knitr::kable(format = "simple")

```
:::
