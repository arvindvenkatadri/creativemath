---
title: "Permutation Tests for Linear Regression"
author: "Arvind Venkatadri"
date: 03/May/2023
date-modified: "`r Sys.Date()`"
categories: 
  - Linear Regression
  - Quantitative Predictor
  - Quantitative Response
  - Sum of Squares
  - Residuals
  - Permutation
abstract: "Using a Permutation Test to check our Regression Model"
filters:
  - nutshell
---

```{r}
#| label: setup
#| message: true
#| warning: false
knitr::opts_chunk$set(echo = TRUE,warning = FALSE,message = FALSE)
library(tidyverse)
library(ggformula)
library(mosaic)
library(infer)

```


## Linear Regression using Permutation Tests

We wish to establish the significance of the effect size due to each of
the levels in `TempFac`. From the normality tests conducted earlier we
see that except at one level of `TempFac`, the times are are not
normally distributed. Hence we opt for a Permutation Test to check for
significance of effect.

As remarked in Ernst[^2], the non-parametric permutation test can be
both *exact* and also **intuitively easier** for students to grasp.
Permutations are easily executed in R, using packages such as
`mosaic`[^3].

We proceed with a Permutation Test for `TempFac`. We shuffle the levels
(13, 18, 25) randomly between the Times and repeat the ANOVA test each
time and calculate the F-statistic. The Null distribution is the
distribution of the F-statistic over the many permutations and the
p-value is given by the proportion of times the F-statistic equals or
exceeds that observed.

### Read the Data

```{r}
data("BostonHousing2", package = "mlbench")
housing <- BostonHousing2
inspect(housing)

```


We will use `mosaic` and also try with `infer`.

::: panel-tabset
#### Using `mosaic`

`mosaic` offers an easy and intuitive way of doing a repeated
permutation test, using the `do()` command. We will `shuffle` the
`TempFac` factor to jumble up the `Time` observations, 10000 times. Each
time we shuffle, we compute the F_statistic and record it. We then plot
the 10000 F-statistics and compare that with the real-world observation
of `F-stat`.

```{r}
#| label: permutation test for ANOVA with mosaic
#| include: false
#| eval: false

obs_F_stat <- frogs_anova %>% 
  broom::tidy() %>% 
  select(statistic)
observed_mosaic <- obs_F_stat$statistic[1]

null_dist_mosaic <- do(10000) * aov(Time ~ shuffle(TempFac), data = frogs_long)
null_dist_mosaic %>% head()

null_dist_mosaic %>% drop_na() %>% 
  select(F) %>% 
  gf_histogram(data = ., ~ F, 
               fill = ~ F >= observed_mosaic,
               title = "Null Distribution of ANOVA F-statistic" )


```

The Null distribution of the F_statistic under permutation shows it
never crosses the real-world observed value, testifying the strength of
the effect of `TempFac` on hatching `Time`. And the p-value is:

```{r}
#| include: false
#| eval: false
p_value <- mean(null_dist_mosaic$F >= observed_mosaic, na.rm = TRUE)
p_value

```

#### Using `infer`

We calculate the observed F-stat with `infer`, which also has a very
direct, if verbose, syntax for doing permutation tests:

```{r}
#| label: ANOVA F-statistic with infer
#| include: false
#| eval: false

observed_infer <- frogs_long %>% 
  specify(Time ~ TempFac) %>% 
  hypothesise(null = "independence") %>% 
  calculate(stat = "F")
observed_infer

```

We see that the observed F-Statistic is of course $385.8966$ as before.
Now we use `infer` to generate a NULL distribution using permutation of
the factor `TempFac`:

```{r}
#| label: Permutation using infer
#| include: false
#| eval: false

null_dist_infer <- frogs_long %>% 
  specify(Time ~ TempFac) %>% 
  hypothesise(null = "independence") %>% 
  generate(reps = 1000, type = "permute") %>% 
  calculate(stat = "F")

head(null_dist_infer)

null_dist_infer %>% 
  visualise()

```

As seen, the `infer` based permutation test also shows that the
permutationally generated F-statistics are nowhere near that which was
observed. The effect of `TempFac` is very strong.
:::
