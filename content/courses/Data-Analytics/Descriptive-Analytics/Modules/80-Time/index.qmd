---
title: "\U0001F554 Time Series"
author: Arvind Venkatadri
date: 15/Dec/2022
date-modified: "`r Sys.Date()`"
tags:
  - CandleStick Graphs
  - Heatmap Graphs (over time)
  - Line Graphs
  - Time Series
subtitle: Time Series
order: 80
theme: journal
df-print: tibble
summary: Trends, Seasons, and Changes over time
image: feature.jpg
---

```{r}
#| label: setup
#| message: false
#| warning: false

knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#library(magrittr)
library(lubridate)  # Deal with dates

library(mosaic)

library(tsibble) # Create and manipulate Time Series in R
library(tsibbledata) # Tsibble Time Series Datasets
library(fable) # Modelling Time Series in R
library(fabletools)
library(feasts) # Feature Extraction and Statistics for Time Series.
library(timetk)  # Convert data frames to time series-specific objects
library(forecast)  # Make forecasts and decompose time series

# devtools::install_github("FinYang/tsdl")
library(tsdl) # Time Series Data Library from Rob Hyndman


```

# Introduction

Any metric that is measured over regular time intervals forms a **time
series**. Analysis of Time Series is commercially important because of
industrial need and relevance, especially with respect to Forecasting
(Weather data, sports scores, population growth figures, stock prices,
demand, sales, supply...). For example, in the graph shown below are the
temperatures over time in two US cities:

<iframe width="100%" height="514" frameborder="0" src="https://observablehq.com/embed/f274bd3d517cf495?cells=LineChart">

</iframe>

What can we do with Time Series? A time series can be broken down to its
components so as to systematically understand, analyze, model and
forecast it. As with other datasets, we have to begin by answering
fundamental questions, such as:

1.  What are the types of time series?\
2.  How to decompose it? How to extract a level, a trend, and seasonal
    components from a time series?\
3.  What is auto correlation etc.\
4.  What is a stationary time series?\
5.  And, how do you plot time series?

We will look at the multiple data formats for time series in R.
Alongside we will look at the R packages that work with these formats
and create graphs and measures using those objects.

# Introduction to Time Series: Data Formats

There are multiple formats for time series data.

-   The **ts** format: The `stats::ts()` function will convert a
    **numeric vector** into an R time series `ts` object. The base `ts`
    object is used by established packages `forecast`.

-   **tibble** format: the simplest is of course the standard tibble/
    dataframe, with a `time` column/variable to indicate that the other
    variables vary with time. The standard tibble object is used by
    packages `timetk` & `modeltime`

-   The modern **tsibble** format: this is a new format for time series
    analysis. The special `tsibble` object ("time series tibble") is
    used by `fable`, `feasts` and others from the `tidyverts` set of
    packages.

# Creating and Plotting Time Series

In this first example, we will use simple `ts` data first, and then do
another with `tibble` format that we can plot *as is* and then do more
after conversion to `tsibble` format, and then a third example with a
ground-up `tsibble` dataset.

## `ts` format data

There are a few datasets in base R that are in `ts` format already.

```{r ts-data}

AirPassengers
str(AirPassengers)

```

This can be easily plotted using base R:

```{r}

plot(AirPassengers)

```

One can see that there is an upward *trend* and also *seasonal
variations* that also increase over time.

Let us take data that is "time oriented" but not in `ts` format. We use
the command `ts` to convert a numeric vector to `ts` format: the syntax
of `ts()` is:

Syntax: `objectName <- ts(data, start, end, frequency)`, where,

-   `data` : represents the data vector
-   `start` : represents the first observation in time series
-   `end` : represents the last observation in time series
-   `frequency` : represents number of observations per unit time. For
    example 1=annual, 4=quarterly, 12=monthly, etc.

We will pick simple numerical vector data variable from `trees`:

```{r trees-ts}

trees

# Choosing the `height` variable
trees_ts <- ts(trees$Height, 
               frequency = 1, # Annual; No reason to believe otherwise
               start = 1980)  # Arbitrarily picked "1980" !
plot(trees_ts)

```

( Note that this example is just for demonstration: tree heights do not
*decrease* over time!!)

## `tibble` data

Let us read and inspect in the `US births data` from 2000 to 2014.
Download this data by clicking on the icon below, and saving the
downloaded file in a sub-folder called `data` inside your project:

```{r echo=FALSE}
library(downloadthis)
download_file(
  path = "data/US_births_2000-2014_SSA.csv",
  output_extension = ".csv",
  output_name = "US_births_2000-2014_SSA",
  button_label = "Download US Births Data",
  button_type = "danger",
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)

```

Read this data in:

```{r}
#| label: using-tibble-data-1
#| message: false

births_2000_2014 <- read_csv("data/US_births_2000-2014_SSA.csv")

# # This data goes up to 2003, but the previous data starts at 2000, so we'll
# # remove 2000-2003 from here
# births_1994_1999 <- read_csv("data/US_births_1994-2003_CDC_NCHS.csv") %>% 
#   filter(year < 2000)

births_2000_2014

```

So there are several numerical variables for `year`, `month`, and
`day_of_month`, `day_of_week`, and of course the `births` on a **daily
basis**. We will create a single `date` column with these separate ones
above, and then plot the **mean births on a month basis** in each year:

```{r}
#| label: using-tibble-data-2
#| message: false

births_2000_2014 %>% 
  mutate(date = lubridate::make_date(year = year,
                                     month = month,
                                     day = date_of_month),
         
         # So that we can have discrete colours for each month
         month = as_factor(month)) %>% 
  group_by(year, month) %>% 
  summarise(mean_monthly_births = mean(births, na.rm = TRUE)) %>% 
  ggplot(aes(x = year, y = mean_monthly_births, group = month, colour = month)) + 
  geom_line() + 
  geom_point(size = 2) +
  scale_colour_brewer(palette = "Paired") +
  theme_classic()

```

So...average births per month were higher in 2005 to 2007 and have
dropped since.

We can do similar graphs using `day_of_week` as our basis for grouping,
instead of month:

```{r}
#| message: false
#| warning: false
births_2000_2014 %>% 
  mutate(date = lubridate::make_date(year = year,
                                     month = month,
                                     day = date_of_month),
         
         # So that we can have discrete colours for each week day
         day_of_week = base::factor(day_of_week,
                                    levels = c(1,2,3,4,5,6,7), 
                                    labels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))) %>% 
  group_by(year, day_of_week) %>% 
  summarise(mean_weekly_births = mean(births, na.rm = TRUE)) %>% 
  ggplot(aes(x = year, 
             y = mean_weekly_births, 
             group = day_of_week, 
             colour = day_of_week)) + 
  geom_line() + 
  geom_point(size = 2) +
  scale_colour_brewer(palette = "Paired") + # Or "Set3" palette for 12 colours
  theme_classic()

```

Looks like an interesting story here...there are significantly fewer
births on average on Sat and Sun, over the years! Why? Should we watch
[Grey's Anatomy](https://www.hotstar.com/in/tv/greys-anatomy/14823) ?

## `tsibble` data

`tsibble` format data contains three main components:\
- an `index` variable that defines time;\
- a set of `key` variables, usually **categorical**, that define sets of
observations, over time\
- a set of **quantitative** variables, that represent the quantities
that vary over time ( i.e `index`)

The package `tsibbledata` contains several ready made `tsibble` format
data. Run `data(package = "tsibbledata")` in your Console to find out
about these. Let us try `PBS` which is a dataset containing Monthly
Medicare prescription data in Australia.

```{r}
#| label: PBS
#| message: true

data("PBS")
PBS

```

This is a large dataset, with 67K observations, for 336 combinations of
`key` variables (`Concession`, `Type`, `ATC1`, `ATC2`) which are
categorical, as foreseen. Data appears to be *monthly,* as indicated by
the `1M`. Note that there are multiple **Quantitative variables** (
`Scripts`,`Cost`), a feature which is not supported in the `ts` format.
The **Qualitative Variables** are described below. (Type `help("PBS")`
in your Console)

> The data is disaggregated/grouped using four `keys`:

> -   `Concession`: Concessional scripts are given to pensioners,
>     unemployed, dependents, and other card holders
> -   `Type`: Co-payments are made until an individual's script
>     expenditure hits a threshold (\$290.00 for concession, \$1141.80
>     otherwise). Safety net subsidies are provided to individuals
>     exceeding this amount.
> -   `ATC1`: Anatomical Therapeutic Chemical index (level 1)
> -   `ATC2`: Anatomical Therapeutic Chemical index (level 2)

Let us simply plot `Cost` over time:

```{r PBS-Cost}

PBS %>% ggplot(aes(x = Month, y = Cost)) + 
  geom_point() + 
  geom_line()

```

This basic plot is quite messy. We can use `dplyr` functions such as
`mutate()`, `filter()`, `select()` and `summarise()` to work with
`tsibble` objects. ( There are specialized functions in the `tsibble` to
do similar things with the `index` ( i.e time) variable, which we will
see presently)

Let us first see how many observations there are for each combo of
`keys`:

```{r}

PBS %>% dplyr::count(ATC1, ATC2, Concession, Type)

```

We have 336 combinations of **Qualitative** variables, each containing
204 observations: so let us filter for a few such combinations and plot:

```{r}

PBS %>% dplyr::filter(Concession == "General", 
                      ATC1 == "A",
                      ATC2 == "A10") %>% 
  ggplot(aes(x = Month, y = Cost, colour = Type)) + 
  geom_line() + 
  geom_point() +
  theme_classic()


```

As can be seen, very different time patterns based on the two `Type`s of
payment methods. Strongly seasonal for both, with seasonal variation
increasing over the years, but there is an upward *trend* with the
Co-payments method of payment.

Finally, it may be a good idea to convert the `tibble` into a `tsibble`
to leverage some of functions that `tsibble` offers:

```{r tibble-to-tsibble}

births_tsibble <- births_2000_2014 %>% 
  mutate(date = lubridate::make_date(year = year,
                                     month = month,
                                     day = date_of_month)) %>%
  
  # drop year month day since we have date
  select(date, births) %>% 
  tsibble::as_tsibble(index = date) # Time Variable

births_tsibble

```

This is DAILY data of course. Let us say we want to group by month and
plot mean monthly births as before, but now using `tsibble`:

::: panel-tabset
### Basic Plot

```{r}
#| label: tsibble-with-time-variable-processing
#| 
births_tsibble %>%
  ggplot(aes(x = date, y = births)) + 
  geom_line() +
  theme_classic()

# Very busy plot
# Try to group by month and take average as before
# this time with tsibble
# 
```

### Grouped Plot version 1

```{r}
births_2000_2014 %>% 
  mutate(date = lubridate::make_date(year = year,
                                     month = month,
                                     day = date_of_month)) %>%
  
  # drop year month day since we have date
  select(date, births) %>% 
  tsibble::as_tsibble(index = date) %>%  # Created a tsibble as before


tsibble::index_by(month_index = ~ yearmonth(.)) %>% 
  # Grouping by month_index
  # NOT THE SAME AS `group_by(month)` !!!
  # if we had kept the original `month` variable !!!
  # The presence of `index` prevents the summarization from collapsing the data properly in 180 rows.
  
  
  # Monthly Birth Average as before
  summarise(mean_births = mean(births, na.rm = TRUE)) %>% 
  
  ggplot(., aes(x = month_index, y = mean_births)) + 
  geom_point() +
  geom_line() +
  geom_smooth(se = FALSE) +
  theme_classic()

```

Apart from the bump during in 2006-2007, there are also **seasonal
trends** that repeat each year, which we glimpsed earlier.

### Grouped Plot version 2

```{r}
#| echo: fenced
births_2000_2014 %>% 
  mutate(date = lubridate::make_date(year = year,
                                     month = month,
                                     day = date_of_month)) %>%
  
  # retain all variables, just to see the difference
  # not dropping any of the original variables month, year etc
  
 tsibble::as_tsibble(index = date) %>% # Created a tsibble

 group_by(year, month) %>% # Grouping by month, the original variable
  
  # NOT THE SAME as Grouping by month_index
  # The presence of `index` prevents the summarization from collapsing the data properly in 180 rows.
  
  
  # Monthly Birth Average as before
  summarise(mean_births = mean(births, na.rm = TRUE)) %>% 
  
  ggplot(., aes(x = month, y = mean_births, group = year, colour = year)) + 
  geom_point() +
  geom_line()


```

This is of course a complete mess and not at all what we want to see. We
are better off not using the `group_by` and `as_tsibble` together in
this way.
:::

Hmm...can we try to plot box plots over time (Candle-Stick Plots)? Over
month / quarter or year?

::: panel-tabset
### Monthly Box Plots

```{r,message=FALSE}

# Monthly box plots
births_tsibble %>%
  index_by(month_index = ~ yearmonth(.)) %>% # 180 months over 15 years
  # No need to summarise, since we want boxplots per year / month
  ggplot(., aes(y = births, x = date, 
                group =  month_index)) + # plot the groups
  
  geom_boxplot(aes(fill = month_index))      # 180 plots!!

```

### Quarterly boxplots

```{r}
births_tsibble %>%
  index_by(qrtr_index = ~ yearquarter(.)) %>% # 60 quarters over 15 years
  # No need to summarise, since we want boxplots per year / month
  ggplot(., aes(y = births, x = date, 
                group = qrtr_index)) +
  
  geom_boxplot(aes(fill = qrtr_index))        # 60 plots!!

```

### Yearwise boxplots

```{r}
births_tsibble %>% 
  index_by(year_index = ~ lubridate::year(.)) %>% # 15 years, 15 groups
    # No need to summarise, since we want boxplots per year / month

  ggplot(., aes(y = births, 
                x = date, 
                group = year_index)) + # plot the groups
  
  geom_boxplot(aes(fill = year_index)) +           # 15 plots
  scale_fill_distiller(palette = "Spectral")

```

Although the graphs are very busy, they do reveal seasonality trends at
different periods.
:::

# Seasons, Trends, Cycles, and Random Changes

Here are how the different types of patterns in time series are as
follows:

> `Trend`: A trend exists when there is a long-term increase or decrease
> in the data. It does not have to be linear. Sometimes we will refer to
> a trend as "changing direction", when it might go from an increasing
> trend to a decreasing trend.

> `Seasonal`: A seasonal pattern occurs when a time series is affected
> by seasonal factors such as the time of the year or the day of the
> week. Seasonality is always of a fixed and known period. The monthly
> sales of drugs ( with the PBD data ) shows seasonality which is
> induced partly by the change in the cost of the drugs at the end of
> the calendar year.

> `Cyclic`: A cycle occurs when the data exhibit rises and falls that
> are not of a fixed frequency. These fluctuations are usually due to
> economic conditions, and are often related to the "business cycle".
> The duration of these fluctuations is usually at least 2 years.

Let us try to find and plot these patterns in Time Series.

```{r,STL-model-yearly}

births_STL_yearly <- births_tsibble %>% 
  fabletools::model(STL(births ~ season(period = "year")))

fabletools::components(births_STL_yearly)
feasts::autoplot(components(births_STL_yearly))

```

How about a heatmap? We can cook up a categorical variable based on the
number of births (low, fine, high) and use that to create a heatmap:

```{r}


library(ggformula)

births_2000_2014 %>%  
  mutate(birthrate = case_when(births >=10000 ~ "high", births <= 8000 ~ "low", TRUE ~ "fine")) %>% 
  gf_tile(data = ., year ~ month, fill = ~ birthrate, color = "black") %>%
  
  gf_theme(scale_x_time(breaks = 1:12, labels = c("Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))) %>% 
  
  gf_theme(theme_classic())

```

## Conclusion

TBW

## Your Turn

1.  Choose some of the datasets in the `tsdl` and in the `tsibbledata`
    packages. Plot basic, filtered and model-based graphs for these and
    interpret.

## References

1.  Robert Hyndman, *Forecasting: Principles and Practice ( Third
    Edition)*. <https://otexts.com/fpp3/>

## Readings

1.  [The Nuclear Threat---The Shadow Peace, part
    1](http://www.fallen.io/shadow-peace/1/)

2.  [11 Ways to Visualize Changes Over Time -- A
    Guide](https://flowingdata.com/2010/01/07/11-ways-to-visualize-changes-over-time-a-guide/)

3.  [What is seasonal adjustment and why is it
    used?](http://junkcharts.typepad.com/junk_charts/2010/11/what-is-seasonal-adjustment-and-why-is-it-used.html)

4.  [The start-at-zero
    rule](http://junkcharts.typepad.com/junk_charts/2005/09/the_startatzero.html)

5.  [Keeping one's appetite after touring the sausage
    factory](http://junkcharts.typepad.com/numbersruleyourworld/2011/02/keeping-ones-appetite-after-touring-the-sausage-factory.html)

6.  [How Common is Your Birthday? This Visualization Might Surprise
    You](http://thedailyviz.com/2016/09/17/how-common-is-your-birthday-dailyviz/)

7.  [The Fallen of World War II](http://www.fallen.io/ww2/)

8.  [Visualizing Statistical Mix Effects and Simpson's
    Paradox](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/42901.pdf)

9.  [How To Fix a Toilet (And Other Things We Couldn't Do Without
    Search)](http://how-to-fix-a-toilet.com/)

------------------------------------------------------------------------
