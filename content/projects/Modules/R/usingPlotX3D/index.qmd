---
title: "Using PlotX3D with Observable in Quarto"
---

## Introduction

[`PlotX3D`](https://observablehq.com/collection/@mcmcclur/plotx3d) is a collection of Observable notebooks developed by [Mark McClure](https://observablehq.com/@mcmcclur), each of which defines `functions` that work well together. We need to import those notebooks into our work here and then use those functions to create the shapes we need. 

## Importing OJS packages

Import `aquero`, a `dplyr` equivalent in Observable:

```{ojs}
import {aq, op} from "@uwdata/arquero"
//PlotX3D libraries
import {
  show_x3d,
  create_pointSet,
  create_indexedFaceSet,
  create_indexedLineSet,
  create_sphere,
  create_text,
  create_cylinder,
  create_torus,
  create_arrow,
  create_box,
  create_transform,
  style
} from "@mcmcclur/x3dom-primitives"
//
import { create_surface } from "@mcmcclur/parametric-surfaces"
//
import { create_tube } from "@mcmcclur/space-curves-and-tubes"
//
import { create_hollow_cylinder } from "@mcmcclur/hollow-cylinder"


```


## Making Shapes with `PlotX3D`

```{ojs}
hyperbolic_paraboloid = show_x3d([
  create_surface((x, y) => [x, y, x ** 2 - y ** 2], [-1, 1], [-1, 1])
])
```

```{ojs}
viewof bill_length_min = Inputs.range(
  [32, 50], 
  {value: 35, step: 1, label: "Bill length (min):"}
)
viewof islands = Inputs.checkbox(
  ["Torgersen", "Biscoe", "Dream"], 
  { value: ["Torgersen", "Biscoe"], 
    label: "Islands:"
  }
)
```

Put a interactive filter on the data:
```{ojs}
filtered = penguins.filter(function(data) {
  return bill_length_min < data.bill_length_mm &&
         islands.includes(data.island);
})
```

```{ojs}
Plot.rectY(filtered, 
  Plot.binX(
    {y: "count"}, 
    {x: "body_mass_g", fill: "species", thresholds: 20}
  ))
  .plot({
    facet: {
      data: filtered,
      x: "sex",
      y: "species",
      marginRight: 80
    },
    marks: [
      Plot.frame(),
    ]
  }
)
```

## Trying Counts and Summaries with `aquero`

```{ojs}
df_penguins = aq.from(penguins)
Inputs.table(df_penguins)
```

```{ojs}
df_penguins.groupby("species").count().view()
```

```{ojs}
df_penguins
  .groupby("species")
  .rollup({ mean: (d) => op.mean(d.body_mass_g) })
  .view()
```


## Discovering `plot`

```{ojs}
Plot.plot({
  grid: true,
  inset: 10,
  //aspectRatio: 0.05,
  color: {legend: true},
  marks: [
    Plot.frame(),
    Plot.rectY(df_penguins, Plot.binX({y: "count"}, {x: "body_mass_g"}, 
                                   {color: "species"}, {fill: "species"})
              ),
    Plot.ruleY([0],)
  ],
  title: "For charts, an informative title",
  subtitle: "Subtitle to follow with additional context",
  caption: "Figure 2. A chart with a title, subtitle, and caption.",
})
```

Trying to master the syntax, step by step:

```{ojs}

Plot.boxX(
// Data 
  df_penguins, 
  
// Aesthetics
          {x: "body_mass_g", y: "species", fill: "species", sort: {y: "x"}}
)
// Plot options, concatenated
  .plot({
    title: "Box Plot in Observable",
    subtitle: "Getting hold of the Syntax",
    caption: "Box Plot on Log scale",
    height: 400,
    marginLeft: 100,
    
// scales
    x:{type:"log",}})
    
```

Let's try the same plot with facetting, AND with change in colour palette:

```{ojs}
Plot.boxX(
// Data 
  df_penguins, 
  
// Aesthetics
          {x: "body_mass_g", y: "species", fy: "island", fill: "species", sort: {y: "x"}}
)
// Plot options, concatenated
  .plot({
    title: "Box Plot in Observable",
    subtitle: "Getting hold of the Syntax",
    caption: "Box Plot on Log scale",
// scales
    x:{type:"log"}})
    
```


```{ojs}
Plot.plot({

//plots to overlay, inside "marks". Pass data for each! No inheritance!
  marks: [
    Plot.ruleY([0]), // x-axis intercept!!
    Plot.areaY(aapl, {x: "Date", y: "Close", fillOpacity: 0.2}),
    Plot.lineY(aapl, {x: "Date", y: "Close"})
  ],
  y: {
    type: "log",
    domain: [50, 300],
    grid: true
  }
})

```



```{ojs}
Plot.plot({
  grid: true,
  inset: 10,
  aspectRatio: fixed? 1 : undefined, //works online ;-()
  color: {legend: true},
  marks: [
    Plot.frame(),
    Plot.dot(penguins, {x: "culmen_length_mm", y: "culmen_depth_mm", stroke: "species"})
  ]
})
```


### Grouping and Aggregation within `Plot`
```{ojs}
Plot.plot({
  marginLeft: 80,
  marginRight: 80,
  aspectRatio: 0.05,
  x: {labelAnchor: "center", domain: [0, 200]},
  marks: [
    Plot.barX(penguins, Plot.groupY({x: "count"}, {y: "species"})),
    Plot.ruleX([0])
  ]
})
```

