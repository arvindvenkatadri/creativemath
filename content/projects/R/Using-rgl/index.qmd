---
title: "Using rgl to make 3D graphs in R"
self-contained-math: true
---

## Introduction
Understand and use the tutorial at <https://cran.r-project.org/web/packages/rgl/vignettes/rgl.html>, and other `rgl` vignettes.

## Setting up R Packages

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(rgl)
options(rgl.useNULL = TRUE) # Suppress the separate window.
knitr::knit_hooks$set(webgl = hook_webgl)
rgl::setupKnitr(autoprint = TRUE) # To ensure embedding happens in the rendered page
```

## What is `rgl`?
- 3D graphics library in R
- High-level graphics modelled after base/classic-R graphics


### Functions in `rgl`

1. `plot3D`

```{r}
 ## Default method

x <- penguins$bill_len
y <- penguins$bill_dep
z <- penguins$body_mass # target variable on z-axis
open3d()
plot3d(x,y,z, col = as.numeric(penguins$species))
rglwidget()
close3d()
```


#### Adding Shapes to an existing 3D plot

Let us add a regression plane to this plot. 

```{r}

# Linear model
fit <- lm(z ~ x + y)
coefs <- coef(fit)
a <- coefs["x"]
b <- coefs["y"]
c <- -1
d <- coefs["(Intercept)"]
open3d()
plot3d(x,y,z, col = as.numeric(penguins$species), size = 4)
planes3d(a, b, c, d, alpha=0.2, color = "#D95F02")
# lines3d(x = c(mean(x,na.rm = T), mean(x,,na.rm = T) + 10),
#         y = c(mean(y,,na.rm = T), mean(y,,na.rm = T) + 10),
#         z = c(mean(z,na.rm = T), mean(z,na.rm = T) + 10))
arrow3d(p0 = c(mean(x,na.rm = T), mean(y,,na.rm = T), mean(z,na.rm = T)),
        p1 = c(mean(x,na.rm = T) + a/10, 
               mean(y,,na.rm = T) + b/10, 
               mean(z,na.rm = T) + c/10), 
        width =  0.05, type = "ext", s = 0.08)
#rgl::axes3d(x, y, z)
# Show tick marks
# axis3d('x', pos=c( NA, 0, 0 ), col = "darkgrey")
# axis3d('y', pos=c( 0, NA, 0 ), col = "darkgrey")
# axis3d('z', pos=c( 0, 0, NA ), col = "darkgrey")
decorate3d(xlab = "Bill Length", ylab = "Bill Depth", zlab = "Body Mass")
rglwidget()
close3d()
```

2. `persp3D`

This creates a perspective / mesh plot of a function. 

```{r}
x <- seq(-10, 10, length.out = 20)
y <- x
f <- function(x, y) { r <- sqrt(x^2 + y^2); 10 * sin(r)/r }
z <- outer(x, y, f) # Needs a matrix, like a carpet with bumps
z[is.na(z)] <- 1
open3d()
persp3d(x, y, z, aspect = c(1, 1, 0.5), col = "dodgerblue",
        xlab = "X", ylab = "Y", zlab = "Sinc( r )", 
        polygon_offset = 1, smooth = TRUE,
        ambient = "black", specular = "white", shininess = 2.5)
# Overlay perspective plots
persp3d(x, y, z, front = "lines", back = "lines", add = TRUE)

rglwidget()
close3d()
```
3. `dot3d, wire3d, shade3d`
```{r}
#| results: hold
#| message: false
#| warning: false
x <- rnorm(20)
y <-  rnorm(20)
open3d()
points3d(x,y, front = "points", back = "points")
rglwidget()
close3d()
```



3. turn3D: Making solids of rotation








## References

1. How to embed `rgl` generated plots in Quarto HTML. <https://stackoverflow.com/questions/63595786/rmarkdown-how-to-embed-an-3d-plot>


