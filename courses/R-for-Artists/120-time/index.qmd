---
title: "Lab-12: Time is a Him!!"
date: "`r Sys.Date()`"
subtitle: "Time Series in R"
summary: "Time Series in R"
author: Arvind Venkatadri
weight: 120
featured: no
tags:
  - Line Charts
  - Boxplot Charts
  - Heatmaps
  - Averaging
  - Predictions
  - Exponential Smoothing
  - ARIMA models
  - Forecasting
format: 
  html:
    code-fold: true
    code-link: true
    code-tools: true
    code-summary: Code
    df-print: paged
links:
- icon: flask
  icon_pack: fas
  name: lab
  url: /labs/085-time/085-Time-Series.html
# - icon: magic
#   icon_pack: fas
#   name: slides
#   url: /slides/R-for-Artists/07-networks/07-Networks-in-R.html
---

![](featured.jpg)

## Introduction

Time Series data are important in data visualization where events have a
temporal dimension, such as with finance, transportation, music,
telecommunications for example.

```{r setup, include=FALSE}
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(tidyverse)

# Invoke core Time Series Packages
library(tsibble)
library(tsibbledata)
library(feasts) # Feature Extraction and Statistics for Time Series
library(fable) # Forecasting Models for Tidy Time Series
# library(tseries) # Time Series Analysis and Computational Finance

```

# Introduction to Time Series: Data Formats

There are multiple formats for time series data.

-   Tibble format: the simplest is of course the standard tibble /
    dataframe, with a `time` variable to indicate that the other
    variables vary with time.

-   The `ts` format: The `stats::ts()` function will convert a numeric
    vector into an R time series object. The format is
    `ts(vector, start=, end=, frequency=)` where start and end are the
    times of the first and last observation and frequency is the number
    of observations per unit time (1=annual, 4=quarterly, 12=monthly,
    etc.).

-   The modern `tsibble` format: this is a new format for time series
    analysis, and is used by the [tidyverts](https://tidyverts.org) set
    of packages.

-   The base `ts` object is used by established packages like `forecast`

-   The standard tibble object is used by `timetk` & `modeltime`

-   The special `tsibble` object ("time series tibble") is used by the
    more recently created packages from the `tidyverts` set (`fable`,
    `feasts` and others).

## Creating a time series

In this first example, we will use simple `ts` data, and then do another
with a `tibble` dataset, and then a third example with an `tsibble`
formatted dataset.

### `ts` format data

There are a few datasets in base R that are in `ts` format already.

```{r ts-data}

AirPassengers
str(AirPassengers)

```

This can be easily plotted using base R:

```{r}

plot(AirPassengers)

```

Let us take data that is "time oriented" but not in `ts` format, and
convert it to `ts`: the syntax of `ts()` is:

    Syntax:  objectName <- ts(data, start, end, frequency)

    where,

        `data` represents the data vector
        `start` represents the first observation in time series
        `end` represents the last observation in time series
        frequency represents number of observations per unit time. For 
        example, frequency=1 for monthly data.

We will pick simple **numerical vector data** `ChickWeight`:

```{r ChickWeights-ts}

ChickWeight %>% head()
ChickWeight_ts <- ts(ChickWeight$weight, frequency = 2)
plot(ChickWeight_ts)

```

The `ts` format is not recommended for new analysis since it does not
permit inclusion of multiple time series in one dataset, nor other
*categorical variables* for grouping etc.

### `tibble` format data

Some "time-oriented" datasets are available in `tibble` form. Let us try
to plot one, the `walmart_sales_weekly` dataset from the `timetk`
package:

```{r}

data(walmart_sales_weekly, package = "timetk")
walmart_sales_weekly %>% head()

```

This dataset is a tibble with a `Date` column. Let us plot the data
using this column on the time/X-axis:

```{r}
walmart_sales_weekly %>% 
  # convert Dept number to a **categorical factor**
  mutate(Dept = forcats::as_factor(Dept)) %>% 
  ggplot(aes(x = Date, y = Weekly_Sales, group = Dept)) + 
  geom_point(aes(colour = Dept)) +
  geom_line(aes(colour = Dept))

```

### `tsibble` format data

For more analysis and forecasting etc., it is useful to convert this
tibble into a `tsibble`:

```{r tibble-as-tsibble}
walmart_tsibble <- as_tsibble(walmart_sales_weekly,
                         index = Date,
                         key = c(id, Dept))
walmart_tsibble

```

The `7D` states the data is weekly. There is a `Date` column and all the
other *numerical variables* are time-varying quantities. The
*categorical variables* such as `id`, and `Dept` allow us to identify
separate time series in the data, and these have 7 combinations hence
are 7 time series in this data, as indicated.

Let us plot `Weekly_Sales`, colouring the time series by `Dept`:

```{r fig-together, fig.cap="Walmart Time Series", fig.show='hold', cache=TRUE, message=FALSE}

walmart_tsibble %>% 
  ggplot(aes( x = Date, y = Weekly_Sales, colour = Dept)) + 
           geom_line() + 
           geom_point() + 
           labs(title = "Weekly Sales by Dept at Walmart")

```

This first plot is that of *all* series together. There does seem to be
an annual variation, which we should investigate later.

Note the blue trend lines that are automatically plotted in the second
graph. This is caused by the argument `.smooth = TRUE`.

`r margin_note("We can also do a quick *autoplot* that seems to offer  less control and is also not interactive.")`

::: column-margin
```{r}
walmart_tsibble %>% 
  dplyr::group_by(Dept) %>% 
  autoplot(Weekly_Sales)
```
:::

## One more example

Often we have data in table form, that is time-oriented, with a date
like column, and we need to convert it into a `tsibble` for analysis:

```{r prison-data-fpp3}

prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
glimpse(prison)

```

We have a `Date` column for the time `index`, and we have unique `key`
variables like `State, Gender, Legal` and `Indigenous`. `Count` is the
value that is variable over time. It also appears that the data is
`quarterly`, since `mosaic::inspect` reports the `max_diff` in the
`Date` column as $92$. (Run `mosaic::inspect(prison)` in your Console).

```{r prison-tsibble}

prison_tsibble <- prison %>% 
  mutate(quarter = yearquarter(Date)) %>% 
  select(-Date) %>% # Remove the Date column now that we have quarters
  as_tsibble(index = quarter, key = c(State, Gender, Legal, Indigenous))

prison_tsibble

```

(Here, ATSI stands for *Aboriginal or Torres Strait Islander*.). We have
$64$ time series here, organized quarterly.

Let us examine the `key` variables:

```{r}

prison_tsibble %>% distinct(Indigenous)
prison_tsibble %>% distinct(State)

```

So we can plot the time series, **faceted by / coloured** by `State`:

```{r}
#| column: margin

prison_tsibble %>% 
  tsibble::index_by() %>% 
  group_by(Indigenous, State) %>% 
  #filter(State == "NSW") %>% 
  summarise(Total = sum(Count))  %>%
  ggplot(aes(x = quarter, y = Total, colour = Indigenous, 
             shape = Indigenous)) + 
  geom_point() +
  geom_line()  + 
  facet_wrap(~ State)

```

Hmm...looks like New South Wales(NSW) as something different going on
compared to the rest of the states in Aus.

## Decomposing Time Series

We can decompose the `Weekly_Sales` into components representing trends,
seasonal events that repeat, and irregular noise. Since each Dept could
have a different set of trends, we will do this first for one Dept, say
Dept #95:

```{r}
#| column: page
walmart_decomposed_season <- walmart_tsibble %>% 
  dplyr::filter(Dept == "95") %>% # filter for Dept 95
  #
  # feasts depends upon fabletools.
  # 
  fabletools::model(
    season = STL(Weekly_Sales ~ season(window = "periodic"))) 

walmart_decomposed_ets <- walmart_tsibble %>% 
  dplyr::filter(Dept == "95") %>% # filter for Dept 95
  #
  # feasts depends upon fabletools.
  # 
  fabletools::model(
    ets = ETS(box_cox(Weekly_Sales, 0.3)))

walmart_decomposed_season %>% fabletools::components()
walmart_decomposed_ets %>% fabletools::components()

# walmart_decomposed_arima <- walmart_tsibble %>% 
#   dplyr::filter(Dept == "95") %>% # filter for Dept 95
#     arima = ARIMA(log(Weekly_Sales))
```

```{r}
#| column: page

walmart_decomposed_season %>% 
  components() %>% 
  autoplot() + 
  labs( title = "Seasonal Variations in Weekly Sales, Dept #95")

walmart_decomposed_ets %>% 
  components() %>% 
  autoplot() + 
  labs( title = "ETS Variations in Weekly Sales, Dept #95")

```

## References
