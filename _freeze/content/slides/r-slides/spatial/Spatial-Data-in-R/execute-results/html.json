{
  "hash": "3124922fa493b2527c2810efbabb86d0",
  "result": {
    "markdown": "---\ntitle: \"Spatial Data in R\"\nsubtitle: \"Understanding Spatial Data, and Basics of Maps in R\" \nauthor: \"Arvind Venkatadri\"\ndate: \"24/July/2023\"\noutput:\n  xaringan::moon_reader:\n    css: \n      - default\n      - css/lexis.css\n      - css/lexis-fonts.css\n    lib_dir: libs\n    nature:\n      highlightStyle: atelier-lakeside-light\n      highlightLines: true\n      slideNumberFormat: \"%current%\"\n      ratio: 16:9\n      countIncrementalSlides: true\n---\n\n\n\n\n\n\n\n## Let's get started\n.pull-left[\nLook at a piece of Google Map.\n\nWhat different objects do you see?\n\nWhat information do you think went into making it?\n]\n.pull-right[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-1_a867e01c6ce8d1e4e4c5ba4026ba7c39'}\n::: {.cell-output-display}\n![](../../../materials/images/piece-of-map.png){width=900px height=450px}\n:::\n:::\n\n]\n\n\n\n---\n\n# Let's get started\n\n\n- To make maps, we need data organized in a specific way\n- Let us look at the pieces that go into making spatial data\n- Our focus will be the r package `sf` ( \"simple features\")\n\n\n---\n\n# What is a Feature?\n.pull-left[\n- A Thing, or an Object in the real world\n\n- Examples of Features: \n\n - A Tree or a Lamp-post\n - A forest stand  \n - A city with buildings, streets, and parks  \n - A County or State\n - A Country \n - An Island\n\n]\n\n.pull-right[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-2_3c49494bfa6b6a5f1dc111113a22d5a9'}\n::: {.cell-output-display}\n![](Spatial-Data-in-R_files/figure-html/unnamed-chunk-2-1.png){width=900px height=450px}\n:::\n:::\n\n\n]\n\n---\n\n.pull-left[\n## What is a Feature Geometry?\nFeatures have a **geometry** describing **where** on Earth the feature is located\n- Features = Shapes  + Location Data \n- The geometry of a tree can be the delineation of its crown ( Polygon )\n- Of its stem,  (Polygon )\n- or the point indicating its centre.  (Point )\n-  A feature geometry is called **simple**  \n - When it consists of points connected by straight line pieces,  \n - And does not intersect itself.\n]\n.pull-right[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-3_199696c30eb0e3604284a025e13de0de'}\n::: {.cell-output-display}\n![](../../../materials/images/Holmes-Tree.jpg){width=900px height=250px}\n:::\n:::\n\n.pull-left[\n.small[\n'Whose was it?'  \n'His who is gone.'  \n'Who shall have it?'  \n'He who will come.'  \n('What was the month?'  \n'The sixth from the first.')  \n'Where was the sun?'  \n'Over the oak.'  \n'Where was the shadow?'  \n'Under the elm.']\n]\n.pull-right[\n.small[\n'How was it stepped?'  \n'North by ten and by ten, east by five and by five, south by two and by two, west by one and by one, and so under.'  \n'What shall we give for it?'  \n'All that is ours.'  \n'Why should we give it?'  \n'For the sake of the trust.']\n]\n]\n\n---\n\n\n## So Finally, What is a Spatial Data Frame in R?\n.pull-left[\n- Features Geometries + **Attribute** data in a single Data Frame\n- Geometries give **where** the feature is located **and** its shape\n- **Attributes** describe other properties:  \n    - Tree height\n    - Flower or foliage colour\n    - Trunk diameter at breast height at a particular date, \n    - Tree species and so on.\n]\n.pull-right[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-4_ebe848a66b474f993fc5db2257d20c60'}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/sf.png){width=900px height=450px}\n:::\n:::\n\n]\n\n---\n\n## Kinds of Geospatial Data\n\n.pull-left[\n\n\n- Examples:  \n    - POINT: buildings, offices, venues, etc in a city  \n    - LINESTRING: Roads, rivers and railways  \n    - POLYGON: a lake, a golf course, or the border of a country  \n    - MULTIPOLYGON: Any non-contiguous set of areas, a set of suburbs for example\n]\n\n.pull-right[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-5_a4e90c3481f5c957eaca9b8e05d51f00'}\n::: {.cell-output-display}\n![](../../../materials/images/sf-classes.png){width=900px height=450px}\n:::\n:::\n\n]\n\n---\n\n\n## How are these shapes represented?\n\n\n.pull-left[\n![Geometry Primitives](https://cengel.github.io/R-spatial/img/wkt_primitives.png)\n]\n\n.pull-right[\n![Multipart Geometry Representation](https://cengel.github.io/R-spatial/img/wkt_multipart.png)\n\n]\n\nThese formulaic descriptions are called **WKT: Well Known Text**  \nNote: Polygons can have **\"holes\"** in them!!\n\n---\n\n## How are these shapes represented?\n\nLet's read a spatial file available with `sf`:\n\n\n::: {.cell highlight.output='[4,5]' hash='Spatial-Data-in-R_cache/html/unnamed-chunk-6_4c5ebfdedc883d6d6dd0b87e410aee00'}\n\n```{.r .cell-code}\nnc <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `nc' from data source `C:\\Users\\Arvind\\R_library\\sf\\shape\\nc.shp' using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n:::\n:::\n\n\n\n---\n\n## How are these shapes represented?\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-7_4dc99d24971700a671d1a8faf7781263'}\n\n```{.r .cell-code}\nprint(nc[9:15], n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 100 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\nFirst 3 features:\n  BIR74 SID74 NWBIR74 BIR79 SID79 NWBIR79                       geometry\n1  1091     1      10  1364     0      19 MULTIPOLYGON (((-81.47276 3...\n2   487     0      10   542     3      12 MULTIPOLYGON (((-81.23989 3...\n3  3188     5     208  3616     6     260 MULTIPOLYGON (((-80.45634 3...\n```\n:::\n:::\n\n\n---\n\n## How are these shapes represented?\n\nIf we examine a spatial data frame in `sf` we get:\n![](https://r-spatial.github.io/sf/articles/sf_xfig.png)\n\n---\n\nclass: inverse, middle, center\n## Let us plot some hand-crafted simple geometries\n\n---\n\n## The `sf` : Spatial Data Frame: Point Geometry\n\n.pull-left[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/plot1a_c0352f66bba41c5242fcaeea536f0d2b'}\n\n```{.r .cell-code}\n# Let's get the India Boundary\n# https://www.indianremotesensing.com/2017/01/Download-India-shapefile-with-kashmir.html\ndata(\"World\")\nindia <- World %>% filter(iso_a3 == \"IND\")\ncrs_india <- st_crs(india)\n\npoints <- # Create 5 random points  #<<\n  data.frame(lon = rnorm(5, 77, 2), #<<\n             lat = rnorm(5, 23, 5)) #<<\n\nstr(points) #<<\n```\n:::\n\n]\n\n.pull-right[\n\n\n::: {.cell highlight.output='[1,2,3]' hash='Spatial-Data-in-R_cache/html/first-plot1a-out_fcca17f035d96e05016ce76982e678d1'}\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t5 obs. of  2 variables:\n $ lon: num  78.1 74.8 78.8 74.5 74.3\n $ lat: num  30 21.1 20.8 22.4 20.9\n```\n:::\n:::\n\n]\n\n\n---\n## The `sf` : Spatial Data Frame: Point Geometry\n\n.pull-left[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/plot1b_03c39ec1b2c0e5480e39216008ece554'}\n\n```{.r .cell-code}\n# Let's get the India Boundary\n# https://www.indianremotesensing.com/2017/01/Download-India-shapefile-with-kashmir.html\ndata(\"World\")\nindia <- World %>% filter(iso_a3 == \"IND\")\ncrs_india <- st_crs(india)\n\npoints <- # Create 5 random points\n  data.frame(lon = rnorm(5, 77, 2),\n             lat = rnorm(5, 23, 5))\n\nstr(points) \n\n# Convert to spatial data frame\npoints_sf <- st_as_sf(points, \n         coords = c(\"lon\", \"lat\"),\n           crs = crs_india) \n\nstr(points_sf) #<<\n```\n:::\n]\n\n.pull-right[\n\n::: {.cell highlight.output='[2,3]' hash='Spatial-Data-in-R_cache/html/first-plot1b-out_4f0c32a0453e15ac83d28dfc78f42781'}\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t5 obs. of  2 variables:\n $ lon: num  78.3 71.3 74.4 75.6 81.2\n $ lat: num  26.9 19.7 28.8 28.2 25.7\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'sf' and 'data.frame':\t5 obs. of  1 variable:\n $ geometry:sfc_POINT of length 5; first list element:  'XY' num  78.3 26.9\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: \n  ..- attr(*, \"names\")= chr(0) \n```\n:::\n:::\n]\n\n---\n\n\n## The `sf` : Spatial Data Frame: Point Geometry\n\n.pull-left[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/plot1c_e87b7fad8df85cf996a2e3acb2b172b0'}\n\n```{.r .cell-code}\n# Let's get the India Boundary\n# https://www.indianremotesensing.com/2017/01/Download-India-shapefile-with-kashmir.html\ndata(\"World\")\nindia <- World %>% filter(iso_a3 == \"IND\")\ncrs_india <- st_crs(india)\n\npoints <- # Create 5 random points\n  data.frame(lon = rnorm(5, 77, 2),\n             lat = rnorm(5, 23, 5))\n\n#str(points) \n\n# Convert to spatial data frame\npoints_sf <- st_as_sf(points,\n         coords = c(\"lon\", \"lat\"),\n           crs = crs_india)\n\n#str(points_sf)\n\nggplot() + #<<\n    geom_sf(data = india, linewidth = 0.5) + #<<\n    geom_sf(data = points_sf, colour = \"red\", size = 4) #<<\n```\n\n::: {.cell-output-display}\n![](Spatial-Data-in-R_files/figure-html/plot1c-1.png){width=2100}\n:::\n:::\n\n]\n\n.pull-right[\n\n\n::: {.cell highlight.output='2' hash='Spatial-Data-in-R_cache/html/first-plot1c-out_0874854444bef005423d60b8717a3e5f'}\n::: {.cell-output-display}\n![](Spatial-Data-in-R_files/figure-html/first-plot1c-out-1.png){width=90%}\n:::\n:::\n\n]\n\n\n\n---\n\nclass:inverse, center, middle\n## Let's now plot a handcrafted Polygon Geometry\n\n---\n\n## The `sf`:Spatial Data Frame: Polygon Geometry\n\n.pull-left[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/plot2a_b15383b0417f859d44d56befe17e76b4'}\n\n```{.r .cell-code}\n# Let's create three SQUARES\n# (Using matrices)\n# Center them over Central India \n# (Lon: 77, Lat: 13)\n# \nouter <- matrix(c(0,0,10,0,10,10,0,10,0,0) + c(77,13), ncol=2, byrow=TRUE)\nhole1 <- matrix(c(1,1,1,2,2,2,2,1,1,1) + c(77,13),ncol=2, byrow=TRUE)\nhole2 <- matrix(c(5,5,5,6,6,6,6,5,5,5) + c(77,13),ncol=2, byrow=TRUE)\n#outer #<<\n# Now pile all matrices into a **LIST*\npl1 <- list(outer, hole1, hole2) #<<\nstr(pl1) #<<\n```\n:::\n\n]\n\n.pull-right[\n\n\n::: {.cell highlight.output='[2,3,4,5,6]' hash='Spatial-Data-in-R_cache/html/first-plot2a-out_611ff0ee424259de3aa48513163f1680'}\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ : num [1:5, 1:2] 77 87 87 77 77 13 13 23 23 13\n $ : num [1:5, 1:2] 78 78 79 79 78 14 15 15 14 14\n $ : num [1:5, 1:2] 82 82 83 83 82 18 19 19 18 18\n```\n:::\n:::\n\n\n]\n\n---\n\n## The `sf`:Spatial Data Frame: Polygon Geometry\n\n.pull-left[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/plot2b_05f6e91b1a94210a275f43f9658c0fd2'}\n\n```{.r .cell-code}\n# Let's create three SQUARES\n# (Using matrices)\n# Center them over Central India \n# (Lon: 77, Lat: 13)\nouter <- matrix(c(0,0,10,0,10,10,0,10,0,0) + c(77,13), ncol=2, byrow=TRUE)\nhole1 <- matrix(c(1,1,1,2,2,2,2,1,1,1) + c(77,13),ncol=2, byrow=TRUE)\nhole2 <- matrix(c(5,5,5,6,6,6,6,5,5,5) + c(77,13),ncol=2, byrow=TRUE)\nouter #<<\n# Now pile all matrices into a **LIST*\npl1 <- list(outer, hole1, hole2) #<<\nstr(pl1) #<<\n```\n:::\n\n]\n\n.pull-right[\n\n\n::: {.cell highlight.output='[2,3,4]' hash='Spatial-Data-in-R_cache/html/first-plot2b-out_9911de49b652360ae70c77e3e5ffd2e8'}\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]   77   13\n[2,]   87   13\n[3,]   87   23\n[4,]   77   23\n[5,]   77   13\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ : num [1:5, 1:2] 77 87 87 77 77 13 13 23 23 13\n $ : num [1:5, 1:2] 78 78 79 79 78 14 15 15 14 14\n $ : num [1:5, 1:2] 82 82 83 83 82 18 19 19 18 18\n```\n:::\n:::\n\n\n]\n\n---\n\n## The `sf`:Spatial Data Frame: Polygon Geometry\n\n.pull-left[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/plot2c_ed452536b87e7e0d81f3274da40ccd6c'}\n\n```{.r .cell-code}\n# Let's create three SQUARES\n# (Using matrices)\n# Center them over Central India \n# (Lon: 77, Lat: 13)\nouter <- matrix(c(0,0,10,0,10,10,0,10,0,0) + c(77,13), ncol=2, byrow=TRUE)\nhole1 <- matrix(c(1,1,1,2,2,2,2,1,1,1) + c(77,13),ncol=2, byrow=TRUE)\nhole2 <- matrix(c(5,5,5,6,6,6,6,5,5,5) + \n  c(77,13),ncol=2, byrow=TRUE)\n#outer\n# Now pile all matrices into a **LIST*\npl1 <- list(outer, hole1, hole2) #<<\n#str(pl1)\npl1_polygon <- st_polygon(pl1) %>% # feature geometry\n  st_sfc() %>% # feature column\n  st_as_sf(crs = crs_india) # spatial data frame\nstr(pl1_polygon) #<<\n```\n:::\n\n]\n\n.pull-right[\n\n\n::: {.cell highlight.output='[1,2,3,4]' hash='Spatial-Data-in-R_cache/html/first-plot2c-out_a833373aa8686902942c000f56bff2c1'}\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'sf' and 'data.frame':\t1 obs. of  1 variable:\n $ x:sfc_POLYGON of length 1; first list element: List of 3\n  ..$ : num [1:5, 1:2] 77 87 87 77 77 13 13 23 23 13\n  ..$ : num [1:5, 1:2] 78 78 79 79 78 14 15 15 14 14\n  ..$ : num [1:5, 1:2] 82 82 83 83 82 18 19 19 18 18\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"x\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: \n  ..- attr(*, \"names\")= chr(0) \n```\n:::\n:::\n\n\n]\n\n---\n\n### The `sf`:Spatial Data Frame: Polygon Geometry\n\n.pull-left[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/plot2d_748186b51f675e76562aaee7d32883cc'}\n\n```{.r .cell-code}\n# Let's create three SQUARES\n# (Using matrices)\n# Center them over Central India \n# (Lon: 77, Lat: 13)\nouter <- matrix(c(0,0,10,0,10,10,0,10,0,0) + c(77,13),ncol=2,byrow=TRUE)\nhole1 <- matrix(c(1,1,1,2,2,2,2,1,1,1) + c(77,13),ncol=2,byrow=TRUE)\nhole2 <- matrix(c(5,5,5,6,6,6,6,5,5,5) + c(77,13),ncol=2,byrow=TRUE)\n# Now pile all matrices into a **LIST*\npl1 <- list(outer, hole1, hole2) #<<\npl1_polygon <- st_polygon(pl1) %>% # feature geometry\n  st_sfc() %>% # feature column\n  st_as_sf(crs = crs_india) # spatial data frame\nggplot() + #<<\n    geom_sf(data = india, linewidth = 0.5) + #<<\n    geom_sf(data = pl1_polygon, colour = \"red\", linewidth = 1) #<<\n```\n:::\n\n]\n\n.pull-right[\n\n\n::: {.cell highlight.output='2' hash='Spatial-Data-in-R_cache/html/first-plot2d-out_d579f8c4ddd82d7c77a61172e5498c58'}\n::: {.cell-output-display}\n![](Spatial-Data-in-R_files/figure-html/first-plot2d-out-1.png){width=90%}\n:::\n:::\n\n\n]\n\n\n---\n\nclass:center, inverse, middle\n## Let us (sigh) see a handcrafted Multi-Polygon\n\n\n---\n## The `sf`:Spatial Data Frame: Multi-Polygon Geometry\n\n.pull-left[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/plot3a_dff8f3f8daf3b2582fea39f250c30ed2'}\n\n```{.r .cell-code}\npol1 <-  list(outer, hole1, hole2)\npol2 <-  list(outer + 12, hole1 + 12)\npol3 <- list(outer - 12)\nmp <-  list(pol1,pol2,pol3)\nmp1 <- st_multipolygon(mp) %>% #feature geometry\n  st_sfc() %>% #feature column\n  st_as_sf(crs = crs_india) # sf dataframe\nhead(mp1,3)\n```\n:::\n]\n\n.pull-right[\n\n::: {.cell highlight.output='[1,2,3,4]' hash='Spatial-Data-in-R_cache/html/first-plot2c-out_47a81faa4d4e2339acaaabdc043e9e23'}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[1],\"type\":[\"s_MULTIP\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"<s_MULTIP>\",\"_rn_\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n]\n\n---\n\n\n## The `sf`:Spatial Data Frame: Multi-Polygon Geometry\n\n.pull-left[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/plot3b_178bd9482a5d60697ca60bd19e88e4cb'}\n\n```{.r .cell-code}\npol1 <-  list(outer, hole1, hole2)\npol2 <-  list(outer + 12, hole1 + 12)\npol3 <- list(outer - 12)\nmp <-  list(pol1,pol2,pol3)\nmp1 <- st_multipolygon(mp) %>% #feature geometry\n  st_sfc() %>% #feature column\n  st_as_sf(crs = crs_india) # sf dataframe\n# head(mp1,3)\nggplot() + #<<\n    geom_sf(data = india,linewidth = 0.5) + #<<\n    geom_sf(data = mp1, colour = \"red\",linewidth = 1) #<<\n```\n:::\n\n]\n\n.pull-right[\n\n\n::: {.cell highlight.output='[2,7]' hash='Spatial-Data-in-R_cache/html/first-plot3a-out_4c16ff59fa757267bbb838090ef4468b'}\n::: {.cell-output-display}\n![](Spatial-Data-in-R_files/figure-html/first-plot3a-out-1.png){width=90%}\n:::\n:::\n\n\n]\n\n\n\n---\nbackground-image: url(\"../../../materials/images/2book11.jpg\")\nbackground-position: 50% 50%\nclass: center, bottom, inverse\nImage credit: [alice-in-wonderland.net](https://www.alice-in-wonderland.net/resources/background/tenniel-and-his-illustrations/)\n\n---\n\n\n## Map Projections: Through the Looking Glass\nA **Projection** is a *shadow* or **Image**...\n\n.pull-left[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-8_58bc0f0d88bb16f23ff2ef88a9b33c4c'}\n::: {.cell-output-display}\n![](../../../materials/images/2book4.jpg){width=450px height=350px}\n:::\n:::\n\n\nWe see Maps Through The Looking Glass...  \n]\n.pull-right[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-9_69f9c46bb39f5823610e662c35779ec2'}\n::: {.cell-output-display}\n![](../../../materials/images/2book18.jpg){width=450px height=350px}\n:::\n:::\n\n\n\nNo Two Map Projections are Alike!\n]\n\n---\n\n\n## Why do we Need Projections?\n.pull-left[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-10_06a490e298cda9a0e7d6794c6b86b23b'}\n::: {.cell-output-display}\n![](../../../materials/images/orange-peel.jpg){width=450px height=350px}\n:::\n:::\n\n]\n\n.pull-right[\n- Cannot Flatten the Earth's Surface onto a 2D surface\n- Just as we cannot flatten the Orange Peel\n- So: we need Mirrors, Shadows and Images and Lights...just like Alice\n]\n\n---\n\n\n## How is a Projection Created?\n\n.pull-left[\nRegular Cylindrical Projection\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-11_0fceb0d392879f80fd2a965b040ab6f4'}\n::: {.cell-output-display}\n![](../../../materials/images/reg_cyl_proj.png){width=250px height=350px}\n:::\n:::\n\n\n]\n\n.pull-right[\nOblique Cylindrical Projection\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-12_eb8c72684fe3aafab7fee10d4b1690f2'}\n::: {.cell-output-display}\n![](../../../materials/images/oblq_cyl_proj.png){width=350px height=350px}\n:::\n:::\n\n]\n\n---\n\n## How is a Projection Created?\n\n.pull-left[\nPolar Azimuthal Projection\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-13_f69c28f80727b0174bb4a1e633818722'}\n::: {.cell-output-display}\n![](../../../materials/images/polar_azi_proj.png){width=350px height=350px}\n:::\n:::\n\n]\n\n.pull-right[\nOblique Azimuthal Projection\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-14_1ba47c9e6a013b394e7aa66d9353a613'}\n::: {.cell-output-display}\n![](../../../materials/images/oblq_azim_proj.png){width=350px height=350px}\n:::\n:::\n\n]\n\n---\n\n## Why does all this Matter??\n\n### The Gall-Peters Projection\n\n<center><iframe width=\"629\" height=\"352\" src=\"https://www.youtube.com/embed/vVX-PrBRtTY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></center>\n\n.footnote[From \"The West Wing\" Season 2 Episode 16.]\n\n---\n\n\n### Projections with `coord_sf()`\n\n\n.pull-left[\nLet's create an *Azimuthal Equal Area* Projection in R. We can use the **Lambert Azimuthal Equal-Area** Projection:\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/csf_24663b11546cff3517fc8d9f704e8fa9'}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = World, linewidth = 1) + \n    geom_sf(data = india, fill = \"pink\") + \n    geom_sf(data = points_sf, colour = \"red\", size = 2) +\n  \n  coord_sf(crs = \"+proj=laea +lat_0=23 +lon_0=77 +ellps=GRS80 +units=m  +no_defs\") #<<\n```\n:::\n\n]\n\n.pull-right[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-15_c533df37f107f18f5b58b901fbb721ab'}\n::: {.cell-output-display}\n![](Spatial-Data-in-R_files/figure-html/csf-1.png){width=672}\n:::\n:::\n\n]\n\n\n---\nclass:center, middle\n\n## Why do we need Map Projections?\n\n<iframe width=\"660\" height=\"415\" src=\"https://www.youtube.com/embed/kIID5FDi2JQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n---\n\n## To Summarize\n- We obtain Spatial Data Frames from many sources, which we will see\n  - We very rarely create **small** Spatial Data by hand-coding WKT\n- We can process with the Spatial Data with `dplyr` like verbs, which we have not yet covered here\n\nNow we will: \n- Plot a variety of static and interactive maps\n- Use Projections to show of the map in the right way\n  - We may need to *re-project* the data if it is not already in the projection we want\n\n\n---\n\nclass: center, middle\n\n## Map Making with `tmap`\n### Adapted from SIGR2021 Conference (*Sciences de l'information géographique reproductibles*)\n#### Saint-Pierre-d'Oléron (France)\n#### 27/June/2021 to 3/July/2021\n#### \"GIS and mapping\": \"A workshop on GIS and mapping with R: part 2\"\n#### Jakub Nowosad & Robin Lovelace\n\n---\n\n## Mapping\n\n- We have seen a bit of `ggplot + geom_sf + coord_sf()`\n- This is good for static plots\n- `tmap` can give us both static and interactive plots\n- And some fancy map templates too!!\n\n---\n\n## Mapping\n\nLet's look at London Boroughs and places where we can hire bicycles.\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-16_fccf16a0416009f5ad4a9daee7458fe1'}\n\n```{.r .cell-code}\ndata(\"lnd\", package = \"spData\") # Boroughs of London\ndata(\"cycle_hire_osm\", package = \"spData\") # Cycle Hire locations\n\nstr(lnd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'sf' and 'data.frame':\t33 obs. of  8 variables:\n $ NAME      : Factor w/ 33 levels \"Barking and Dagenham\",..: 21 8 5 18 9 16 17 15 4 2 ...\n $ GSS_CODE  : Factor w/ 33 levels \"E09000001\",\"E09000002\",..: 21 8 6 18 9 16 17 15 5 3 ...\n $ HECTARES  : num  3726 8649 15013 5659 5554 ...\n $ NONLD_AREA: num  0 0 0 60.8 0 ...\n $ ONS_INNER : Factor w/ 2 levels \"F\",\"T\": 1 1 1 1 1 1 1 1 1 1 ...\n $ SUB_2009  : Factor w/ 0 levels: NA NA NA NA NA NA NA NA NA NA ...\n $ SUB_2006  : Factor w/ 0 levels: NA NA NA NA NA NA NA NA NA NA ...\n $ geometry  :sfc_MULTIPOLYGON of length 33; first list element: List of 1\n  ..$ :List of 1\n  .. ..$ : num [1:1271, 1:2] -0.331 -0.331 -0.331 -0.33 -0.33 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTIPOLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:7] \"NAME\" \"GSS_CODE\" \"HECTARES\" \"NONLD_AREA\" ...\n```\n:::\n:::\n\n\n---\n\n## Mapping\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-17_9b71bfbb6e5aea4db127f839481a273b'}\n\n```{.r .cell-code}\nstr(cycle_hire_osm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'sf' and 'data.frame':\t540 obs. of  6 variables:\n $ osm_id         : Factor w/ 540 levels \"1010857552\",\"1012775602\",..: 8 228 229 230 231 232 233 234 235 236 ...\n $ name           : Factor w/ 445 levels \"Abbey Orchard Street\",..: 440 298 71 NA NA 128 244 67 138 100 ...\n $ capacity       : num  14 NA 11 NA NA NA NA 20 6 17 ...\n $ cyclestreets_id: Factor w/ 1 level \"26743\": NA NA NA NA NA NA NA NA NA NA ...\n $ description    : Factor w/ 1 level \"Barclays Cycle Hire\": NA NA NA NA NA NA NA NA NA NA ...\n $ geometry       :sfc_POINT of length 540; first list element:  'XY' num  -0.0934 51.5291\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:5] \"osm_id\" \"name\" \"capacity\" \"cyclestreets_id\" ...\n```\n:::\n:::\n\n\n---\n\n## Mapping\n\n.pull-left[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/tm1_7c480e386c0faa7f572bc724f3b31149'}\n\n```{.r .cell-code}\ntm_shape(lnd) + #<<\n  tm_borders(col = \"black\", lwd = 1) + #<<\n  tm_fill(\"NAME\", legend.show = FALSE) #<<\n```\n:::\n\n]\n\n.pull-right[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-18_d66559ad76ad354b4cfbbde8b4dd2853'}\n::: {.cell-output-display}\n![](Spatial-Data-in-R_files/figure-html/tm1-1.png){width=672}\n:::\n:::\n\n]\n\n---\n\n## `tmap` Layers are in *groups*\n\n\n.pull-left[\n\nGroups start with `tm_shape(data = ...)`   \nGroups are \"connected\" with a $+$ sign as usual...\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/tm1a_3f7ca17e960fd0bce382244c5b2aebb3'}\n\n```{.r .cell-code}\n# Group 1 #<<\ntm_shape(lnd) +\n  tm_borders(col = \"black\",lwd = 1) + \n  tm_fill(\"NAME\", legend.show = FALSE) +\n\n# Group 2 = Layer 2 #<<\n  tm_shape(cycle_hire_osm) + #<<\n  tm_symbols(size = 0.2, col = \"red\") #<<\n```\n:::\n\n]\n\n.pull-right[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-19_20dd13327292eb5208f77c3f3d6b7416'}\n::: {.cell-output-display}\n![](Spatial-Data-in-R_files/figure-html/tm1a-1.png){width=672}\n:::\n:::\n\n]\n\n---\n\n## Add graticules and legends\n\n.pull-left[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/tm2_0dd63e366868d97e3773abb389aba327'}\n\n```{.r .cell-code}\n# Group 1\ntm_shape(lnd) +\n  tm_borders(col = \"black\",lwd = 1) + \n  tm_fill(\"NAME\", legend.show = FALSE) +\n# Group 2 = Layer 2\n  tm_shape(cycle_hire_osm) + \n  tm_symbols(size = 0.2, col = \"red\") +\n  \n  tm_graticules() + #<<\n  tm_add_legend(type = \"symbol\", col = \"red\", #<<\n                title = \"Hire Cycles Here\") #<<\n```\n:::\n\n]\n\n.pull-right[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-20_2f3260cb30490e1bdbb107c5b29272a4'}\n::: {.cell-output-display}\n![](Spatial-Data-in-R_files/figure-html/tm2-1.png){width=672}\n:::\n:::\n\n]\n\n---\n\n## Add Scale and Compass to the Map\n\n.pull-left[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/tm1b_3b84205c5c294aac3eff874f84c85b1a'}\n\n```{.r .cell-code}\n# Group 1\ntm_shape(lnd) +\n  tm_borders(col = \"black\",lwd = 1) + \n  tm_fill(\"NAME\", legend.show = FALSE) +\n# Group 2 = Layer 2\n  tm_shape(cycle_hire_osm) + \n  tm_symbols(size = 0.2, col = \"red\") +\n  tm_graticules() +\n  tm_add_legend(type = \"symbol\", col = \"red\",\n                title = \"Hire Cycles Here\") +\n\n  tm_scale_bar(position=c(\"left\", \"bottom\"),#<<\n               text.size = 1) + #<<\n  tm_compass(position = c(\"right\", \"top\"), #<<\n             type = \"rose\", #<<\n             size = 2)  #<<\n```\n:::\n\n]\n\n.pull-right[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-21_53db085a301d5fa3ccbfed6d6bbcf24e'}\n::: {.cell-output-display}\n![](Spatial-Data-in-R_files/figure-html/tm1b-1.png){width=672}\n:::\n:::\n\n]\nhttps://geocompr.github.io/post/2019/tmap-color-scales/\n\n\n---\n\n## Add Credits and Layout Options\n\n.pull-left[\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/tm1c_9b07d430cbc4fa738982bad44635bd22'}\n\n```{.r .cell-code}\nmymap <- \ntm_shape(lnd) +\n  tm_borders(col = \"black\", lwd = 1) + \n  tm_fill(\"NAME\", legend.show = FALSE) +\ntm_shape(cycle_hire_osm) + \n  tm_symbols(size = 0.2, col = \"red\") +\n  tm_graticules() +\n  tm_add_legend(type = \"symbol\", col = \"red\",\n                title = \"Hire Cycles Here\") +\n  tm_scale_bar(position=c(\"left\", \"bottom\"),text.size = 1) + \n  tm_compass(position = c(\"right\", \"top\"), type = \"rose\",\n             size = 2) +\n  tm_credits(text = \"Arvind V, 2021\", #<<\n             position = c(\"left\", \"bottom\")) + #<<\ntm_layout(title = \"London Bike Share Locations\", #<<\n          title.size = 2,\n          bg.color=\"lightblue\", #<<\n\tinner.margins=c(.04,.03, .02, .01)) #<<\nmymap\n```\n:::\n\n]\n\n.pull-right[\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/unnamed-chunk-22_8bffabdb7a4f09b616df6ef84eebf862'}\n::: {.cell-output-display}\n![](Spatial-Data-in-R_files/figure-html/tm1c-1.png){width=672}\n:::\n:::\n\n]\n\n\n\n---\n\n# Saving\n\n\n::: {.cell hash='Spatial-Data-in-R_cache/html/tm8_d3945ff229ecf6893addd899473fcc12'}\n\n```{.r .cell-code}\ntmap_save(my_map, filename = \"my_map.png\", width = 300, height = 800, dpi = 300)\n```\n:::\n\n\n---\n\n# Thanks!\n\nSlides created by Arvind Venkatadri via the R packages:\n\n[**xaringan**](https://github.com/yihui/xaringan)<br>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../../site_libs/xaringanExtra-webcam-0.0.1/webcam.js\"></script>\r\n<script id=\"xaringanExtra-webcam-options\" type=\"application/json\">{\"width\":\"200\",\"height\":\"200\",\"margin\":\"1em\"}</script>\r\n<script src=\"../../../../site_libs/xaringanExtra_fit-screen-0.2.6/fit-screen.js\"></script>\r\n<link href=\"../../../../site_libs/panelset-0.2.6/panelset.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../../site_libs/panelset-0.2.6/panelset.js\"></script>\r\n<script src=\"../../../../site_libs/js-cookie-3.0.0/js.cookie.js\"></script>\r\n<script src=\"../../../../site_libs/peerjs-1.3.1/peerjs.min.js\"></script>\r\n<script src=\"../../../../site_libs/tiny.toast-1.0.0/toast.min.js\"></script>\r\n<link href=\"../../../../site_libs/xaringanExtra-broadcast-0.2.6/broadcast.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../../site_libs/xaringanExtra-broadcast-0.2.6/broadcast.js\"></script>\r\n<link href=\"../../../../site_libs/xaringanExtra-extra-styles-0.2.6/xaringanExtra-extra-styles.css\" rel=\"stylesheet\" />\r\n<link href=\"../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}