{
  "hash": "0a8948f59d34759533ed22c044ed41b6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Drawing with purrr\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# This function creates the segments of the original polygon\npolygon <- function(n) {\n  tibble(\n    x    = accumulate(1:(n-1), ~.x+cos(.y*2*pi/n), .init = 0),\n    y    = accumulate(1:(n-1), ~.x+sin(.y*2*pi/n), .init = 0),\n    xend = accumulate(2:n,     ~.x+cos(.y*2*pi/n), .init = cos(2*pi/n)),\n    yend = accumulate(2:n,     ~.x+sin(.y*2*pi/n), .init = sin(2*pi/n)))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# This function creates segments from some mid-point of the edges\nmid_points <- function(d, p, a, i, FUN = ratio_f) {\n  d %>% mutate(\n    angle=atan2(yend-y, xend-x) + a,\n    radius=FUN(i),\n    x=p*x+(1-p)*xend,\n    y=p*y+(1-p)*yend,\n    xend=x+radius*cos(angle),\n    yend=y+radius*sin(angle)) %>% \n    select(x, y, xend, yend)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# This function connect the ending points of mid-segments\ncon_points <- function(d) {\n  d %>% mutate(\n    x=xend,\n    y=yend,\n    xend=lead(x, default=first(x)),\n    yend=lead(y, default=first(y))) %>% \n    select(x, y, xend, yend)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nedges <- 3   # Number of edges of the original polygon\nniter <- 250 # Number of iterations\npond <- 0.24  # Weight to calculate the point on the middle of each edge\nstep  <- 13  # Number of times to draw mid-segments before connect ending points\nalph  <- 0.25 # transparency of curves in geom_curve\nangle <- 0.6 # angle of mid-segment with the edge\ncurv <- 0.1   # Curvature of curves\nline_color <- \"black\" # Color of curves in geom_curve\nback_color <- \"white\" # Background of the ggplot\nratio_f <- function(x) {sin(x)} # To calculate the longitude of mid-segments\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generation on the fly of the dataset\naccumulate(.f = function(old, y) {\n  if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)\n  }, 1:niter,\n.init=polygon(edges)) %>% bind_rows() -> df\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot\nggplot(df)+\n  geom_curve(aes(x=x, y=y, xend=xend, yend=yend),\n             curvature = curv,\n             color=line_color,\n             alpha=alph)+\n  coord_equal()+\n  theme(legend.position  = \"none\",\n        panel.background = element_rect(fill=back_color),\n        plot.background  = element_rect(fill=back_color),\n        axis.ticks       = element_blank(),\n        panel.grid       = element_blank(),\n        axis.title       = element_blank(),\n        axis.text        = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=2100}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}