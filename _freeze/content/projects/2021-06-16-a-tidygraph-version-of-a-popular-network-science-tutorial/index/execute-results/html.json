{
  "hash": "23f4e8a2fe4b66911c831d8ec4504a72",
  "result": {
    "markdown": "---\ntitle: A Tidygraph version of a Popular Network Science Tutorial\nauthor: Arvind Venkatadri\ndate: '2021-06-16'\nslug: a-tidygraph-version-of-a-popular-network-science-tutorial\ncategories: [R; Networks]\ntags: [tidygraph; ggraph;]\nsubtitle: ''\nsummary: 'A reworking of a Network Science tutorial by Prof. Katherine Ognyanova, using tidygraph'\nauthors: []\nlastmod: \"'r Sys.Date()'\"\nfeatured: no\n---\n\n\n## Introduction\n\nThis is an attempt to rework , using `tidygraph` and `ggraph`, much of\n[**Network Visualization with R**](https://www.kateto.net/polnet2018)\nPolnet 2018 Workshop Tutorial, Washington, DC by Prof. Katherine (Katya)\nOgnyanova.\n\nThe aim is to get a working acquaintance with both these packages and\nalso to appreciate some of the concepts in Networks. My code is by no\nmeans intended to be elegant; it merely works and there are surely many\nimprovements that people may think of!\n\nI have attempted to write code for the Sections 2:5.\n\nI have retained Prof. Ognyanova's text in all places.\n\n## CONTENTS\n\n1.  ~~Working with colors in R plots~~\n2.  Reading in the network data\n3.  Network plots in 'igraph'\n4.  Plotting two-mode networks\n5.  Plotting multiplex networks\n6.  ~~Quick example using 'network'~~\n7.  ~~Simple plot animations in R~~\n8.  ~~Interactive JavaScript networks~~\n9.  ~~Interactive and dynamic networks with ndtv-d3~~\n10. ~~Plotting networks on a geographic map~~\n\n\n\n\n\n## -------\\~\\~ DATASET 1: edgelist \\~\\~-------\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_41f299c007763bfe48acb13c2a3e0799'}\n\n```{.r .cell-code}\n# Read in the data:\nnodes <- read.csv(\"./Dataset1-Media-Example-NODES.csv\", header = T, as.is = T)\nlinks <- read.csv(\"./Dataset1-Media-Example-EDGES.csv\", header = T, as.is = T)\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_4f1af665e77be1a046bdd48a50834b78'}\n\n```{.r .cell-code}\n# Examine the data:\nhead(nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id               media media.type type.label audience.size\n1 s01            NY Times          1  Newspaper            20\n2 s02     Washington Post          1  Newspaper            25\n3 s03 Wall Street Journal          1  Newspaper            30\n4 s04           USA Today          1  Newspaper            32\n5 s05            LA Times          1  Newspaper            20\n6 s06       New York Post          1  Newspaper            50\n```\n:::\n\n```{.r .cell-code}\nhead(links)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from  to      type weight\n1  s01 s02 hyperlink     22\n2  s01 s03 hyperlink     22\n3  s01 s04 hyperlink     21\n4  s01 s15   mention     20\n5  s02 s01 hyperlink     23\n6  s02 s03 hyperlink     21\n```\n:::\n:::\n\n\n### Converting the data to an igraph object:\n\nThe `graph_from_data_frame()` function takes two data frames: 'd' and\n'vertices'. - 'd' describes the edges of the network - it should start\nwith two columns containing the source and target node IDs for each\nnetwork tie. - 'vertices' should start with a column of node IDs. It can\nbe omitted. - Any additional columns in either data frame are\ninterpreted as attributes.\n\nNOTE: ID columns need not be numbers or integers!!\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_ff3ea8ca1315fde15f8a16bd28fb8e4d'}\n\n```{.r .cell-code}\nnet <- graph_from_data_frame(d = links, vertices = nodes, directed = T)\n\n# Examine the resulting object:\nclass(net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"igraph\"\n```\n:::\n\n```{.r .cell-code}\nnet\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH 8d2aa7a DNW- 17 49 -- \n+ attr: name (v/c), media (v/c), media.type (v/n), type.label (v/c),\n| audience.size (v/n), type (e/c), weight (e/n)\n+ edges from 8d2aa7a (vertex names):\n [1] s01->s02 s01->s03 s01->s04 s01->s15 s02->s01 s02->s03 s02->s09 s02->s10\n [9] s03->s01 s03->s04 s03->s05 s03->s08 s03->s10 s03->s11 s03->s12 s04->s03\n[17] s04->s06 s04->s11 s04->s12 s04->s17 s05->s01 s05->s02 s05->s09 s05->s15\n[25] s06->s06 s06->s16 s06->s17 s07->s03 s07->s08 s07->s10 s07->s14 s08->s03\n[33] s08->s07 s08->s09 s09->s10 s10->s03 s12->s06 s12->s13 s12->s14 s13->s12\n[41] s13->s17 s14->s11 s14->s13 s15->s01 s15->s04 s15->s06 s16->s06 s16->s17\n[49] s17->s04\n```\n:::\n:::\n\n\nThe description of an igraph object starts with four letters: -D or U,\nfor a directed or undirected graph -N for a named graph (where nodes\nhave a `name` attribute) -W for a weighted graph (where edges have a\n`weight` attribute) -B for a bipartite (two-mode) graph (where nodes\nhave a `type` attribute) The two numbers that follow (17 49) refer to\nthe **number of nodes** and **edges** in the graph. The description also\nlists node & edge attributes.\n\nWe can access the nodes, edges, and their attributes:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_19b9c030cd14e6b18b91e04325b06058'}\n\n```{.r .cell-code}\nE(net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+ 49/49 edges from 8d2aa7a (vertex names):\n [1] s01->s02 s01->s03 s01->s04 s01->s15 s02->s01 s02->s03 s02->s09 s02->s10\n [9] s03->s01 s03->s04 s03->s05 s03->s08 s03->s10 s03->s11 s03->s12 s04->s03\n[17] s04->s06 s04->s11 s04->s12 s04->s17 s05->s01 s05->s02 s05->s09 s05->s15\n[25] s06->s06 s06->s16 s06->s17 s07->s03 s07->s08 s07->s10 s07->s14 s08->s03\n[33] s08->s07 s08->s09 s09->s10 s10->s03 s12->s06 s12->s13 s12->s14 s13->s12\n[41] s13->s17 s14->s11 s14->s13 s15->s01 s15->s04 s15->s06 s16->s06 s16->s17\n[49] s17->s04\n```\n:::\n\n```{.r .cell-code}\nV(net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+ 17/17 vertices, named, from 8d2aa7a:\n [1] s01 s02 s03 s04 s05 s06 s07 s08 s09 s10 s11 s12 s13 s14 s15 s16 s17\n```\n:::\n\n```{.r .cell-code}\nE(net)$type\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"hyperlink\" \"hyperlink\" \"hyperlink\" \"mention\"   \"hyperlink\" \"hyperlink\"\n [7] \"hyperlink\" \"hyperlink\" \"hyperlink\" \"hyperlink\" \"hyperlink\" \"hyperlink\"\n[13] \"mention\"   \"hyperlink\" \"hyperlink\" \"hyperlink\" \"mention\"   \"mention\"  \n[19] \"hyperlink\" \"mention\"   \"mention\"   \"hyperlink\" \"hyperlink\" \"mention\"  \n[25] \"hyperlink\" \"hyperlink\" \"mention\"   \"mention\"   \"mention\"   \"hyperlink\"\n[31] \"mention\"   \"hyperlink\" \"mention\"   \"mention\"   \"mention\"   \"hyperlink\"\n[37] \"mention\"   \"hyperlink\" \"mention\"   \"hyperlink\" \"mention\"   \"mention\"  \n[43] \"mention\"   \"hyperlink\" \"hyperlink\" \"hyperlink\" \"hyperlink\" \"mention\"  \n[49] \"hyperlink\"\n```\n:::\n\n```{.r .cell-code}\nV(net)$media\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"NY Times\"            \"Washington Post\"     \"Wall Street Journal\"\n [4] \"USA Today\"           \"LA Times\"            \"New York Post\"      \n [7] \"CNN\"                 \"MSNBC\"               \"FOX News\"           \n[10] \"ABC\"                 \"BBC\"                 \"Yahoo News\"         \n[13] \"Google News\"         \"Reuters.com\"         \"NYTimes.com\"        \n[16] \"WashingtonPost.com\"  \"AOL.com\"            \n```\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_c3dff10d07a264b80ebc47f328505092'}\n\n```{.r .cell-code}\n# Using tidygraph\ntbl_graph(nodes, links, directed = TRUE) %>% \n  activate(edges) %>% \n  select(type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 49 × 3 (active)\n   from    to type     \n  <int> <int> <chr>    \n1     1     2 hyperlink\n2     1     3 hyperlink\n3     1     4 hyperlink\n4     1    15 mention  \n5     2     1 hyperlink\n6     2     3 hyperlink\n# … with 43 more rows\n#\n# Node Data: 17 × 5\n  id    media               media.type type.label audience.size\n  <chr> <chr>                    <int> <chr>              <int>\n1 s01   NY Times                     1 Newspaper             20\n2 s02   Washington Post              1 Newspaper             25\n3 s03   Wall Street Journal          1 Newspaper             30\n# … with 14 more rows\n```\n:::\n\n```{.r .cell-code}\ntbl_graph(nodes, links, directed = TRUE) %>% \n  activate(nodes) %>% \n  select(media)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 17 × 1 (active)\n  media              \n  <chr>              \n1 NY Times           \n2 Washington Post    \n3 Wall Street Journal\n4 USA Today          \n5 LA Times           \n6 New York Post      \n# … with 11 more rows\n#\n# Edge Data: 49 × 4\n   from    to type      weight\n  <int> <int> <chr>      <int>\n1     1     2 hyperlink     22\n2     1     3 hyperlink     22\n3     1     4 hyperlink     21\n# … with 46 more rows\n```\n:::\n:::\n\n\nOr find specific nodes and edges by attribute:(that returns objects of\ntype vertex sequence / edge sequence)\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_97d077dd2f882f66af55aed2140e70d5'}\n\n```{.r .cell-code}\nV(net)[media == \"BBC\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+ 1/17 vertex, named, from 8d2aa7a:\n[1] s11\n```\n:::\n\n```{.r .cell-code}\nE(net)[type == \"mention\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+ 20/49 edges from 8d2aa7a (vertex names):\n [1] s01->s15 s03->s10 s04->s06 s04->s11 s04->s17 s05->s01 s05->s15 s06->s17\n [9] s07->s03 s07->s08 s07->s14 s08->s07 s08->s09 s09->s10 s12->s06 s12->s14\n[17] s13->s17 s14->s11 s14->s13 s16->s17\n```\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_1e7ae222c493da3f78f16e6c10134d4d'}\n\n```{.r .cell-code}\n#Using tidygraph\ntbl_graph(nodes, links, directed = TRUE) %>% \n  activate(nodes) %>% \n  filter(media == \"BBC\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 1 nodes and 0 edges\n#\n# A rooted tree\n#\n# Node Data: 1 × 5 (active)\n  id    media media.type type.label audience.size\n  <chr> <chr>      <int> <chr>              <int>\n1 s11   BBC            2 TV                    34\n#\n# Edge Data: 0 × 4\n# … with 4 variables: from <int>, to <int>, type <chr>, weight <int>\n```\n:::\n\n```{.r .cell-code}\ntbl_graph(nodes, links, directed = TRUE) %>% \n  activate(edges) %>% \n  filter(type == \"mention\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 17 nodes and 20 edges\n#\n# A directed simple graph with 3 components\n#\n# Edge Data: 20 × 4 (active)\n   from    to type    weight\n  <int> <int> <chr>    <int>\n1     1    15 mention     20\n2     3    10 mention      2\n3     4     6 mention      1\n4     4    11 mention     22\n5     4    17 mention      2\n6     5     1 mention      1\n# … with 14 more rows\n#\n# Node Data: 17 × 5\n  id    media               media.type type.label audience.size\n  <chr> <chr>                    <int> <chr>              <int>\n1 s01   NY Times                     1 Newspaper             20\n2 s02   Washington Post              1 Newspaper             25\n3 s03   Wall Street Journal          1 Newspaper             30\n# … with 14 more rows\n```\n:::\n:::\n\n\nIf you need them, you can extract an edge list or a matrix back from the\nigraph networks.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_3ef06428f404a601d73f9b035cead9f3'}\n\n```{.r .cell-code}\nas_edgelist(net, names = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1]  [,2] \n [1,] \"s01\" \"s02\"\n [2,] \"s01\" \"s03\"\n [3,] \"s01\" \"s04\"\n [4,] \"s01\" \"s15\"\n [5,] \"s02\" \"s01\"\n [6,] \"s02\" \"s03\"\n [7,] \"s02\" \"s09\"\n [8,] \"s02\" \"s10\"\n [9,] \"s03\" \"s01\"\n[10,] \"s03\" \"s04\"\n[11,] \"s03\" \"s05\"\n[12,] \"s03\" \"s08\"\n[13,] \"s03\" \"s10\"\n[14,] \"s03\" \"s11\"\n[15,] \"s03\" \"s12\"\n[16,] \"s04\" \"s03\"\n[17,] \"s04\" \"s06\"\n[18,] \"s04\" \"s11\"\n[19,] \"s04\" \"s12\"\n[20,] \"s04\" \"s17\"\n[21,] \"s05\" \"s01\"\n[22,] \"s05\" \"s02\"\n[23,] \"s05\" \"s09\"\n[24,] \"s05\" \"s15\"\n[25,] \"s06\" \"s06\"\n[26,] \"s06\" \"s16\"\n[27,] \"s06\" \"s17\"\n[28,] \"s07\" \"s03\"\n[29,] \"s07\" \"s08\"\n[30,] \"s07\" \"s10\"\n[31,] \"s07\" \"s14\"\n[32,] \"s08\" \"s03\"\n[33,] \"s08\" \"s07\"\n[34,] \"s08\" \"s09\"\n[35,] \"s09\" \"s10\"\n[36,] \"s10\" \"s03\"\n[37,] \"s12\" \"s06\"\n[38,] \"s12\" \"s13\"\n[39,] \"s12\" \"s14\"\n[40,] \"s13\" \"s12\"\n[41,] \"s13\" \"s17\"\n[42,] \"s14\" \"s11\"\n[43,] \"s14\" \"s13\"\n[44,] \"s15\" \"s01\"\n[45,] \"s15\" \"s04\"\n[46,] \"s15\" \"s06\"\n[47,] \"s16\" \"s06\"\n[48,] \"s16\" \"s17\"\n[49,] \"s17\" \"s04\"\n```\n:::\n\n```{.r .cell-code}\nas_adjacency_matrix(net, attr = \"weight\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n17 x 17 sparse Matrix of class \"dgCMatrix\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n  [[ suppressing 17 column names 's01', 's02', 's03' ... ]]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                     \ns01  . 22 22 21 .  .  .  .  .  .  .  .  .  . 20  .  .\ns02 23  . 21  . .  .  .  .  1  5  .  .  .  .  .  .  .\ns03 21  .  . 22 1  .  .  4  .  2  1  1  .  .  .  .  .\ns04  .  . 23  . .  1  .  .  .  . 22  3  .  .  .  .  2\ns05  1 21  .  . .  .  .  .  2  .  .  .  .  . 21  .  .\ns06  .  .  .  . .  1  .  .  .  .  .  .  .  .  . 21 21\ns07  .  .  1  . .  .  . 22  . 21  .  .  .  4  .  .  .\ns08  .  .  2  . .  . 21  . 23  .  .  .  .  .  .  .  .\ns09  .  .  .  . .  .  .  .  . 21  .  .  .  .  .  .  .\ns10  .  .  2  . .  .  .  .  .  .  .  .  .  .  .  .  .\ns11  .  .  .  . .  .  .  .  .  .  .  .  .  .  .  .  .\ns12  .  .  .  . .  2  .  .  .  .  .  . 22 22  .  .  .\ns13  .  .  .  . .  .  .  .  .  .  . 21  .  .  .  .  1\ns14  .  .  .  . .  .  .  .  .  .  1  . 21  .  .  .  .\ns15 22  .  .  1 .  4  .  .  .  .  .  .  .  .  .  .  .\ns16  .  .  .  . . 23  .  .  .  .  .  .  .  .  .  . 21\ns17  .  .  .  4 .  .  .  .  .  .  .  .  .  .  .  .  .\n```\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# No direct command seems available ...\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-9_a8f5d62b7095273e8da2c20e9ff4c38b'}\n\n```{.r .cell-code}\n# Or data frames describing nodes and edges:\nigraph::as_data_frame(x = net, what = \"edges\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   from  to      type weight\n1   s01 s02 hyperlink     22\n2   s01 s03 hyperlink     22\n3   s01 s04 hyperlink     21\n4   s01 s15   mention     20\n5   s02 s01 hyperlink     23\n6   s02 s03 hyperlink     21\n7   s02 s09 hyperlink      1\n8   s02 s10 hyperlink      5\n9   s03 s01 hyperlink     21\n10  s03 s04 hyperlink     22\n11  s03 s05 hyperlink      1\n12  s03 s08 hyperlink      4\n13  s03 s10   mention      2\n14  s03 s11 hyperlink      1\n15  s03 s12 hyperlink      1\n16  s04 s03 hyperlink     23\n17  s04 s06   mention      1\n18  s04 s11   mention     22\n19  s04 s12 hyperlink      3\n20  s04 s17   mention      2\n21  s05 s01   mention      1\n22  s05 s02 hyperlink     21\n23  s05 s09 hyperlink      2\n24  s05 s15   mention     21\n25  s06 s06 hyperlink      1\n26  s06 s16 hyperlink     21\n27  s06 s17   mention     21\n28  s07 s03   mention      1\n29  s07 s08   mention     22\n30  s07 s10 hyperlink     21\n31  s07 s14   mention      4\n32  s08 s03 hyperlink      2\n33  s08 s07   mention     21\n34  s08 s09   mention     23\n35  s09 s10   mention     21\n36  s10 s03 hyperlink      2\n37  s12 s06   mention      2\n38  s12 s13 hyperlink     22\n39  s12 s14   mention     22\n40  s13 s12 hyperlink     21\n41  s13 s17   mention      1\n42  s14 s11   mention      1\n43  s14 s13   mention     21\n44  s15 s01 hyperlink     22\n45  s15 s04 hyperlink      1\n46  s15 s06 hyperlink      4\n47  s16 s06 hyperlink     23\n48  s16 s17   mention     21\n49  s17 s04 hyperlink      4\n```\n:::\n\n```{.r .cell-code}\nigraph::as_data_frame(x = net, what = \"vertices\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    name               media media.type type.label audience.size\ns01  s01            NY Times          1  Newspaper            20\ns02  s02     Washington Post          1  Newspaper            25\ns03  s03 Wall Street Journal          1  Newspaper            30\ns04  s04           USA Today          1  Newspaper            32\ns05  s05            LA Times          1  Newspaper            20\ns06  s06       New York Post          1  Newspaper            50\ns07  s07                 CNN          2         TV            56\ns08  s08               MSNBC          2         TV            34\ns09  s09            FOX News          2         TV            60\ns10  s10                 ABC          2         TV            23\ns11  s11                 BBC          2         TV            34\ns12  s12          Yahoo News          3     Online            33\ns13  s13         Google News          3     Online            23\ns14  s14         Reuters.com          3     Online            12\ns15  s15         NYTimes.com          3     Online            24\ns16  s16  WashingtonPost.com          3     Online            28\ns17  s17             AOL.com          3     Online            33\n```\n:::\n\n```{.r .cell-code}\n#Using tidygraph\ntbl_graph(nodes, links, directed = TRUE) %>% \n  activate(nodes) %>% \n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 5\n   id    media               media.type type.label audience.size\n   <chr> <chr>                    <int> <chr>              <int>\n 1 s01   NY Times                     1 Newspaper             20\n 2 s02   Washington Post              1 Newspaper             25\n 3 s03   Wall Street Journal          1 Newspaper             30\n 4 s04   USA Today                    1 Newspaper             32\n 5 s05   LA Times                     1 Newspaper             20\n 6 s06   New York Post                1 Newspaper             50\n 7 s07   CNN                          2 TV                    56\n 8 s08   MSNBC                        2 TV                    34\n 9 s09   FOX News                     2 TV                    60\n10 s10   ABC                          2 TV                    23\n11 s11   BBC                          2 TV                    34\n12 s12   Yahoo News                   3 Online                33\n13 s13   Google News                  3 Online                23\n14 s14   Reuters.com                  3 Online                12\n15 s15   NYTimes.com                  3 Online                24\n16 s16   WashingtonPost.com           3 Online                28\n17 s17   AOL.com                      3 Online                33\n```\n:::\n\n```{.r .cell-code}\ntbl_graph(nodes, links, directed = TRUE)%>% \n  activate(edges) %>% \n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 49 × 4\n    from    to type      weight\n   <int> <int> <chr>      <int>\n 1     1     2 hyperlink     22\n 2     1     3 hyperlink     22\n 3     1     4 hyperlink     21\n 4     1    15 mention       20\n 5     2     1 hyperlink     23\n 6     2     3 hyperlink     21\n 7     2     9 hyperlink      1\n 8     2    10 hyperlink      5\n 9     3     1 hyperlink     21\n10     3     4 hyperlink     22\n# … with 39 more rows\n```\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-10_6e017898d03d2553839df9a769703435'}\n\n```{.r .cell-code}\n# You can also access the network matrix directly:\nnet[1,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ns01 s02 s03 s04 s05 s06 s07 s08 s09 s10 s11 s12 s13 s14 s15 s16 s17 \n  0  22  22  21   0   0   0   0   0   0   0   0   0   0  20   0   0 \n```\n:::\n\n```{.r .cell-code}\nnet[5,7]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# Does not seem possible, even with `as.matrix()`.\n# Returns tibbles only as in the code chunk above\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-11_34f4a9083bf95de9bc92d0a1a2e70a03'}\n\n```{.r .cell-code}\n# First attempt to plot the graph:\nplot(net) # not pretty!\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Removing loops from the graph:\nnet <-\n  igraph::simplify(net, remove.multiple = F, remove.loops = T)\n\n# Let's and reduce the arrow size and remove the labels:\nplot(net, edge.arrow.size = .4, vertex.label = NA)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-12_ba9b2ecefacae75780a52aff609bb2a7'}\n\n```{.r .cell-code}\n# Using tidygraph\ntbl_graph(nodes, links, directed = TRUE) %>%\n  ggraph(., layout = \"graphopt\") +\n  geom_edge_link(\n    color = \"grey\",\n    end_cap = circle(0.2, \"cm\"),\n    start_cap = circle(0.2, \"cm\"),\n    # clears an area near the node\n    \n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(3, \"mm\")\n    )\n  ) +\n  geom_node_point(size = 6, shape = 21, fill = \"orange\") +\n  geom_node_text(aes(label = id))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Removing loops from the graph:\n# From the docs:\n# convert() is a shorthand for performing both `morph` and `crystallise` along with extracting a single tbl_graph (defaults to the first). For morphs w(h)ere you know they only create a single graph, and you want to keep it, this is an easy way.\n#\ntbl_graph(nodes, links, directed = TRUE) %>%\n\n  convert(to_simple) %>%\n  ggraph(., layout = \"graphopt\") +\n  geom_edge_link(\n    color = \"grey\",\n    end_cap = circle(0.2, \"cm\"),\n    start_cap = circle(0.2, \"cm\"),\n \n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(3, \"mm\")\n    )\n  ) +\n  geom_node_point(size = 6, shape = 21, fill = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n\n## -------\\~\\~ DATASET 2: matrix --------\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-13_306c578891828b44466c19b874ba8ca8'}\n\n```{.r .cell-code}\n# Read in the data:\nnodes2 <- read.csv(\"./Dataset2-Media-User-Example-NODES.csv\", header = T, as.is = T)\nlinks2 <- read.csv(\"./Dataset2-Media-User-Example-EDGES.csv\", header = T, row.names = 1)\n\n# Examine the data:\nhead(nodes2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id   media media.type media.name audience.size\n1 s01     NYT          1  Newspaper            20\n2 s02    WaPo          1  Newspaper            25\n3 s03     WSJ          1  Newspaper            30\n4 s04    USAT          1  Newspaper            32\n5 s05 LATimes          1  Newspaper            20\n6 s06     CNN          2         TV            56\n```\n:::\n\n```{.r .cell-code}\nhead(links2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    U01 U02 U03 U04 U05 U06 U07 U08 U09 U10 U11 U12 U13 U14 U15 U16 U17 U18 U19\ns01   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\ns02   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0\ns03   0   0   0   0   0   1   1   1   1   0   0   0   0   0   0   0   0   0   0\ns04   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0   0   0\ns05   0   0   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0\ns06   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   1   0   0\n    U20\ns01   0\ns02   1\ns03   0\ns04   0\ns05   0\ns06   0\n```\n:::\n\n```{.r .cell-code}\n# links2 is a matrix for a two-mode network:\nlinks2 <- as.matrix(links2)\ndim(links2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 20\n```\n:::\n\n```{.r .cell-code}\ndim(nodes2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30  5\n```\n:::\n:::\n\n\nNote: What is a **two-mode** network? A network that as a `node$type`\nvariable and can be a `bipartite` or a `k-partite` network as a result.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-14_09138298fcdbe606adc94d47950985b6'}\n\n```{.r .cell-code}\n# Create an igraph network object from the two-mode matrix:\nnet2 <- igraph::graph_from_incidence_matrix(links2)\n\n# To transform a one-mode network matrix into an igraph object,\n# we would use graph_from_adjacency_matrix()\n\n# A built-in vertex attribute 'type' shows which mode vertices belong to.\ntable(V(net2)$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFALSE  TRUE \n   10    20 \n```\n:::\n\n```{.r .cell-code}\n# Basic igraph plot\nplot(net2,vertex.label = NA)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-15_aa5980456c0bb9cd9e8e3a43c9d59a88'}\n\n```{.r .cell-code}\n# using tidygraph\n# For all objects that are not node and edge data_frames\n# tidygraph uses `as_tbl_graph()`\n# \ngraph <- as_tbl_graph(links2)\ngraph %>% activate(nodes) %>% as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30 × 2\n   type  name \n   <lgl> <chr>\n 1 FALSE s01  \n 2 FALSE s02  \n 3 FALSE s03  \n 4 FALSE s04  \n 5 FALSE s05  \n 6 FALSE s06  \n 7 FALSE s07  \n 8 FALSE s08  \n 9 FALSE s09  \n10 FALSE s10  \n# … with 20 more rows\n```\n:::\n\n```{.r .cell-code}\ngraph %>% activate(edges) %>% as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 31 × 3\n    from    to weight\n   <int> <int>  <dbl>\n 1     1    11      1\n 2     1    12      1\n 3     1    13      1\n 4     2    14      1\n 5     2    15      1\n 6     2    30      1\n 7     3    16      1\n 8     3    17      1\n 9     3    18      1\n10     3    19      1\n# … with 21 more rows\n```\n:::\n\n```{.r .cell-code}\ngraph %>% \n  ggraph(., layout = \"graphopt\") + \n  geom_edge_link(color = \"grey\") + \n  geom_node_point(fill = \"orange\", \n                  shape = 21, size = 6, \n                  color = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-16_f850b5ce37f0bdaaa1e783068652c7d8'}\n\n```{.r .cell-code}\n# Examine the resulting object:\nclass(net2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"igraph\"\n```\n:::\n\n```{.r .cell-code}\nnet2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH 9008ce1 UN-B 30 31 -- \n+ attr: type (v/l), name (v/c)\n+ edges from 9008ce1 (vertex names):\n [1] s01--U01 s01--U02 s01--U03 s02--U04 s02--U05 s02--U20 s03--U06 s03--U07\n [9] s03--U08 s03--U09 s04--U09 s04--U10 s04--U11 s05--U11 s05--U12 s05--U13\n[17] s06--U13 s06--U14 s06--U17 s07--U14 s07--U15 s07--U16 s08--U16 s08--U17\n[25] s08--U18 s08--U19 s09--U06 s09--U19 s09--U20 s10--U01 s10--U11\n```\n:::\n:::\n\n\nNote: The remaining attributes for the nodes ( in data frame `nodes2`)\nare not (yet) a part of the graph, either with igraph or with tidygraph.\n\n# 3. Network plots in 'igraph'\n\n## ------\\~\\~ Plot parameters in igraph --------\n\nCheck out the node options (starting with 'vertex.') and the edge\noptions (starting with 'edge.').\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-17_660787acad6fa74b68923710f81674cb'}\n\n```{.r .cell-code}\n?igraph.plotting\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarting httpd help server ... done\n```\n:::\n:::\n\n\nWe can set the node & edge options in two ways - one is to specify them\nin the `plot()` function, as we are doing below.\n\n-   Plot with curved edges (edge.curved = .1) and reduce arrow size:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-18_7e98fe4e832a8cce67173b33a3517b0d'}\n\n```{.r .cell-code}\nplot(net, edge.arrow.size = .4, edge.curved = .1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\ngraph <- tbl_graph(nodes, links, directed = TRUE)\ngraph\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 17 × 5 (active)\n  id    media               media.type type.label audience.size\n  <chr> <chr>                    <int> <chr>              <int>\n1 s01   NY Times                     1 Newspaper             20\n2 s02   Washington Post              1 Newspaper             25\n3 s03   Wall Street Journal          1 Newspaper             30\n4 s04   USA Today                    1 Newspaper             32\n5 s05   LA Times                     1 Newspaper             20\n6 s06   New York Post                1 Newspaper             50\n# … with 11 more rows\n#\n# Edge Data: 49 × 4\n   from    to type      weight\n  <int> <int> <chr>      <int>\n1     1     2 hyperlink     22\n2     1     3 hyperlink     22\n3     1     4 hyperlink     21\n# … with 46 more rows\n```\n:::\n\n```{.r .cell-code}\ngraph %>% ggraph(., layout = \"graphopt\") +\n  geom_edge_arc(\n    color = \"grey\",\n    strength = 0.1,\n    end_cap = circle(.2, \"cm\"),\n\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"both\",\n      length = unit(3, \"mm\")\n    )\n  ) +\n  geom_node_point(\n    fill = \"orange\",\n    shape = 21,\n    size = 8,\n    color = \"black\"\n  ) +\n  geom_node_text(aes(label = id))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n:::\n\n\n-   Set node color to orange and the border color to hex 555555\n-   Replace the vertex label with the node names stored in \"media\"\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-19_9868563e1bd9bd69419614b6c5a50c45'}\n\n```{.r .cell-code}\nplot(\n  net,\n  edge.arrow.size = .2,\n  edge.curved = 0,\n  vertex.color = \"orange\",\n  vertex.frame.color = \"#555555\",\n  vertex.label = V(net)$media,\n  vertex.label.color = \"black\",\n  vertex.label.cex = .7\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n#graph <- tbl_graph(nodes, links, directed = TRUE)\n#graph\ngraph %>%\n  ggraph(., layout = \"gem\") +\n  geom_edge_link(\n    color = \"grey\",\n    end_cap = circle(.3, \"cm\"),\n    \n    arrow = arrow(\n      type = \"closed\",\n      ends = \"both\",\n      length = unit(1, \"mm\")\n    )\n  ) +\n  geom_node_point(\n    fill = \"orange\",\n    shape = 21,\n    size = 6,\n    color = \"#555555\"\n  ) +\n  geom_node_text(aes(label = media))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n:::\n\n\nThe second way to set attributes is to **add them** to the igraph\nobject.\n\n-   Generate colors based on media type:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-20_098b0816d78a821cfd9196f42af92687'}\n\n```{.r .cell-code}\ncolrs <- c(\"gray50\", \"tomato\", \"gold\")\nV(net)$color <- colrs[V(net)$media.type]\nplot(net)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n-   Compute node degrees (#links) and use that to set node size:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-21_d3c76375f7b572e291598f902346b195'}\n\n```{.r .cell-code}\ndeg <- igraph::degree(net, mode = \"all\")\nV(net)$size <- deg*3\n# Alternatively, we can set node size based on audience size:\nV(net)$size <- V(net)$audience.size*0.7\nV(net)$size\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 14.0 17.5 21.0 22.4 14.0 35.0 39.2 23.8 42.0 16.1 23.8 23.1 16.1  8.4 16.8\n[16] 19.6 23.1\n```\n:::\n\n```{.r .cell-code}\n# The labels are currently node IDs.\n# Setting them to NA will render no labels:\nV(net)$label.color <- \"black\"\nV(net)$label <- NA\n\n# Set edge width based on weight:\nE(net)$width <- E(net)$weight/6\n\n#change arrow size and edge color:\nE(net)$arrow.size <- .2\nE(net)$edge.color <- \"gray80\"\n\n# We can even set the network layout:\ngraph_attr(net, \"layout\") <- layout_with_lgl\nplot(net)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-22_0f1f63315eec00486aa601617ddfe3e6'}\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- tbl_graph(nodes, links, directed = TRUE)\n# graph\ngraph %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  ggraph(., layout = \"lgl\") +\n  geom_edge_link(\n    aes(width = weight),\n    color = \"grey80\",\n    end_cap = circle(.2, \"cm\"),\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(1, \"mm\")\n    )\n  ) +\n  geom_node_point(aes(fill = type.label, size = size),\n                  shape = 21,\n                  color = \"black\") +\n  scale_fill_manual(name = \"Media Type\",\n                    values = c(\"grey50\", \"gold\", \"tomato\")) +\n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range =  c(2, 16)) +\n  \n  guides(fill = guide_legend(title = \"Media Type\",\n                             override.aes = list(pch = 21, size = 4)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nWe can also override the attributes explicitly in the plot:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-23_1b527141b960933298ccfe2e6e0b8db1'}\n\n```{.r .cell-code}\nplot(net, edge.color = \"orange\", vertex.color = \"gray50\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nWe can also add a legend explaining the meaning of the colors we used:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-24_9bd217c5a24b5ae85178b941b1afbba5'}\n\n```{.r .cell-code}\nplot(net)\nlegend(x = -2.1, y = -1.1, \n       c(\"Newspaper\",\"Television\", \"Online News\"), \n       pch = 21,col = \"#777777\", \n       pt.bg = colrs, pt.cex = 2.5, bty = \"n\", ncol = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# legends are automatic with the tidygraph + ggraph flow\n```\n:::\n\n\nSometimes, especially with semantic networks, we may be interested in\nplotting only the labels of the nodes:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-25_0a85cf140c5741c64e53789a110371a1'}\n\n```{.r .cell-code}\nplot(net, vertex.shape = \"none\", vertex.label = V(net)$media,\n     vertex.label.font = 2, vertex.label.color = \"gray40\",\n     vertex.label.cex = .7, edge.color = \"gray85\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#using tidygraph\n\nggraph(net, layout = \"gem\") +\n  geom_edge_link(color = \"grey80\", width = 2,\n                 end_cap = circle(0.5,\"cm\"), \n                 start_cap = circle(0.5, \"cm\")) +\n    geom_node_text(aes(label = media))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-2.png){width=672}\n:::\n:::\n\n\nLet's color the edges of the graph based on their source node color.\nWe'll get the starting node for each edge with `ends()`.\n\nNote: Edge attribute is being set by start node.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-26_121222cb4d92145df64390fd70e90373'}\n\n```{.r .cell-code}\nedge.start <- ends(net, es = E(net), names = F)[,1]\nedge.col <- V(net)$color[edge.start] # How simple this is !!!\n# The three colors are recycled \n# \nplot(net, edge.color = edge.col, edge.curved = .4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nNOTE: The source node colour has been set using the `media.type`, which\nis a node attribute. Node attributes are not typically accessible to\nedges. So we need to build a combo data frame using `dplyr`, so that\nedges can use this node attribute. ( There may be other ways...)\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-27_652f568c1c5d2205ce7fe693810531fd'}\n\n```{.r .cell-code}\n# Using tidygraph\n# Make a \"combo\" data frame of nodes *and* edges with left_join()\n# Join by `from` so that type.label is based on from = edge.start\n\nlinks %>%\n  left_join(., nodes, by = c(\"from\" = \"id\")) %>%\n  tbl_graph(edges = ., nodes = nodes) %>%\n  \n  mutate(size = centrality_degree()) %>%\n  \n  ggraph(., layout = \"lgl\") +\n  geom_edge_arc(aes(color = type.label,\n                    width = weight),\n                strength = 0.3)  +\n  geom_node_point(aes(fill = type.label,\n                      # type.label is now available as edge attribute\n                      size = size),\n                  shape = 21,\n                  color = \"black\") +\n  scale_fill_manual(\n    name = \"Media Type\",\n    values = c(\"grey50\", \"gold\", \"tomato\"),\n    guide = \"legend\"\n  ) +\n  scale_edge_color_manual(name = \"Source Type\",\n                          values = c(\"grey80\", \"gold\", \"tomato\")) +\n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range =  c(2, 16)) +\n  # not \"limits\"!\n  guides(fill = guide_legend(override.aes = list(pch = 21,\n                                                 size = 4)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n## -------\\~\\~ Network Layouts in 'igraph' --------\n\nNetwork layouts are algorithms that return **coordinates** for each node\nin a network.\n\nLet's generate a slightly larger 100-node graph using a\n`preferential attachment` model (Barabasi-Albert).\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-28_34995c096cb64b1532a8922fb46b8d7e'}\n\n```{.r .cell-code}\nnet.bg <- sample_pa(n =  100, power =  1.2)\nV(net.bg)$size <- 8\nV(net.bg)$frame.color <- \"white\"\nV(net.bg)$color <- \"orange\"\nV(net.bg)$label <- \"\"\nE(net.bg)$arrow.mode <- 0\nplot(net.bg)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\ngraph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>%\n  ggraph(., layout = \"graphopt\") +\n  geom_edge_link(color = \"grey\") +\n  geom_node_point(color = \"orange\", size = 4) +\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-2.png){width=672}\n:::\n:::\n\n\nNow let's plot this network using the layouts available in igraph. You\ncan set the layout in the plot function:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-29_342fa87b4b7110cbafbb87f4df9e2fe2'}\n\n```{.r .cell-code}\nplot(net.bg, layout = layout_randomly)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nOr calculate the vertex coordinates in advance:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-30_d699b15b07bb218423dfa5c2d6aacf59'}\n\n```{.r .cell-code}\nl <- layout_in_circle(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = \"circle\") +\n  geom_edge_link(color = \"grey\") +\n  geom_node_point(color = \"orange\", size = 2) +\n  theme_graph() +\n  theme(aspect.ratio = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-2.png){width=672}\n:::\n:::\n\n\n`l` is simply a matrix of x,y coordinates (N x 2) for the N nodes in the\ngraph. You can generate your own:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-31_006a7f56d57ae2d4aea49d549d44e852'}\n\n```{.r .cell-code}\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                [,1]          [,2]\n  [1,]  1.000000e+00  0.000000e+00\n  [2,]  9.980267e-01  6.279052e-02\n  [3,]  9.921147e-01  1.253332e-01\n  [4,]  9.822873e-01  1.873813e-01\n  [5,]  9.685832e-01  2.486899e-01\n  [6,]  9.510565e-01  3.090170e-01\n  [7,]  9.297765e-01  3.681246e-01\n  [8,]  9.048271e-01  4.257793e-01\n  [9,]  8.763067e-01  4.817537e-01\n [10,]  8.443279e-01  5.358268e-01\n [11,]  8.090170e-01  5.877853e-01\n [12,]  7.705132e-01  6.374240e-01\n [13,]  7.289686e-01  6.845471e-01\n [14,]  6.845471e-01  7.289686e-01\n [15,]  6.374240e-01  7.705132e-01\n [16,]  5.877853e-01  8.090170e-01\n [17,]  5.358268e-01  8.443279e-01\n [18,]  4.817537e-01  8.763067e-01\n [19,]  4.257793e-01  9.048271e-01\n [20,]  3.681246e-01  9.297765e-01\n [21,]  3.090170e-01  9.510565e-01\n [22,]  2.486899e-01  9.685832e-01\n [23,]  1.873813e-01  9.822873e-01\n [24,]  1.253332e-01  9.921147e-01\n [25,]  6.279052e-02  9.980267e-01\n [26,] -1.608143e-16  1.000000e+00\n [27,] -6.279052e-02  9.980267e-01\n [28,] -1.253332e-01  9.921147e-01\n [29,] -1.873813e-01  9.822873e-01\n [30,] -2.486899e-01  9.685832e-01\n [31,] -3.090170e-01  9.510565e-01\n [32,] -3.681246e-01  9.297765e-01\n [33,] -4.257793e-01  9.048271e-01\n [34,] -4.817537e-01  8.763067e-01\n [35,] -5.358268e-01  8.443279e-01\n [36,] -5.877853e-01  8.090170e-01\n [37,] -6.374240e-01  7.705132e-01\n [38,] -6.845471e-01  7.289686e-01\n [39,] -7.289686e-01  6.845471e-01\n [40,] -7.705132e-01  6.374240e-01\n [41,] -8.090170e-01  5.877853e-01\n [42,] -8.443279e-01  5.358268e-01\n [43,] -8.763067e-01  4.817537e-01\n [44,] -9.048271e-01  4.257793e-01\n [45,] -9.297765e-01  3.681246e-01\n [46,] -9.510565e-01  3.090170e-01\n [47,] -9.685832e-01  2.486899e-01\n [48,] -9.822873e-01  1.873813e-01\n [49,] -9.921147e-01  1.253332e-01\n [50,] -9.980267e-01  6.279052e-02\n [51,] -1.000000e+00 -3.216286e-16\n [52,] -9.980267e-01 -6.279052e-02\n [53,] -9.921147e-01 -1.253332e-01\n [54,] -9.822873e-01 -1.873813e-01\n [55,] -9.685832e-01 -2.486899e-01\n [56,] -9.510565e-01 -3.090170e-01\n [57,] -9.297765e-01 -3.681246e-01\n [58,] -9.048271e-01 -4.257793e-01\n [59,] -8.763067e-01 -4.817537e-01\n [60,] -8.443279e-01 -5.358268e-01\n [61,] -8.090170e-01 -5.877853e-01\n [62,] -7.705132e-01 -6.374240e-01\n [63,] -7.289686e-01 -6.845471e-01\n [64,] -6.845471e-01 -7.289686e-01\n [65,] -6.374240e-01 -7.705132e-01\n [66,] -5.877853e-01 -8.090170e-01\n [67,] -5.358268e-01 -8.443279e-01\n [68,] -4.817537e-01 -8.763067e-01\n [69,] -4.257793e-01 -9.048271e-01\n [70,] -3.681246e-01 -9.297765e-01\n [71,] -3.090170e-01 -9.510565e-01\n [72,] -2.486899e-01 -9.685832e-01\n [73,] -1.873813e-01 -9.822873e-01\n [74,] -1.253332e-01 -9.921147e-01\n [75,] -6.279052e-02 -9.980267e-01\n [76,] -1.836910e-16 -1.000000e+00\n [77,]  6.279052e-02 -9.980267e-01\n [78,]  1.253332e-01 -9.921147e-01\n [79,]  1.873813e-01 -9.822873e-01\n [80,]  2.486899e-01 -9.685832e-01\n [81,]  3.090170e-01 -9.510565e-01\n [82,]  3.681246e-01 -9.297765e-01\n [83,]  4.257793e-01 -9.048271e-01\n [84,]  4.817537e-01 -8.763067e-01\n [85,]  5.358268e-01 -8.443279e-01\n [86,]  5.877853e-01 -8.090170e-01\n [87,]  6.374240e-01 -7.705132e-01\n [88,]  6.845471e-01 -7.289686e-01\n [89,]  7.289686e-01 -6.845471e-01\n [90,]  7.705132e-01 -6.374240e-01\n [91,]  8.090170e-01 -5.877853e-01\n [92,]  8.443279e-01 -5.358268e-01\n [93,]  8.763067e-01 -4.817537e-01\n [94,]  9.048271e-01 -4.257793e-01\n [95,]  9.297765e-01 -3.681246e-01\n [96,]  9.510565e-01 -3.090170e-01\n [97,]  9.685832e-01 -2.486899e-01\n [98,]  9.822873e-01 -1.873813e-01\n [99,]  9.921147e-01 -1.253332e-01\n[100,]  9.980267e-01 -6.279052e-02\n```\n:::\n\n```{.r .cell-code}\nl <- cbind(1:vcount(net.bg), c(1, vcount(net.bg):2))\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = l) +\n  geom_edge_link(color = \"grey\") +\n  geom_node_point(color = \"orange\", size = 2)+\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-2.png){width=672}\n:::\n:::\n\n\nThis layout is just an example and not very helpful - thankfully\n`igraph` has a number of built-in layouts, including:\n\n-   Randomly placed vertices\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-32_9668d03b63c0b000d1b8de909100eea3'}\n\n```{.r .cell-code}\nl <- layout_randomly(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_randomly(.)) + \n  geom_edge_link0(colour = \"grey\") + \n  geom_node_point(colour = \"orange\", size = 4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-2.png){width=672}\n:::\n:::\n\n\n-   Circle layout\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-33_093b50e05312ae10a857d9ced75fb96a'}\n\n```{.r .cell-code}\nl <- layout_in_circle(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_in_circle(.)) + \n  geom_edge_link0(colour = \"grey\") + \n  geom_node_point(colour = \"orange\") +\n  theme(aspect.ratio = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-2.png){width=672}\n:::\n:::\n\n\n-   3D sphere layout\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-34_35d307c044e517bef699aa9d95467230'}\n\n```{.r .cell-code}\nl <- layout_on_sphere(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_on_sphere(.)) + \n  geom_edge_link0(colour = \"grey\") + \n  geom_node_point(colour = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-2.png){width=672}\n:::\n:::\n\n\n-   The Fruchterman-Reingold force-directed algorithm: Nice but slow,\n    most often used in graphs smaller than \\~1000 vertices.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-35_136a7e67f549708fc8f2a949b2023a3c'}\n\n```{.r .cell-code}\nl <- layout_with_fr(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_with_fr(.)) + \n  geom_edge_link0(colour = \"grey\") + \n  geom_node_point(colour = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-2.png){width=672}\n:::\n:::\n\n\nYou will also notice that the F-R layout is not deterministic -\ndifferent runs will result in slightly different configurations. Saving\nthe layout in l allows us to get the exact same result multiple times.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-36_caadb22049d2e1982fe4bde11bd4edee'}\n\n```{.r .cell-code}\npar(mfrow = c(2,2), mar = c(1,1,1,1))\nplot(net.bg, layout = layout_with_fr)\nplot(net.bg, layout = layout_with_fr)\nplot(net.bg, layout = l)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\nBy default, the coordinates of the plots are rescaled to the \\[-1,1\\]\ninterval for both x and y. You can change that with the parameter\n`rescale = FALSE` and rescale your plot manually by multiplying the\ncoordinates by a scalar. You can use `norm_coords` to normalize the plot\nwith the boundaries you want. This way you can create more compact or\nspread out layout versions.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-37_ea0089de1bb6ef9d773c251b7216f300'}\n\n```{.r .cell-code}\n#Get the layout coordinates:\nl <- layout_with_fr(net.bg)\n# Normalize them so that they are in the -1, 1 interval:\nl <- norm_coords(l, ymin = -1, ymax = 1, xmin = -1, xmax = 1)\n\npar(mfrow = c(2,2), mar = c(0,0,0,0))\nplot(net.bg, rescale = F, layout = l*0.4)\nplot(net.bg, rescale = F, layout = l*0.8)\nplot(net.bg, rescale = F, layout = l*1.2)\nplot(net.bg, rescale = F, layout = l*1.6)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# Can't do this with tidygraph ( multiplying layout * scalar ), it seems\n```\n:::\n\n\nAnother popular force-directed algorithm that produces nice results for\nconnected graphs is **Kamada Kawai**. Like Fruchterman Reingold, it\nattempts to minimize the energy in a spring system.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-38_6238d2e5d72d107d4d69ade347f23eb6'}\n\n```{.r .cell-code}\nl <- layout_with_kk(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_with_kk(.)) + \n  geom_edge_link0(colour = \"grey\") + \n  geom_node_point(colour = \"orange\", size = 4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-2.png){width=672}\n:::\n:::\n\n\nThe **MDS (multidimensional scaling)** algorithm tries to place nodes\nbased on some measure of similarity or distance between them. More\nsimilar/less distant nodes are placed closer to each other. By default,\nthe measure used is based on the shortest paths between nodes in the\nnetwork. That can be changed with the `dist` parameter.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-39_d57ee9ea909723ecdd5f35b28467a084'}\n\n```{.r .cell-code}\nplot(net.bg, layout = layout_with_mds)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_with_mds(.)) + \n  geom_edge_link0(colour = \"grey\") + \n  geom_node_point(colour = \"orange\", size = 4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-2.png){width=672}\n:::\n:::\n\n\nThe LGL algorithm is for large connected graphs. Here you can specify a\n`root`- the node that will be placed in the middle of the layout.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-40_6d3dd9e92e5cb2022238eff4fc89db9e'}\n\n```{.r .cell-code}\nplot(net.bg, layout = layout_with_lgl)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_with_lgl(.)) + \n  geom_edge_link0(colour = \"grey\") + \n  geom_node_point(colour = \"orange\", size = 4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-2.png){width=672}\n:::\n:::\n\n\nBy default, igraph uses a layout called `layout_nicely` which selects an\nappropriate layout algorithm based on the properties of the graph. Check\nout all available layouts in igraph:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-41_46d2bbbfd17afed072bf5c42f7297240'}\n\n```{.r .cell-code}\n?igraph::layout_\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-42_ef1591669d67dfc67d8998ab3aec9546'}\n\n```{.r .cell-code}\nlayouts <- grep(\"^layout_\", ls(\"package:igraph\"), value = TRUE)[-1]\n\n# Remove layouts that do not apply to our graph.\nlayouts <- layouts[!grepl(\"bipartite|merge|norm|sugiyama|tree\", layouts)]\n\npar(mfrow = c(3,3), mar = c(1,1,1,1))\n\nfor (layout in layouts) {\n  print(layout)\n  l <- do.call(layout, list(net))\n  plot(net, edge.arrow.mode = 0, layout = l, main = layout) }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_as_star\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_components\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_in_circle\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_nicely\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_on_grid\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_on_sphere\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_randomly\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_with_dh\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_with_drl\"\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_with_fr\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_with_gem\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_with_graphopt\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_with_kk\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_with_lgl\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layout_with_mds\"\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-2.png){width=672}\n:::\n:::\n\n\n# -------\\~\\~ Highlighting aspects of the network --------\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-43_d27b1f7266c0682cb4ab9482094148a1'}\n\n```{.r .cell-code}\nplot(net)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\nNotice that our network plot is still not too helpful. We can identify\nthe type and size of nodes, but cannot see much about the structure\nsince the links we're examining are so dense. One way to approach this\nis to see if we can sparsify the network.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-44_c13c1987cacca680ddc71badba493935'}\n\n```{.r .cell-code}\nhist(links$weight)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmean(links$weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.40816\n```\n:::\n\n```{.r .cell-code}\nsd(links$weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.905635\n```\n:::\n:::\n\n\nThere are more sophisticated ways to extract the key edges, but for the\npurposes of this exercise we'll only keep ones that have weight higher\nthan the mean for the network. We can delete edges using\n`delete_edges(net, edges)` (or, by the way, add edges with\n`add_edges(net, edges)` )\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-45_521dca9715bd48fca7177392e5765309'}\n\n```{.r .cell-code}\ncut.off <- mean(links$weight)\nnet.sp <- delete_edges(net, E(net)[weight<cut.off])\nplot(net.sp, layout = layout_with_kk)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\ngraph <- tbl_graph(nodes, links, directed = TRUE) \ngraph\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 17 × 5 (active)\n  id    media               media.type type.label audience.size\n  <chr> <chr>                    <int> <chr>              <int>\n1 s01   NY Times                     1 Newspaper             20\n2 s02   Washington Post              1 Newspaper             25\n3 s03   Wall Street Journal          1 Newspaper             30\n4 s04   USA Today                    1 Newspaper             32\n5 s05   LA Times                     1 Newspaper             20\n6 s06   New York Post                1 Newspaper             50\n# … with 11 more rows\n#\n# Edge Data: 49 × 4\n   from    to type      weight\n  <int> <int> <chr>      <int>\n1     1     2 hyperlink     22\n2     1     3 hyperlink     22\n3     1     4 hyperlink     21\n# … with 46 more rows\n```\n:::\n\n```{.r .cell-code}\ngraph %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  \n  # New stuff here\n  activate(edges) %>% \n  filter(weight >= mean(weight)) %>% \n  \n  ggraph(., layout = \"kk\") +\n  geom_edge_link(\n    aes(width = weight),\n    color = \"grey80\",\n    end_cap = circle(.2, \"cm\"),\n    \n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(1, \"mm\")\n    )) +\n  geom_node_point(aes(fill = type.label,\n                      size = size),\n                  shape = 21,\n                  color = \"black\") +\n  scale_fill_manual(\n    name = \"Media Type\",\n    values = c(\"grey50\", \"gold\", \"tomato\"),\n    guide = \"legend\") +\n  \n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range =  c(2, 16)) +\n  # not \"limits\"!\n  guides(fill = guide_legend(override.aes = list(pch = 21,\n                                                 size = 4)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-45-2.png){width=672}\n:::\n:::\n\n\nAnother way to think about this is to plot the two tie types (hyperlinks\nand mentions) separately. We will do that in section 5 of this tutorial:\nPlotting multiplex networks.\n\n### Community Detection\n\nWe can also try to make the network map more useful by showing the\ncommunities within it.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-46_10fcb50467468b507fd9d09d593d728d'}\n\n```{.r .cell-code}\n#Community detection (by optimizing modularity over partitions):\nclp <- cluster_optimal(net)\nclass(clp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"communities\"\n```\n:::\n\n```{.r .cell-code}\nclp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH clustering optimal, groups: 4, mod: 0.6\n+ groups:\n  $`1`\n  [1] \"s01\" \"s02\" \"s03\" \"s04\" \"s05\" \"s11\" \"s15\"\n  \n  $`2`\n  [1] \"s06\" \"s16\" \"s17\"\n  \n  $`3`\n  [1] \"s07\" \"s08\" \"s09\" \"s10\"\n  \n  $`4`\n  + ... omitted several groups/vertices\n```\n:::\n\n```{.r .cell-code}\nclp$membership\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 2 3 3 3 3 1 4 4 4 1 2 2\n```\n:::\n:::\n\n\nCommunity detection returns an object of class \"communities\" which\nigraph knows how to plot:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-47_ff89e59c8f1b5611743b17709304a1c4'}\n\n```{.r .cell-code}\nplot(clp, net)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\nTo plot communities using the `tidygraph` approach, I have taken help\nfrom the `ggforce` package. This package allows drawing of hull shapes\naround specific sets of points. Here goes:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-48_6bef470e1fc6acba7a7620d66402aea0'}\n\n```{.r .cell-code}\n# Using tidygraph\n# And ggforce\nlibrary(ggforce)\ngraph <- tbl_graph(nodes, links, directed = TRUE) \ngraph <- graph %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  # new stuff\n  mutate(community = as.factor(tidygraph::group_optimal()))\n\n# Need to pre-compute layout coordinates to pass to ggforce\n# To create a hull around each community\nlayout_go <- layout_with_graphopt(graph)\n  \nggraph(graph, layout = layout_go) +\n  \n # new stuff\n # need to pass x and y coordinates of nodes to `geom_mark_hull`\n # Hull colour is `community`\n #\n  ggforce::geom_mark_hull(aes(x = layout_go[, 1],\n                     y = layout_go[, 2],\n                     color = community)) +\n  \n  geom_edge_link(\n    aes(width = weight),\n    color = \"grey80\",\n    end_cap = circle(.2, \"cm\"),\n    \n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(1, \"mm\")\n    )\n  ) +\n  geom_node_point(aes(fill = type.label,\n                      size = size),\n                  shape = 21,\n                  color = \"black\") +\n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range =  c(2, 10)) +\n  scale_fill_discrete(\"Media Type\") +\n  scale_colour_discrete(\"Community\") +\n  guides(fill = guide_legend(override.aes = list(pch = 21,\n                                                 size = 4)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\nWe can also plot the communities without relying on their built-in plot:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-49_ccf72e4cbea14cf21ddceadd8fc37a10'}\n\n```{.r .cell-code}\nV(net)$community <- clp$membership\ncolrs <-\n  adjustcolor(c(\"gray50\", \"tomato\", \"gold\", \"yellowgreen\"), alpha = .6)\nplot(net, vertex.color = colrs[V(net)$community])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# using tidygraph\n# All clustering algorithms from igraph is available in tidygraph using the group_* prefix. All of these functions return an integer vector with nodes (or edges) sharing the same integer being grouped together.\ngraph <- tbl_graph(nodes, links, directed = TRUE) \ngraph\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 17 × 5 (active)\n  id    media               media.type type.label audience.size\n  <chr> <chr>                    <int> <chr>              <int>\n1 s01   NY Times                     1 Newspaper             20\n2 s02   Washington Post              1 Newspaper             25\n3 s03   Wall Street Journal          1 Newspaper             30\n4 s04   USA Today                    1 Newspaper             32\n5 s05   LA Times                     1 Newspaper             20\n6 s06   New York Post                1 Newspaper             50\n# … with 11 more rows\n#\n# Edge Data: 49 × 4\n   from    to type      weight\n  <int> <int> <chr>      <int>\n1     1     2 hyperlink     22\n2     1     3 hyperlink     22\n3     1     4 hyperlink     21\n# … with 46 more rows\n```\n:::\n\n```{.r .cell-code}\ngraph %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  \n  # new stuff\n  mutate(community = as.factor(tidygraph::group_optimal())) %>% \n  \n  ggraph(., layout = \"graphopt\") +\n  geom_edge_link(\n    aes(width = weight),\n    color = \"grey80\",\n    end_cap = circle(.2, \"cm\"),\n    # clears an area near the node\n    \n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(1, \"mm\")\n    )) +\n  geom_node_point(aes(fill = community,\n                      size = size),\n                  shape = 21,\n                  color = \"black\") +\n  scale_fill_manual(\n    name = \"Community\",\n    values = c(\"grey50\", \"gold\", \"tomato\", \"yellowgreen\"),\n    guide = \"legend\") +\n\n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range =  c(2, 10)) +\n  guides(fill = guide_legend(override.aes = list(pch = 21,\n                                                 size = 4)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-49-2.png){width=672}\n:::\n:::\n\n\n## -------\\~\\~ Highlighting specific nodes or links --------\n\nSometimes we want to focus the visualization on a particular node or a\ngroup of nodes. Let's represent distance from the NYT:\n\n-   `distances()` calculates shortest path from vertices in 'v' to ones\n    in 'to'.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-50_4428da5bc9c0bf2e3be38e6c4f54981b'}\n\n```{.r .cell-code}\ndist.from.NYT <- distances(net, \n                           v = V(net)[media == \"NY Times\"], \n                           to = V(net), \n                           weights = NA)\n\n#Set colors to plot the distances:\noranges <- colorRampPalette(c(\"dark red\", \"gold\"))\ncol <- oranges(max(dist.from.NYT)+1)\ncol <- col[dist.from.NYT+1]\n\n# Let's have same coordinates for Nodes in both graph renderings\n# Then we can verify that the distance calculations are the same for both renderings\ncoords <- igraph::layout_nicely(net)\nplot(net, vertex.label = dist.from.NYT,\n     vertex.color = col, vertex.label.color = \"black\",\n     layout = coords)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-51_e5c603be6fd033afb7ee2332bce77bcc'}\n\n```{.r .cell-code}\n# Using tidygraph\ngraph <- tbl_graph(nodes, links, directed = TRUE)\ngraph\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 17 × 5 (active)\n  id    media               media.type type.label audience.size\n  <chr> <chr>                    <int> <chr>              <int>\n1 s01   NY Times                     1 Newspaper             20\n2 s02   Washington Post              1 Newspaper             25\n3 s03   Wall Street Journal          1 Newspaper             30\n4 s04   USA Today                    1 Newspaper             32\n5 s05   LA Times                     1 Newspaper             20\n6 s06   New York Post                1 Newspaper             50\n# … with 11 more rows\n#\n# Edge Data: 49 × 4\n   from    to type      weight\n  <int> <int> <chr>      <int>\n1     1     2 hyperlink     22\n2     1     3 hyperlink     22\n3     1     4 hyperlink     21\n# … with 46 more rows\n```\n:::\n\n```{.r .cell-code}\n# Set up NY Times as root node first\n# V(net)[media == \"NY Times\"] cannot be used since it returns an `igraph.vs` ( i.e. a list ) object. \n# We need an integer node id.\nroot_nyt <- graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rowid_to_column(var = \"node_id\") %>%\n  filter(media == \"NY Times\") %>%\n  select(node_id) %>% as_vector()\nroot_nyt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnode_id \n      1 \n```\n:::\n\n```{.r .cell-code}\ngraph %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  \n  # new stuff:\n  # breadth first search for all distances from the root node\n  mutate(order = bfs_dist(root = root_nyt)) %>%\n  \n  ggraph(., layout = coords) + # same layout\n  geom_edge_link(\n    aes(width = weight),\n    color = \"grey80\",\n    end_cap = circle(.2, \"cm\"),\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(1, \"mm\")\n    )\n  ) +\n  geom_node_point(aes(fill = order,\n                      size = size),\n                  shape = 21,\n                  color = \"black\") +\n  \n  geom_node_text(aes(label = order)) +\n  \n  scale_fill_gradient(\n    name = \"Distance from NY Times\",\n    low = \"dark red\",\n    high = \"gold\",\n    guide = \"legend\"\n  ) +\n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range =  c(2, 16)) +\n  guides(fill = guide_legend(override.aes = list(pch = 21,\n                                                 size = 4)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\nOr, a bit more readable:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-52_6bc3b121ef68b79d50ceebce3adb35e3'}\n\n```{.r .cell-code}\nplot(net, vertex.color = col, \n     vertex.label = dist.from.NYT, edge.arrow.size = .6,\n     vertex.label.color = \"white\", \n     vertex.size = V(net)$size*1.6, \n     edge.width = 2,\n     layout = norm_coords(layout_with_lgl(net))*1.4, rescale = F)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n## Path Highlighting\n\nWe can also highlight paths between the nodes in the network.\n\n-   Say here between MSNBC and the New York Post\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-53_648d2bf2a0e79112ff64b1e2145e8f80'}\n\n```{.r .cell-code}\nnews.path <- shortest_paths(net,\n                            from  =  V(net)[media == \"MSNBC\"],\n                            to   =  V(net)[media == \"New York Post\"],\n                            output  =  \"both\")  #both path nodes and edges\nnews.path.distance <- distances(net,\n                                V(net)[media == \"MSNBC\"],\n                                V(net)[media == \"New York Post\"] )\nnews.path\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$vpath\n$vpath[[1]]\n+ 4/17 vertices, named, from 8e65729:\n[1] s08 s03 s12 s06\n\n\n$epath\n$epath[[1]]\n+ 3/48 edges from 8e65729 (vertex names):\n[1] s08->s03 s03->s12 s12->s06\n\n\n$predecessors\nNULL\n\n$inbound_edges\nNULL\n```\n:::\n\n```{.r .cell-code}\nnews.path.distance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    s06\ns08   5\n```\n:::\n\n```{.r .cell-code}\n#Generate edge color variable to plot the path:\necol <- rep(\"gray80\", ecount(net))\necol[unlist(news.path$epath)] <- \"orange\"\n\n#Generate edge width variable to plot the path:\new <- rep(2, ecount(net))\new[unlist(news.path$epath)] <- 4\n\n#Generate node color variable to plot the path:\nvcol <- rep(\"gray40\", vcount(net))\nvcol[unlist(news.path$vpath)] <- \"gold\"\n\nplot(net, vertex.color = vcol, \n     edge.color = ecol,\n     edge.width = ew, \n     edge.arrow.mode = 0,\n     ## added lines\n     vertex.label = V(net)$media,\n     vertex.label.font = 2, \n     vertex.label.color = \"gray40\",\n     vertex.label.cex = .7,\n     layout = coords * 1.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-54_e5e3dfe7d998ca769f416b44139a96e1'}\n\n```{.r .cell-code}\n# Using tidygraph\n# We need to use:\n# to_shortest_path(graph, from, to, mode = \"out\", weights = NULL)\n# Let's set up `to` and `from` nodes\n#\n# V(net)[media == \"NY Times\"] cannot be used since it returns an `igraph.vs` ( i.e. a list ) object.\n# We need integer node ids for `from` and `to` in `to_shortest_path`\n\nmsnbc <- graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rowid_to_column(var = \"node_id\") %>%\n  filter(media == \"MSNBC\") %>%\n  select(node_id) %>% as_vector()\nmsnbc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnode_id \n      8 \n```\n:::\n\n```{.r .cell-code}\nnypost <- graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rowid_to_column(var = \"node_id\") %>%\n  filter(media == \"New York Post\") %>%\n  select(node_id) %>% as_vector()\nnypost\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnode_id \n      6 \n```\n:::\n\n```{.r .cell-code}\n# Let's create a fresh graph object using morph\n# However we want to merge it back with the original `graph`\n# to get an overlay plot\n#\n# # Can do this to obtain a separate graph\n# convert(to_shortest_path,from = msnbc,to = nypost)\n# However we want to merge it back with the original `graph`\n# to get an overlay plot\nmsnbc_nyp <-\n  graph %>%\n  # first mark all nodes and edges as *not* on the shortest path\n  activate(nodes) %>%\n  mutate(shortest_path_node = FALSE) %>%\n  activate(edges) %>%\n  mutate(shortest_path_edge = FALSE) %>%\n  \n  # Find shortest path between MSNBC and NY Post\n  morph(to_shortest_path, from = msnbc, to = nypost) %>%\n  \n  # Now to mark the shortest_path nodes as TRUE\n  activate(nodes) %>%\n  mutate(shortest_path_node = TRUE) %>%\n  \n  # Now to mark the shortest_path edges as TRUE\n  activate(edges) %>%\n  mutate(shortest_path_edge = TRUE) %>%\n  #\n  # Merge back into main graph; Still saving it as a `msnbc_nyp`\n  unmorph()\nmsnbc_nyp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 49 × 5 (active)\n   from    to type      weight shortest_path_edge\n  <int> <int> <chr>      <int> <lgl>             \n1     1     2 hyperlink     22 FALSE             \n2     1     3 hyperlink     22 FALSE             \n3     1     4 hyperlink     21 FALSE             \n4     1    15 mention       20 FALSE             \n5     2     1 hyperlink     23 FALSE             \n6     2     3 hyperlink     21 FALSE             \n# … with 43 more rows\n#\n# Node Data: 17 × 6\n  id    media               media.type type.label audience.size shortest_path_n…\n  <chr> <chr>                    <int> <chr>              <int> <lgl>           \n1 s01   NY Times                     1 Newspaper             20 FALSE           \n2 s02   Washington Post              1 Newspaper             25 FALSE           \n3 s03   Wall Street Journal          1 Newspaper             30 TRUE            \n# … with 14 more rows\n```\n:::\n\n```{.r .cell-code}\nmsnbc_nyp %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  ggraph(layout = coords) +\n  #geom_edge_link0(colour = \"grey\") +\n  geom_edge_link0(aes(colour = shortest_path_edge,\n                      width = shortest_path_edge)) +\n  \n  geom_node_point(aes(size = size,\n                      fill = shortest_path_node), shape = 21) +\n  geom_node_text(aes(label = media)) +\n  \n  scale_size_continuous(\"Degree\", range =  c(2, 16)) +\n  scale_fill_manual(\"Shortest Path\",\n                    values = c(\"grey\", \"gold\")) +\n  \n  scale_edge_width_manual(values = c(1, 4)) +\n  \n  scale_edge_colour_manual(values = c(\"grey\", \"orange\")) +\n  guides(\n    fill = guide_legend(override.aes = list(pch = 21,\n                                            size = 6)),\n    edge_colour = \"none\",\n    edge_width = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n-   Highlight the edges going into or out of a vertex, for instance the\n    WSJ. For a single node, use `incident()`, for multiple nodes use\n    `incident_edges()`\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-55_75a78ff099632966f4bb93f2af5fdc5f'}\n\n```{.r .cell-code}\ninc.edges <-\n  incident(net, V(net)[media == \"Wall Street Journal\"], mode = \"all\")\n\n#Set colors to plot the selected edges.\necol <- rep(\"gray80\", ecount(net))\necol[inc.edges] <- \"orange\"\nvcol <- rep(\"grey40\", vcount(net))\nvcol[V(net)$media == \"Wall Street Journal\"] <- \"gold\"\nplot(\n  net,\n  vertex.color = vcol,\n  edge.color = ecol,\n  edge.width = 2,\n  layout = coords\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-56_04e2303a37cef6b63dbb276510ccdb50'}\n\n```{.r .cell-code}\n# Using tidygraph\nwsj <- graph %>% \n  activate(nodes) %>% \n  as_tibble() %>% \n  rowid_to_column(var = \"node_id\") %>% \n  filter(media == \"Wall Street Journal\") %>% \n  select(node_id) %>% as_vector()\n\ngraph %>% \n  activate(nodes) %>% \n  mutate(wsj_adjacent = node_is_adjacent(to = wsj, mode = \"all\", \n                                         include_to = TRUE),\n         size = centrality_degree()) %>% \n  mutate(WSJ = if_else(media == \"Wall Street Journal\", TRUE, FALSE)) %>% \n  activate(edges) %>% \n  mutate(wsj_links = edge_is_incident(wsj)) %>% \n  \n  ggraph(., layout = coords) +\n  geom_edge_link0(aes(colour = wsj_links), width = 2) + \n  \n  geom_node_point(aes(fill = WSJ, \n                      size = size),shape = 21) +\n  \n  geom_node_text(aes(label = media), repel = TRUE) + \n  \n  scale_fill_manual(\"WSJ Neighbours\", \n                      values = c(\"grey\", \"gold\"), \n                      guide = guide_legend(override.aes = \n                                             list(pch = 21, \n                                                  size = 5))) + \n  scale_edge_colour_manual(\"WSJ Links\", \n                      values = c(\"grey\", \"orange\")) + \n  scale_size(\"Degree\", range = c( 2, 16)) +\n  ggtitle(label = \"Highlighting WSJ Neighbours and Links\") +\n  guides(shape = \"none\", fill = \"none\" #, colour = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n## Highlight Neighbours\n\nOr we can highlight the immediate neighbors of a vertex, say WSJ. The\n`neighbors` function finds all nodes one step out from the focal actor.\nTo find the neighbors for multiple nodes, use `adjacent_vertices()`. To\nfind node neighborhoods going more than one step out, use function\n`ego()` with parameter `order` set to the number of steps out to go from\nthe focal node(s).\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-57_c2952b40a78d66c2f02bff881ddf73ff'}\n\n```{.r .cell-code}\nneigh.nodes <- neighbors(net, V(net)[media == \"Wall Street Journal\"], mode = \"out\")\n\n# Set colors to plot the neighbors:\nvcol[neigh.nodes] <- \"#ff9d00\"\nplot(net, vertex.color = vcol)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-58_decfe4507434796d6b8ca4c7daa1d2eb'}\n\n```{.r .cell-code}\n# Using tidygraph\nwsj <- graph %>% \n  activate(nodes) %>% \n  as_tibble() %>% \n  rowid_to_column(var = \"node_id\") %>% \n  filter(media == \"Wall Street Journal\") %>% \n  select(node_id) %>% as_vector()\n\ngraph %>% \n  activate(nodes) %>% \n  mutate(wsj_adjacent = node_is_adjacent(to = wsj, mode = \"all\", \n  # remove WSJ from the list!\n  # highlight only the neighbours\n  \n                                         include_to = FALSE),\n         size = centrality_degree()) %>% \n  mutate(WSJ = if_else(media == \"Wall Street Journal\", TRUE, FALSE)) %>% \n  activate(edges) %>% \n  mutate(wsj_links = edge_is_incident(wsj)) %>% \n  \n  ggraph(., layout = coords) +\n  geom_edge_link0(aes(colour = wsj_links), width = 2) + \n  \n  geom_node_point(aes(fill = wsj_adjacent, \n                      size = size),shape = 21) +\n  \n  geom_node_text(aes(label = media), repel = TRUE) + \n  \n  scale_fill_manual(\"WSJ Neighbours\", \n                      values = c(\"grey\", \"gold\"), \n                      guide = guide_legend(override.aes = \n                                             list(pch = 21, \n                                                  size = 5))) + \n  scale_edge_colour_manual(\"WSJ Links\", \n                      values = c(\"grey\", \"orange\")) + \n  scale_size(\"Degree\", range = c( 2, 16)) +\n  ggtitle(label = \"Highlighting WSJ Neighbours and Links\") +\n  guides(shape = \"none\", fill = \"none\" #, colour = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\nAnother way to draw attention to a group of nodes: (This is generally\nnot recommended since, depending on layout, nodes that are not 'marked'\ncan accidentally get placed on top of the mark)\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-59_dc3911d035022372f04259363abaef45'}\n\n```{.r .cell-code}\nplot(net, mark.groups = c(1,4,5,8), mark.col = \"#C5E5E7\", mark.border = NA)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Mark multiple groups:\nplot(net, mark.groups = list(c(1,4,5,8), c(15:17)),\n          mark.col = c(\"#C5E5E7\",\"#ECD89A\"), mark.border = NA)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-59-2.png){width=672}\n:::\n:::\n\n\n## -------\\~\\~ Interactive plotting with 'tkplot' --------\n\nR and igraph offer interactive plotting capabilities (mostly helpful for\nsmall networks)\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-60_152ad19d67487c2c444a9d27033a965d'}\n\n```{.r .cell-code}\ntkid <- tkplot(net) #tkid is the id of the tkplot\n\nl <- tkplot.getcoords(tkid) # grab the coordinates from tkplot\nplot(net, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n\n## -------\\~\\~ Other ways to represent a network --------\n\nOne reminder that there are other ways to represent a network:\n\n-   Heatmap of the network matrix:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-61_6c6bc88330875d3d0541eeb186683ac3'}\n\n```{.r .cell-code}\nnetm <- as_adjacency_matrix(net, attr = \"weight\", sparse = F)\ncolnames(netm) <- V(net)$media\nrownames(netm) <- V(net)$media\n\npalf <- colorRampPalette(c(\"gold\", \"dark orange\"))\n\n# The Rowv & Colv parameters turn dendrograms on and off\nheatmap(netm[,17:1], Rowv  =  NA, Colv  =  NA, col  =  palf(20),\n        scale = \"none\", margins = c(10,10) )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\n-   Degree distribution\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-62_020c57db55a99ad83e6d34527469183c'}\n\n```{.r .cell-code}\ndeg.dist <- degree_distribution(net, cumulative = T, mode = \"all\")\n# degree is available in `sna` too\nplot(x = 0:max(igraph::degree(net)), y = 1-deg.dist, pch = 19, cex = 1.4, col = \"orange\", xlab = \"Degree\", ylab = \"Cumulative Frequency\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using Tidygraph\n# https://stackoverflow.com/questions/18356860/cumulative-histogram-with-ggplot2\ngraph %>% \n  activate(nodes) %>% \n  mutate(degree = centrality_degree(mode = \"all\")) %>% \n  as_tibble() %>% \n  ggplot(aes(x = degree, y = stat(count))) +\n  # geom_histogram(aes(y = cumsum(..count..)), binwidth = 1) + \n  stat_bin(aes(y = cumsum(..count..)),\n                binwidth = 1,# Ta-Da !!\n                geom =\"point\",color =\"orange\", size = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-62-2.png){width=672}\n:::\n:::\n\n\n## 4. Plotting two-mode networks\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-63_9dff950f8cc9780919590a1c95455f95'}\n\n```{.r .cell-code}\nhead(nodes2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id   media media.type media.name audience.size\n1 s01     NYT          1  Newspaper            20\n2 s02    WaPo          1  Newspaper            25\n3 s03     WSJ          1  Newspaper            30\n4 s04    USAT          1  Newspaper            32\n5 s05 LATimes          1  Newspaper            20\n6 s06     CNN          2         TV            56\n```\n:::\n\n```{.r .cell-code}\nhead(links2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    U01 U02 U03 U04 U05 U06 U07 U08 U09 U10 U11 U12 U13 U14 U15 U16 U17 U18 U19\ns01   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\ns02   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0\ns03   0   0   0   0   0   1   1   1   1   0   0   0   0   0   0   0   0   0   0\ns04   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0   0   0\ns05   0   0   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0\ns06   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   1   0   0\n    U20\ns01   0\ns02   1\ns03   0\ns04   0\ns05   0\ns06   0\n```\n:::\n\n```{.r .cell-code}\nnet2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH 9008ce1 UN-B 30 31 -- \n+ attr: type (v/l), name (v/c)\n+ edges from 9008ce1 (vertex names):\n [1] s01--U01 s01--U02 s01--U03 s02--U04 s02--U05 s02--U20 s03--U06 s03--U07\n [9] s03--U08 s03--U09 s04--U09 s04--U10 s04--U11 s05--U11 s05--U12 s05--U13\n[17] s06--U13 s06--U14 s06--U17 s07--U14 s07--U15 s07--U16 s08--U16 s08--U17\n[25] s08--U18 s08--U19 s09--U06 s09--U19 s09--U20 s10--U01 s10--U11\n```\n:::\n\n```{.r .cell-code}\nplot(net2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n\nThis time we will make nodes look different based on their type. Media\noutlets are blue squares, audience nodes are orange circles:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-64_04ecf6fc3f380a6c8e7a38a585679547'}\n\n```{.r .cell-code}\nV(net2)$color <- c(\"steel blue\", \"orange\")[V(net2)$type+1]\nV(net2)$shape <- c(\"square\", \"circle\")[V(net2)$type+1]\n\n# Media outlets will have name labels, audience members will not:\nV(net2)$label <- \"\"\nV(net2)$label[V(net2)$type == F] <- nodes2$media[V(net2)$type == F]\nV(net2)$label.cex = .6\nV(net2)$label.font = 2\n\nplot(net2, vertex.label.color = \"white\", vertex.size = (2-V(net2)$type)*8)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-65_d04b352b13e9bdf6197bf1b294008520'}\n\n```{.r .cell-code}\n# Using tidygraph\nas_tbl_graph(x = links2, directed = TRUE) %>%\n  activate(nodes) %>%\n  left_join(nodes2, by = c(\"name\" = \"id\")) %>%\n  ggraph(layout = \"nicely\") +\n  geom_edge_link0() +\n  geom_node_point(aes(shape = type, fill = type, size = type)) +\n  geom_node_text(aes(label = if_else(type, \"\", media)), colour = \"white\", size = 3) +\n  \n  scale_shape_manual(\n    \"Type\",\n    values = c(22, 21),\n    labels = c(\"Media\", \"Persons\"),\n    guide = guide_legend(override.aes = list(size = 6))\n  ) +\n  \n  scale_fill_manual(\n    \"Type\",\n    values = c(\"dodgerblue\", \"orange\"),\n    labels = c(\"Media\", \"Persons\")\n  ) +\n  \n  scale_size_manual(values = c(10, 4), guide = \"none\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\n`igraph` has a built-in bipartite layout, though it's not the most\nhelpful:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-66_1a721b03a695b9adde4c52a1ca2c0dfc'}\n\n```{.r .cell-code}\nplot(net2, vertex.label = NA, vertex.size = 7, layout = layout_as_bipartite)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# using tidygraph\nas_tbl_graph(x = links2, directed = TRUE) %>%\n  activate(nodes) %>%\n  left_join(nodes2, by = c(\"name\" = \"id\")) %>%\n  ggraph(., layout = \"igraph\", algorithm = \"bipartite\") +\n  geom_edge_link0() +\n  geom_node_point(aes(shape = type, fill = type, size = type)) +\n  geom_node_text(aes(label = if_else(type, \"\", media)), colour = \"white\", size = 3) +\n  \n  scale_shape_manual(\n    \"Type\",\n    values = c(22, 21),\n    labels = c(\"Media\", \"Persons\"),\n    guide = guide_legend(override.aes = list(size = 6))\n  ) +\n  \n  scale_fill_manual(\n    \"Type\",\n    values = c(\"dodgerblue\", \"orange\"),\n    labels = c(\"Media\", \"Persons\")\n  ) +\n  \n  scale_size_manual(values = c(10, 4), guide = \"none\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-66-2.png){width=672}\n:::\n:::\n\n\n-   Using text as nodes:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-67_50dea571e2e70d9d8fbd223db9c69872'}\n\n```{.r .cell-code}\npar(mar = c(0,0,0,0))\nplot(net2, vertex.shape = \"none\", vertex.label = nodes2$media,\n     vertex.label.color = V(net2)$color, vertex.label.font = 2,\n     vertex.label.cex = .95, edge.color = \"gray70\",  edge.width = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\nas_tbl_graph(x = links2, directed = TRUE) %>%\n  activate(nodes) %>%\n  left_join(nodes2, by = c(\"name\" = \"id\")) %>%\n  ggraph(layout = \"nicely\") +\n  geom_edge_link(end_cap = circle(.4,\"cm\"), \n                 start_cap = circle(0.4, \"cm\")) +\n  # geom_node>point(aes(shape = type, fill = type, size = type)) +\n  geom_node_text(aes(label= media, colour = type), size = 4) +\n  \n  scale_shape_manual(\n    \"Type\",\n    values = c(22, 21),\n    labels = c(\"Media\", \"Persons\"),\n    guide = guide_legend(override.aes = list(size = 4))\n  ) +\n  \n  scale_fill_manual(\n    \"Type\",\n    values = c(\"dodgerblue\", \"orange\"),\n    labels = c(\"Media\", \"Persons\")\n  ) +\n  \n  scale_size_manual(values = c(10, 4), guide = \"none\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-67-2.png){width=672}\n:::\n:::\n\n\n-   Using images as nodes You will need the 'png' package to do this:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-68_9526a74ef8ce7e9b01135956df0ffa8e'}\n\n```{.r .cell-code}\n# install.packages(\"png\")\nlibrary(\"png\")\n\nimg.1 <- readPNG(\"./images/news.png\")\nimg.2 <- readPNG(\"./images/user.png\")\n\nV(net2)$raster <- list(img.1, img.2)[V(net2)$type+1]\n\npar(mar = c(3,3,3,3))\n\nplot(net2, vertex.shape = \"raster\", vertex.label = NA,\n     vertex.size = 16, vertex.size2 = 16, edge.width = 2)\n\n\n# By the way, you can also add any image you want to any plot. For example, many #network graphs could be improved by a photo of a puppy carrying a basket full of kittens.\nimg.3 <- readPNG(\"./images/puppy.png\")\nrasterImage(img.3,  xleft = -1.7, xright = 0, ybottom = -1.2, ytop = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# The numbers after the image are coordinates for the plot.\n# The limits of your plotting area are given in par()$usr\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-69_7946d3ad4c889375edf6804eab374fb3'}\n\n```{.r .cell-code}\n# Using ~~tidygraph~~ visNetwork\n# See this cheatsheet:\n# system.file(\"fontAwesome/Font_Awesome_Cheatsheet.pdf\", package = \"visNetwork\")\nlibrary(visNetwork)\n\nas_tbl_graph(x = links2, directed = TRUE) %>%\n  activate(nodes) %>%\n  left_join(nodes2, by = c(\"name\" = \"id\")) %>% \n  \n  # visNetwork needs a \"group\" variable for grouping...\n  mutate(group = as.character(type)) %>% \n  visIgraph(.) %>% \n  visGroups(groupname = \"FALSE\",shape = \"icon\", \n            icon = list(code = \"f26c\", size = 75, color = \"orange\")) %>% \n  visGroups(groupname = \"TRUE\",shape = \"icon\", \n            icon = list(code = \"f007\", size = 75)) %>% \n  addFontAwesome()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-7365c0e31c602faa4645\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7365c0e31c602faa4645\">{\"x\":{\"nodes\":{\"id\":[\"s01\",\"s02\",\"s03\",\"s04\",\"s05\",\"s06\",\"s07\",\"s08\",\"s09\",\"s10\",\"U01\",\"U02\",\"U03\",\"U04\",\"U05\",\"U06\",\"U07\",\"U08\",\"U09\",\"U10\",\"U11\",\"U12\",\"U13\",\"U14\",\"U15\",\"U16\",\"U17\",\"U18\",\"U19\",\"U20\"],\"type\":[false,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"media\":[\"NYT\",\"WaPo\",\"WSJ\",\"USAT\",\"LATimes\",\"CNN\",\"MSNBC\",\"FOX \",\"ABC\",\"BBC\",\"John\",\"Mary\",\"Paul\",\"Ted\",\"Tom\",\"Kate\",\"Ed\",\"Anna\",\"Dan\",\"Nancy\",\"Sandra\",\"Ronda\",\"Sheila\",\"Jim\",\"Jill\",\"Jo\",\"Brian\",\"Jason\",\"Lisa\",\"Dave\"],\"media.type\":[1,1,1,1,1,2,2,2,2,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"media.name\":[\"Newspaper\",\"Newspaper\",\"Newspaper\",\"Newspaper\",\"Newspaper\",\"TV\",\"TV\",\"TV\",\"TV\",\"TV\",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"audience.size\":[20,25,30,32,20,56,34,60,23,34,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"group\":[\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\"],\"label\":[\"s01\",\"s02\",\"s03\",\"s04\",\"s05\",\"s06\",\"s07\",\"s08\",\"s09\",\"s10\",\"U01\",\"U02\",\"U03\",\"U04\",\"U05\",\"U06\",\"U07\",\"U08\",\"U09\",\"U10\",\"U11\",\"U12\",\"U13\",\"U14\",\"U15\",\"U16\",\"U17\",\"U18\",\"U19\",\"U20\"],\"x\":[-0.866618414351358,0.852827292000127,0.349374701366662,-0.103726463729829,-0.463083392969077,-0.386799280191402,-0.414251551096209,-0.0478027201907705,0.448846405623579,-0.549673238952431,-0.715942785983297,-1,-0.908468626927088,1,0.934617772877568,0.421526144731539,0.43795446642066,0.495610831675751,0.133158036187985,-0.0594010210949086,-0.371858854797756,-0.596916553232496,-0.445119747127929,-0.446216596245728,-0.516127215490021,-0.23222362578858,-0.220025674906454,-0.0178826467706494,0.209830187437779,0.662104048510376],\"y\":[-0.856451707533748,0.871891044018408,0.0845204673849764,-0.236809982974463,-0.0727373013055161,0.420405646314536,0.778827064659728,0.702215012225584,0.595642323505448,-0.504530705427207,-0.690856688708264,-0.918548364691779,-1,0.896846502756263,1,0.340896776323288,-0.0344923627714656,0.0665150845834825,-0.0898311057342541,-0.371022778632787,-0.295599297286601,-0.103863518399502,0.174654377385528,0.600464006821882,0.901441285160305,0.77983112252351,0.559482111582943,0.84741202561301,0.6672453407444,0.741494285122438]},\"edges\":{\"from\":[\"s01\",\"s01\",\"s01\",\"s02\",\"s02\",\"s02\",\"s03\",\"s03\",\"s03\",\"s03\",\"s04\",\"s04\",\"s04\",\"s05\",\"s05\",\"s05\",\"s06\",\"s06\",\"s06\",\"s07\",\"s07\",\"s07\",\"s08\",\"s08\",\"s08\",\"s08\",\"s09\",\"s09\",\"s09\",\"s10\",\"s10\"],\"to\":[\"U01\",\"U02\",\"U03\",\"U04\",\"U05\",\"U20\",\"U06\",\"U07\",\"U08\",\"U09\",\"U09\",\"U10\",\"U11\",\"U11\",\"U12\",\"U13\",\"U13\",\"U14\",\"U17\",\"U14\",\"U15\",\"U16\",\"U16\",\"U17\",\"U18\",\"U19\",\"U06\",\"U19\",\"U20\",\"U01\",\"U11\"],\"weight\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false,\"arrows\":\"to\"},\"physics\":{\"stabilization\":false},\"groups\":{\"FALSE\":{\"shape\":\"icon\",\"icon\":{\"code\":\"f26c\",\"size\":75,\"color\":\"orange\"}},\"useDefaultGroups\":true,\"TRUE\":{\"shape\":\"icon\",\"icon\":{\"code\":\"f007\",\"size\":75,\"color\":\"#2B7CE9\"}}}},\"groups\":[\"FALSE\",\"TRUE\"],\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false},\"byselection\":{\"enabled\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"iconsRedraw\":true},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nWe can also generate and plot **bipartite projections** for the\n**two-mode network** : (co-memberships are easy to calculate by\nmultiplying the network matrix by its transposed matrix, or using\nigraph's `bipartite.projection` function)\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-70_549985d59e7165fe2518446cd562f212'}\n\n```{.r .cell-code}\nnet2.bp <- bipartite.projection(net2)\n\n#We can calculate the projections manually as well:\nas_incidence_matrix(net2)  %*% t(as_incidence_matrix(net2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    s01 s02 s03 s04 s05 s06 s07 s08 s09 s10\ns01   3   0   0   0   0   0   0   0   0   1\ns02   0   3   0   0   0   0   0   0   1   0\ns03   0   0   4   1   0   0   0   0   1   0\ns04   0   0   1   3   1   0   0   0   0   1\ns05   0   0   0   1   3   1   0   0   0   1\ns06   0   0   0   0   1   3   1   1   0   0\ns07   0   0   0   0   0   1   3   1   0   0\ns08   0   0   0   0   0   1   1   4   1   0\ns09   0   1   1   0   0   0   0   1   3   0\ns10   1   0   0   1   1   0   0   0   0   2\n```\n:::\n\n```{.r .cell-code}\nt(as_incidence_matrix(net2)) %*%   as_incidence_matrix(net2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in rm(list = cmd, envir = .tkplot.env): object 'tkp.1' not found\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n    U01 U02 U03 U04 U05 U06 U07 U08 U09 U10 U11 U12 U13 U14 U15 U16 U17 U18 U19\nU01   2   1   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0\nU02   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\nU03   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\nU04   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0\nU05   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0\nU06   0   0   0   0   0   2   1   1   1   0   0   0   0   0   0   0   0   0   1\nU07   0   0   0   0   0   1   1   1   1   0   0   0   0   0   0   0   0   0   0\nU08   0   0   0   0   0   1   1   1   1   0   0   0   0   0   0   0   0   0   0\nU09   0   0   0   0   0   1   1   1   2   1   1   0   0   0   0   0   0   0   0\nU10   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0   0   0\nU11   1   0   0   0   0   0   0   0   1   1   3   1   1   0   0   0   0   0   0\nU12   0   0   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0\nU13   0   0   0   0   0   0   0   0   0   0   1   1   2   1   0   0   1   0   0\nU14   0   0   0   0   0   0   0   0   0   0   0   0   1   2   1   1   1   0   0\nU15   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   1   0   0   0\nU16   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   2   1   1   1\nU17   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   1   2   1   1\nU18   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   1   1\nU19   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   1   1   2\nU20   0   0   0   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   1\n    U20\nU01   0\nU02   0\nU03   0\nU04   1\nU05   1\nU06   1\nU07   0\nU08   0\nU09   0\nU10   0\nU11   0\nU12   0\nU13   0\nU14   0\nU15   0\nU16   0\nU17   0\nU18   0\nU19   1\nU20   2\n```\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 2))\n\nplot(\n  net2.bp$proj1,\n  vertex.label.color = \"black\",\n  vertex.label.dist = 2,\n  vertex.label = nodes2$media[!is.na(nodes2$media.type)]\n)\n\nplot(\n  net2.bp$proj2,\n  vertex.label.color = \"black\",\n  vertex.label.dist = 2,\n  vertex.label = nodes2$media[is.na(nodes2$media.type)]\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-71_064b309fd0017c9e7140b52f7c9e6933'}\n\n```{.r .cell-code}\n# Using tidygraph\n# Calculate projections and add attributes/labels\nproj1 <-\n  as_incidence_matrix(net2)  %*% t(as_incidence_matrix(net2)) %>%\n  as_tbl_graph() %>%\n  activate(nodes) %>%\n  left_join(., nodes2, by = c(\"name\" = \"id\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in (is.null(rownames(x)) && is.null(colnames(x))) || colnames(x) == :\n'length(x) = 10 > 1' in coercion to 'logical(1)'\n```\n:::\n\n```{.r .cell-code}\nproj2 <-\n  t(as_incidence_matrix(net2)) %*%   as_incidence_matrix(net2) %>% as_tbl_graph() %>%\n  activate(nodes) %>%\n  left_join(., nodes2, by = c(\"name\" = \"id\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in (is.null(rownames(x)) && is.null(colnames(x))) || colnames(x) == :\n'length(x) = 20 > 1' in coercion to 'logical(1)'\n```\n:::\n\n```{.r .cell-code}\np1 <- proj1 %>%\n  ggraph(layout = \"graphopt\") +\n  geom_edge_link0() +\n  geom_node_point(size = 6, colour = \"orange\") +\n  geom_node_text(aes(label = media), repel = TRUE)\n\np2 <- proj2 %>%\n  ggraph(layout = \"graphopt\") +\n  geom_edge_link0() +\n  geom_node_point(\n    aes(colour = media.type),\n    size = 6,\n    shape  = 15,\n    colour = \"dodgerblue\"\n  ) +\n  geom_node_text(aes(label = media), repel = TRUE)\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\n## 5. Plotting multiplex networks\n\nIn some cases, the networks we want to plot are **multigraphs**: they\ncan have multiple edges connecting the same two nodes. A related\nconcept, **multiplex networks**, contain multiple types of ties -- e.g.\nfriendship, romantic, and work relationships between individuals.\n\nIn our example network, we also have two tie types: hyperlinks and\nmentions. One thing we can do is plot each type of tie separately:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-72_a10ad36d6468c4f9a64e624bae4556d7'}\n\n```{.r .cell-code}\nE(net)$width <- 2\nplot(\n  net,\n  edge.color = c(\"dark red\", \"slategrey\")[(E(net)$type == \"hyperlink\") +\n                                            1],\n  vertex.color = \"gray40\",\n  layout = layout_in_circle,\n  edge.curved = .3\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Another way to delete edges using the minus operator:\nnet.m <- net - E(net)[E(net)$type == \"hyperlink\"]\nnet.h <- net - E(net)[E(net)$type == \"mention\"]\n\n#Plot the two links separately:\npar(mfrow = c(1, 2))\n\nplot(net.h,\n     vertex.color = \"orange\",\n     layout = layout_with_fr,\n     main = \"Tie: Hyperlink\")\nplot(net.m,\n     vertex.color = \"lightsteelblue2\",\n     layout = layout_with_fr,\n     main = \"Tie: Mention\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-72-2.png){width=672}\n:::\n:::\n\n\n-   Make sure the nodes stay in the same place in both plots:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-73_cc2d1723362a49b5ef23bde05b8c5132'}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2), mar = c(1, 1, 4, 1))\n\nl <- layout_with_fr(net)\nplot(net.h,\n     vertex.color = \"orange\",\n     layout = l,\n     main = \"Tie: Hyperlink\")\nplot(net.m,\n     vertex.color = \"lightsteelblue2\",\n     layout = l,\n     main = \"Tie: Mention\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-74_1d44473a89d184729618e7b1d9b7997c'}\n\n```{.r .cell-code}\n#Using tidygraph\n\nlayout <- layout_in_circle(net)\np1 <- tbl_graph(nodes, links, directed = TRUE) %>% \n  activate(nodes) %>% \n  mutate(size = centrality_degree()) %>% \n  activate(edges) %>% \n  filter(type == \"hyperlink\") %>% \n  \n  # reusing the earlier computed layout\n  ggraph(layout = layout) +\n  geom_edge_arc(strength = 0.05) +\n  geom_node_point(aes(size = size), shape = 21, \n                  fill = \"orange\") +\n  scale_size(range = c(2, 12)) + \n  labs(title = \"Tie: Hyperlink\") + \n  theme(aspect.ratio = 1,,\n        legend.position = \"bottom\")\n\np2 <- tbl_graph(nodes, links, directed = TRUE) %>% \n  activate(nodes) %>% \n  mutate(size = centrality_degree()) %>% \n  activate(edges) %>% \n  filter(type == \"mention\") %>% \n   # reusing the earlier computed layout\n  ggraph(layout = layout) +\n  geom_edge_arc(strength = 0.05) +\n  geom_node_point(aes(size = size), shape = 21, \n                  fill = \"lightsteelblue2\") +\n  scale_size(range = c(2, 12)) + \n  labs(title = \"Tie: Mention\") + \n  theme(aspect.ratio = 1, legend.position = \"bottom\")\n\nwrap_plots(p1, p2,guides = \"collect\") & \n  # note this \"pipe\" for patchwork!\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\nIn our example network, we don't have **node dyads** connected by\nmultiple types of connections (we never have both a 'hyperlink' and a\n'mention' tie between the same two news outlets) -- however that could\nhappen.\n\nNote: See the edges between `s03` and `s10`...these are in opposite\ndirections. So no dyads.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-75_f6d6176767f3c375862722236cc7d98d'}\n\n```{.r .cell-code}\nlayout <- layout_in_circle(net)\ntbl_graph(nodes, links, directed = TRUE) %>%  \n  activate(nodes) %>% \n  mutate(size = centrality_degree()) %>% \n\n  # reusing the earlier computed layout\n  ggraph(layout = layout) +\n  geom_edge_arc(strength = 0.05, aes(colour = type)) +\n  geom_node_point(aes(size = size), shape = 21, \n                  fill = \"orange\") +\n  geom_node_text(aes(label = id), repel = TRUE) +\n  scale_size(range = c(2, 12)) + \n  labs(title = \"Tie: Hyperlink\") + \n  theme(aspect.ratio = 1,,\n        legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\nOne challenge in visualizing multiplex networks is that multiple edges\nbetween the same two nodes may get plotted on top of each other in a way\nthat makes them impossible to distinguish. For example, let us generate\na simple multiplex network with two nodes and three ties between them:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-76_f9b593ceaef36b7d634fb17940e4db21'}\n\n```{.r .cell-code}\nmultigtr <- graph(edges = c(1, 2, 1, 2, 1, 2), n = 2)\n\nl <- layout_with_kk(multigtr)\n\n# Let's just plot the graph:\nplot(\n  multigtr,\n  vertex.color = \"lightsteelblue\",\n  vertex.frame.color = \"white\",\n  vertex.size = 40,\n  vertex.shape = \"circle\",\n  vertex.label = NA,\n  edge.color = c(\"gold\", \"tomato\", \"yellowgreen\"),\n  edge.width = 10,\n  edge.arrow.size = 5,\n  edge.curved = 0.1,\n  layout = l\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\nmultigtr %>% \n  as_tbl_graph() %>% \n  activate(edges) %>% \n  mutate(edge_col = c(\"gold\", \"tomato\", \"yellowgreen\")) %>% \nggraph(., layout = l) +\n  geom_edge_arc(strength = 0.1, aes(colour = edge_col)) + \n  geom_node_point(size = 4, colour = \"lightsteelblue\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-76-2.png){width=672}\n:::\n:::\n\n\nBecause all edges in the graph have the same curvature, they are drawn\nover each other so that we only see the last one. What we can do is\nassign each edge a different curvature. One useful function in 'igraph'\ncalled `curve_multiple()` can help us here. For a graph G,\n`curve.multiple(G)` will generate a curvature for each edge that\nmaximizes visibility.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-77_2a9a6c465d1fa1c044f93c853bd4ba2d'}\n\n```{.r .cell-code}\nplot(\n  multigtr,\n  vertex.color = \"lightsteelblue\",\n  vertex.frame.color = \"white\",\n  vertex.size = 40,\n  vertex.shape = \"circle\",\n  vertex.label = NA,\n  edge.color = c(\"gold\", \"tomato\", \"yellowgreen\"),\n  edge.width = 10,\n  edge.arrow.size = 5,\n  edge.curved = curve_multiple(multigtr),\n  layout = l\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-78_4221c1cc55a119b7876bea4f97141bd1'}\n\n```{.r .cell-code}\nmultigtr %>% \n  as_tbl_graph() %>% \n  activate(edges) %>% \n  mutate(edge_col = c(\"gold\", \"tomato\", \"yellowgreen\")) %>% \nggraph(., layout = l) +\n  geom_edge_fan(strength = 0.1, aes(colour = edge_col),width = 2) + \n  geom_node_point(size = 4, colour = \"lightsteelblue\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-78-1.png){width=672}\n:::\n:::\n\n\nAnd that is the end of this reoworked tutorial! Hope you enjoyed it and\nfound it useful!!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\r\n<link href=\"../../../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../site_libs/vis-9.1.0/vis-network.min.js\"></script>\r\n<script src=\"../../../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\r\n<link href=\"../../../site_libs/font-awesome-4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}