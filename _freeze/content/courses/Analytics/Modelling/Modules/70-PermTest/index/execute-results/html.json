{
  "hash": "93876122496a487efece0ed69e212889",
  "result": {
    "markdown": "---\ntitle: 'Permutation Tests'\nauthor: \"Arvind Venkatadri\"\nabstract: \"Generating Parallel Worlds\"\ndate: 28/Nov/2022\ndate-modified: \"2023-03-28\"\norder: 70\nimage: preview.jpg\nimage-alt: \"Photo by Pixabay: https://www.pexels.com/photo/white-and-yellow-playing-cards-39018/\"\ncategories:\n- Permutation\n- Monte Carlo Simulation\n- Random Number Generation\n- Null Distributions\n---\n\n\n![](preview.jpg){fig-alt=\"\\\"Photo by Pixabay: https://www.pexels.com/photo/white-and-yellow-playing-cards-39018/\\\"\"\nfig-align=\"center\" width=\"400\"}\n\n\n\n\n\n## Introduction\n\nWe saw from the diagram created by Allen Downey that *there is only one\ntest*! We will now use this philosophy to develop a technique that\nallows us to mechanize several *Statistical Models* in that way, with\nnearly identical code.\n\nWe will use two packages in R, `mosaic` and the relatively new `infer`\npackage, to develop our intuition for what are called **permutation**\nbased statistical tests.\n\n## Hypothesis Testing using Permutation\n\nFrom Reference #1:\n\n> Hypothesis testing can be thought of as a 4-step process:\n>\n> 1.  State the null and alternative hypotheses.\n>\n> 2.  Compute a test statistic.\n>\n> 3.  Determine the p-value.\n>\n> 4.  Draw a conclusion.\n>\n>     In a traditional introductory statistics course, once this general\n>     framework has been mastered, the main work is in **applying the\n>     correct formula** to compute the standard test statistics in step\n>     2 and using a table or computer to **determine the p-value** based\n>     on the known (usually approximate) **theoretical distribution of\n>     the test statistic** under the null hypothesis.\n>\n>     In a **simulation-based approach**, steps 2 and 3 change. In Step\n>     2, it is no longer required that the test statistic be normalized\n>     to conform with a known, named distribution. Instead, natural test\n>     statistics, like the difference between two sample means $y1 âˆ’ y2$\n>     can be used.\n>\n>     In Step 3, we use **randomization to approximate the sampling\n>     distribution of the test statistic**. Our lady tasting tea example\n>     demonstrates how this can be done from first principles. More\n>     typically, we will use randomization **to create new simulated\n>     data sets** ( \"*Parallel Worlds*\") that are like our original data\n>     in some ways, but make the null hypothesis true. For each\n>     simulated data set, we calculate our test statistic, just as we\n>     did for the original sample. Together, this collection of test\n>     statistics computed from the simulated samples constitute our\n>     randomization distribution.\n>\n>     When creating a randomization distribution, we will attempt to\n>     satisfy 3 guiding principles.\n>\n> 5.  Be consistent with the null hypothesis. We need to **simulate a\n>     world** in which the null hypothesis is true. If we don't do this,\n>     we won't be testing our null hypothesis.\n>\n> 6.  Use the data in the **original sample**. The original data should\n>     shed light on some aspects of the distribution that are not\n>     determined by null hypothesis. For example, a null hypothesis\n>     about a mean doesn't tell us about the shape of the population\n>     distribution, but the data give us some indication.\n>\n> 7.  Reflect the way the original data were collected.\n\nFrom Chihara and Hesterberg:\n\n> This is the core idea of statistical significance or classical\n> hypothesis testing -- to calculate how often pure random chance would\n> give an effect as large as that observed in the data, in the absence\n> of any real effect. If that probability is small enough, we conclude\n> that the data provide convincing evidence of a real effect.\n\n### Permutations tests using mosaic::`shuffle()`\n\nThe `mosaic` package provides the `shuffle()` function as a synonym for\n`sample()`. When used without additional arguments, this will permute\nits first argument.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_9334999225b8239395188edf06f2633b'}\n\n```{.r .cell-code}\n# library(mosaic)\nshuffle(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  5  3  2  9  6 10  4  8  1  7\n```\n:::\n:::\n\n\nApplying shuffle() to an *explanatory variable* in a model allows us to\ntest the null hypothesis that the explanatory variable has, in fact, no\nexplanatory power. This idea can be used to test\n\n-   the equivalence of two or more means,\n-   the equivalence of two or more proportions,\n-   whether a regression parameter is 0. (Correlations between two\n    variables)\n\nWe will now see examples of each of these models using Permutations.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}