{
  "hash": "b7f0f7c7d88e298a1ff3bae6c276dcb0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"\\U0001F355 Parts of a Whole\"\nsubtitle: \"Parts of a Whole\"\nauthor: \"Arvind V.\"\ndate: 25/Nov/2022\ndate-modified: \"2024-05-07\"\norder: 60\nabstract: \"Slices, Portions, Counts, and Aggregates of Data\"\nimage: preview.jpg\nimage-alt: image from rawpixels.com\ncategories:\n  - Pie Charts\n  - Fan Charts\n  - Donut Charts\n  - Grouping\n  - Stacking\n  - Circular Bar Charts\n  - Dot Plots\n  - Mosaic Charts\n  - Parliament Charts\n  - Waffle Charts\nbibliography: \n  - grateful-refs.bib\ncitation: true\n---\n\n\n## {{< iconify noto-v1 package >}} Setting up the Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(mosaic)\nlibrary(ggformula)\nlibrary(plotrix) # Fan, Pyramid Chart\nlibrary(ggparliament) # Parliament Chart\nlibrary(ggpol) # Parliament, Arc-Bar and other interesting charts\nlibrary(data.tree) # Many plots related to heirarchical data\n# install.packages(\"waffle\", repos = \"https://cinc.rud.is\")\nlibrary(waffle)\nlibrary(tidygraph) # Trees, Dendros, and Circle Packings\nlibrary(ggraph) # Trees, Dendros, and Circle Packings\nlibrary(echarts4r) # Interactive Charts\n\nlibrary(patchwork) # Arrange your plots\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## {{< iconify fxemoji japanesesymbolforbeginner >}} What Graphs will we see today?\n\nThere are a good few charts available to depict things that constitute\nother bigger things. We will discuss a few of these: Pie, Fan, and\nDonuts; Waffle and Parliament charts; Trees, Dendrograms, and Circle\nPackings. (The last three visuals we will explore along with\n`network diagrams` in a later module.)\n\n## {{< iconify noto folding-hand-fan >}} Pies and Fans\n\nSo let us start with \"eating humble pie\": discussing a Pie chart first.\n\nA `pie chart` is a circle divided into sectors that each represent a\nproportion of the whole. It is often used to show percentage, where the\nsum of the sectors equals 100%.\n\nThe problem is that humans are pretty bad at reading angles. This\nubiquitous chart is much vilified in the industry and `bar charts` that\nwe have seen earlier, are viewed as better options. On the other hand,\npie charts are ubiquitous in business circles, and are very much\naccepted! Do also read this spirited defense of pie charts here.\n<https://speakingppt.com/why-tufte-is-flat-out-wrong-about-pie-charts/>\n\nAnd we will also see that there is an attractive, and similar-looking\nalternative, called a `fan chart` which we will explore here.\n\n::: {.panel-tabset .nav-pills style=\"background: whitesmoke;\"}\n\n### Using Base R\n\nBase R has a simple `pie` command that does the job. Let's create some\ntoy data first:\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\npie_data <- tibble(\n  sales = c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12), \n  \n  # Labels MUST be character entries for `pie` to work\n  labels = c(\"Blueberry\",\"Cherry\",\"Apple\",\"Boston Cream\",\n             \"Other\",\"Vanilla Cream\")\n  )\npie_data\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"sales\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"labels\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"0.12\",\"2\":\"Blueberry\"},{\"1\":\"0.30\",\"2\":\"Cherry\"},{\"1\":\"0.26\",\"2\":\"Apple\"},{\"1\":\"0.16\",\"2\":\"Boston Cream\"},{\"1\":\"0.04\",\"2\":\"Other\"},{\"1\":\"0.12\",\"2\":\"Vanilla Cream\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\npie(\n  x = pie_data$sales,\n  labels = pie_data$labels, # Character Vector is a MUST\n\n  # Pie is within a square of 1 X 1 units\n  # Reduce radius if needed to see labels properly\n  radius = 0.95,\n  \n  init.angle = 90, # First slice starts at 12 o'clock position\n  \n  # Change the default colours. Comment this and see what happens. \n  col =  grDevices::hcl.colors(palette = \"Plasma\", n = 6)\n  )\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n### Using ggformula\n\nWe create a bar chart or a column chart as appropriate, with bars filled by category. The `width` parameter is set to `1` so that the bars touch. The bars have a **fixed** width along the x-axis; the height of the bar varies based on the number we wish to show. \nThen the `coord_polar(theta = \"y\")` converts the bar plot into a pie. \n\n\n::: {.cell layout-nrow=\"2\" layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\n# Using gf_col since we have a count/value column already\npie_data %>%\n  gf_col(sales ~ 1, fill = ~ labels, width = 1) \n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code}\npie_data %>%\n  gf_col(sales ~ 1, fill = ~ labels, width = 1)  %>%\n  gf_refine(coord_polar(theta = \"y\"))\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-5-2.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code}\n# Using gf_bar since we don't have ready made counts\ngf_bar(data = mpg,\n       ~ 1,\n       fill = ~ drv,\n       color = \"black\", # border for the bars/slices\n       width =  1)\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-5-3.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code}\ngf_bar(data = mpg,\n       ~ 0.5,\n       fill = ~ drv,\n       color = \"black\", # border for the bars/slices\n       width =  1) %>%\n  gf_theme(theme_minimal()) %>%\n  gf_theme(theme(axis.line.y = element_blank(),\n                 axis.text.y = element_blank(),\n                 axis.title.y = element_blank())) %>%\n  gf_refine(coord_polar(theta = \"y\"))\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-5-4.png){fig-align='center' width=2100}\n:::\n:::\n\n\n### Using echarts4r\n\nHere is a basic interactive pie chart with`echarts4r`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npie_data <- tibble(\n  sales = c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12), \n\n  labels = c(\"Blueberry\",\"Cherry\",\"Apple\",\"Boston Cream\",\"Other\",\n             \"Vanilla Cream\"))\npie_data %>% \n  e_charts(x = labels) %>% \n  e_pie(serie = sales, clockwise = TRUE, \n        startAngle = 90) %>% \n  e_legend(list(orient = \"vertical\",\n                      left = \"right\")) %>% \n  e_tooltip()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"echarts4r html-widget html-fill-item\" id=\"htmlwidget-b994ed32a3c9027350f2\" style=\"width:100%;height:500px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b994ed32a3c9027350f2\">{\"x\":{\"theme\":\"\",\"tl\":false,\"draw\":true,\"renderer\":\"canvas\",\"events\":[],\"buttons\":[],\"opts\":{\"legend\":{\"data\":[\"Blueberry\",\"Cherry\",\"Apple\",\"Boston Cream\",\"Other\",\"Vanilla Cream\"],\"show\":{\"orient\":\"vertical\",\"left\":\"right\"},\"type\":\"plain\"},\"series\":[{\"name\":\"sales\",\"type\":\"pie\",\"clockwise\":true,\"startAngle\":90,\"data\":[{\"value\":0.12,\"name\":\"Blueberry\"},{\"value\":0.3,\"name\":\"Cherry\"},{\"value\":0.26,\"name\":\"Apple\"},{\"value\":0.16,\"name\":\"Boston Cream\"},{\"value\":0.04,\"name\":\"Other\"},{\"value\":0.12,\"name\":\"Vanilla Cream\"}]}],\"tooltip\":{\"trigger\":\"item\"}},\"dispose\":true},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nWe can add more bells and whistles to the humble-pie chart, and make a\nNightingale `rosechart` out of it:\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\npie_data <- tibble(\n  sales = c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12), \n\n  labels = c(\"Blueberry\",\"Cherry\",\"Apple\",\"Boston Cream\",\"Other\",\n             \"Vanilla Cream\"))\npie_data %>% \n  e_charts(x = labels) %>% \n  e_pie(serie = sales, clockwise = TRUE, \n        startAngle = 90, \n        roseType = \"area\") %>% # try \"radius\"\n  \n  # Lets move the legend\n  e_legend(left = \"right\", orient = \"vertical\") %>% \n  e_tooltip()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"echarts4r html-widget html-fill-item\" id=\"htmlwidget-aa1f0ec8d1d72b1a0d0b\" style=\"width:100%;height:500px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-aa1f0ec8d1d72b1a0d0b\">{\"x\":{\"theme\":\"\",\"tl\":false,\"draw\":true,\"renderer\":\"canvas\",\"events\":[],\"buttons\":[],\"opts\":{\"legend\":{\"data\":[\"Blueberry\",\"Cherry\",\"Apple\",\"Boston Cream\",\"Other\",\"Vanilla Cream\"],\"show\":true,\"type\":\"plain\",\"left\":\"right\",\"orient\":\"vertical\"},\"series\":[{\"name\":\"sales\",\"type\":\"pie\",\"clockwise\":true,\"startAngle\":90,\"roseType\":\"area\",\"data\":[{\"value\":0.12,\"name\":\"Blueberry\"},{\"value\":0.3,\"name\":\"Cherry\"},{\"value\":0.26,\"name\":\"Apple\"},{\"value\":0.16,\"name\":\"Boston Cream\"},{\"value\":0.04,\"name\":\"Other\"},{\"value\":0.12,\"name\":\"Vanilla Cream\"}]}],\"tooltip\":{\"trigger\":\"item\"}},\"dispose\":true},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n\n```{.r .cell-code}\npie_data %>% \n  e_charts(x = labels) %>% \n  e_pie(serie = sales, clockwise = TRUE, \n        startAngle = 90, \n        roseType = \"radius\") %>% \n  \n  # Lets move the legend\n  e_legend(left = \"right\", orient = \"vertical\") %>% \n  e_tooltip()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"echarts4r html-widget html-fill-item\" id=\"htmlwidget-ef47916c5aaac7957ee7\" style=\"width:100%;height:500px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ef47916c5aaac7957ee7\">{\"x\":{\"theme\":\"\",\"tl\":false,\"draw\":true,\"renderer\":\"canvas\",\"events\":[],\"buttons\":[],\"opts\":{\"legend\":{\"data\":[\"Blueberry\",\"Cherry\",\"Apple\",\"Boston Cream\",\"Other\",\"Vanilla Cream\"],\"show\":true,\"type\":\"plain\",\"left\":\"right\",\"orient\":\"vertical\"},\"series\":[{\"name\":\"sales\",\"type\":\"pie\",\"clockwise\":true,\"startAngle\":90,\"roseType\":\"radius\",\"data\":[{\"value\":0.12,\"name\":\"Blueberry\"},{\"value\":0.3,\"name\":\"Cherry\"},{\"value\":0.26,\"name\":\"Apple\"},{\"value\":0.16,\"name\":\"Boston Cream\"},{\"value\":0.04,\"name\":\"Other\"},{\"value\":0.12,\"name\":\"Vanilla Cream\"}]}],\"tooltip\":{\"trigger\":\"item\"}},\"dispose\":true},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nFor more information and customization look at\n<https://echarts.apache.org/en/option.html#series-pie>\n:::\n\n### The `fan` Plot\n\nThe `fan plot` (from the `plotrix` package) displays numerical values as\narcs of **overlapping sectors**. This allows for more effective\ncomparison:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplotrix::fan.plot(\n  x = pie_data$sales,\n  labels = pie_data$labels,\n  \n  col = grDevices::hcl.colors(palette = \"Plasma\", n = 6),\n  shrink = 0.03,\n  # How much to shrink each successive sector\n\n  label.radius = 1.15,\n  main = \"Fan Plot of Ice Cream Flavours\",\n  # ticks = 360,\n  # if we want tick marks on the circumference\n  \n  max.span = pi\n)\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\nThere is no fan plot possible with `echarts4r`, as far as I know.\n\n### The `Donut` Chart\n\nThe `donut` chart suffers from the same defects as the pie, so should be\nused with discretion. The `donut` chart is essentially a `gf_rect` from\n`ggformula`, plotted on a **polar coordinate** set of of axes:\n\n::: {.panel-tabset .nav-pills style=\"background: whitesmoke;\"}\n\n#### Using ggformula\n\nLet us make some toy data:\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\n# Data\ndf <- tibble(group = LETTERS[1:3],\n                 value = c(25, 20, 35))\n\ndf <-\n  df %>% \n  dplyr::mutate(fraction = value / sum(value), # percentages\n    ymax = cumsum(fraction), # cumulative percentages\n    ymin = lag(ymax, 1, default = 0),\n    # bottom edge of each\n    label = paste0(group, \"\\n value: \", value),\n    labelPosition = (ymax + ymin) / 2 # labels midway on arcs\n  )\n\ndf\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"group\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"value\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fraction\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ymax\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ymin\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"label\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"labelPosition\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"A\",\"2\":\"25\",\"3\":\"0.3125\",\"4\":\"0.3125\",\"5\":\"0.0000\",\"6\":\"A\\\\n value: 25\",\"7\":\"0.15625\"},{\"1\":\"B\",\"2\":\"20\",\"3\":\"0.2500\",\"4\":\"0.5625\",\"5\":\"0.3125\",\"6\":\"B\\\\n value: 20\",\"7\":\"0.43750\"},{\"1\":\"C\",\"2\":\"35\",\"3\":\"0.4375\",\"4\":\"1.0000\",\"5\":\"0.5625\",\"6\":\"C\\\\n value: 35\",\"7\":\"0.78125\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ndf %>%  \n  # gf_rect() formula: ymin + ymax ~ xmin + xmax\n  # Bars with varying thickness (y) proportional to data\n  # Fixed length x (2 to 4)\n  gf_rect(ymin + ymax ~ 2 + 4,\n          fill = ~ group, colour = \"black\") %>%\n  \n  gf_label(labelPosition ~ 3.5, \n           label = ~ label,\n           size = 4) %>%\n\n# When switching to polar coords:\n# x maps to radius\n# y maps to angle theta\n# so we create a \"hole\" in the radius, in x \n  gf_refine(coord_polar(theta = \"y\", \n                        direction = 1)) %>% \n            # Up to here will give us a pie chart\n  \n  # Now to create the hole\n  # try to play with the \"0\"\n  # Recall x = [2,4]\n  gf_refine(xlim(c(-2, 5))) %>% \n\n  \n  gf_theme(theme = theme_void()) %>% \n  gf_theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/donut-chart-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n#### Using echarts4r\n\nThe `donut` chart is simply a variant of the pie chart in `echarts4r`:\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- tibble(group = LETTERS[1:3],\n                 value = c(25, 20, 35))\n\ndf <-\n  df %>% \n  dplyr::mutate(fraction = value / sum(value), # percentages\n    ymax = cumsum(fraction), # cumulative percentages\n    ymin = lag(ymax, 1, default = 0),\n    # bottom edge of each\n    label = paste0(group, \"\\n value: \", value),\n    labelPosition = (ymax + ymin) / 2 # labels midway on arcs\n  )\ndf\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"group\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"value\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fraction\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ymax\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ymin\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"label\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"labelPosition\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"A\",\"2\":\"25\",\"3\":\"0.3125\",\"4\":\"0.3125\",\"5\":\"0.0000\",\"6\":\"A\\\\n value: 25\",\"7\":\"0.15625\"},{\"1\":\"B\",\"2\":\"20\",\"3\":\"0.2500\",\"4\":\"0.5625\",\"5\":\"0.3125\",\"6\":\"B\\\\n value: 20\",\"7\":\"0.43750\"},{\"1\":\"C\",\"2\":\"35\",\"3\":\"0.4375\",\"4\":\"1.0000\",\"5\":\"0.5625\",\"6\":\"C\\\\n value: 35\",\"7\":\"0.78125\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ndf %>% \n  e_charts(x = group, width = 400) %>% \n  e_pie(serie = value, \n        clockwise = TRUE, \n        startAngle = 90,\n        \n        radius = c(\"50%\", \"70%\")\n        ) %>% \n  \n  e_legend(left = \"right\", orient = \"vertical\") %>% \n  e_tooltip()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-64c1bd2a739be7afe721\" style=\"width:400px;height:500px;\" class=\"echarts4r html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-64c1bd2a739be7afe721\">{\"x\":{\"theme\":\"\",\"tl\":false,\"draw\":true,\"renderer\":\"canvas\",\"events\":[],\"buttons\":[],\"opts\":{\"legend\":{\"data\":[\"A\",\"B\",\"C\"],\"show\":true,\"type\":\"plain\",\"left\":\"right\",\"orient\":\"vertical\"},\"series\":[{\"name\":\"value\",\"type\":\"pie\",\"clockwise\":true,\"startAngle\":90,\"radius\":[\"50%\",\"70%\"],\"data\":[{\"value\":25,\"name\":\"A\"},{\"value\":20,\"name\":\"B\"},{\"value\":35,\"name\":\"C\"}]}],\"tooltip\":{\"trigger\":\"item\"}},\"dispose\":true},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n:::\n\n## {{< iconify noto waffle >}} Waffle Charts\n\nWaffle charts are often called \"square pie charts\" !\n\nHere we will need to step outside of `ggformula` and get into `ggplot`\nitself momentarily. (Always remember that `ggformula` is a simplified\nand intuitive method that runs on **top** of `ggplot`.) We will use the\n`waffle` package.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# install.packages(\"waffle\", repos = \"https://cinc.rud.is\")\nlibrary(waffle)\n\n# Data\ndf <- tibble(group = LETTERS[1:3],\n                 value = c(25, 20, 35))\ndf\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"group\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"value\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"A\",\"2\":\"25\"},{\"1\":\"B\",\"2\":\"20\"},{\"1\":\"C\",\"2\":\"35\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# Waffle plot\n# Using ggplot, sadly not yet ggformula\nggplot(df, aes(fill = group, values = value)) +\n  geom_waffle(\n    n_rows = 8,\n    size = 0.33,\n    colour = \"white\",\n    na.rm = TRUE\n  ) +\n  scale_fill_manual(\n    name = NULL,\n    values = c(\"#BA182A\", \"#FF8288\", \"#FFDBDD\"),\n    labels = c(\"A\", \"B\", \"C\")\n  ) +\n  coord_equal() +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/label- using-waffle warning- false-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## {{< iconify fa6-solid people-roof >}} Parliament Charts\n\nThe package `ggpol` offers an interesting visualization in the shape of\na array of \"seats\" in a parliament. (There is also a package called\n`ggparliament` which in my opinion is a bit cumbersome, having a two\nstep procedure to convert data into \"parliament form\" etc. )\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- tibble(group = LETTERS[1:3],\n                 value = c(25, 20, 35))\n\n# Parliament Plot\nggplot(df) +\n  ggpol::geom_parliament(aes(seats = value, \n                             fill = group),\n                         r0 = 2, # inner radius\n                         r1 = 4 # Outer radius\n  ) + \n  scale_fill_manual(name = NULL,\n                    values = c(\"#BA182A\", \"#FF8288\", \"#FFDBDD\"),\n                    labels = c(\"A\", \"B\", \"C\")) +\n  coord_equal() +\n  theme_void() \n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/using-ggpol-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Trees, Dendrograms, and Circle Packings\n\nThere are still more esoteric plots to explore, if you are hell-bent on\nstartling people ! There is an R package called `ggraph`, that can do\nthese charts, and many more:\n\n> ggraph is an extension of [`ggplot2`](https://ggplot2.tidyverse.org/)\n> aimed at supporting relational data structures such as networks,\n> graphs, and trees. While it builds upon the foundation of `ggplot2`\n> and its API it comes with its own self-contained set of geoms, facets,\n> etc., as well as adding the concept of *layouts* to the grammar.\n\nWe will explore these charts when we examine `network diagrams.` For\nnow, we can quickly see what these diagrams look like. Although the\nR-code is visible to you, it may not make sense at the moment!\n\n### {{< iconify mdi family-tree >}} Dendrograms\n\nFrom the [R Graph Gallery\nWebsite](http://r-graph-gallery.com/index.html) :\n\n> Dendrograms can be built from:\n>\n> -   [Hierarchical\n>     dataset](http://r-graph-gallery.com/dendrogram.html#hiera): think\n>     about a CEO managing team leads managing employees and so on.\n>\n> -   [Clustering\n>     result](http://r-graph-gallery.com/dendrogram.html#clust):\n>     clustering divides a set of individuals in group according to\n>     their similarity. Its result can be visualized as a tree.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# create an edge list data frame giving the hierarchical structure of your individuals\nd1 <- tibble(from = \"origin\", to = paste(\"group\", seq(1,5), sep = \"\"))\nd2 <- tibble(from = rep(d1$to, each=5), to = paste(\"subgroup\", seq(1,25), sep=\"_\"))\nedges <- rbind(d1, d2)\nedges\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"from\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"to\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"origin\",\"2\":\"group1\"},{\"1\":\"origin\",\"2\":\"group2\"},{\"1\":\"origin\",\"2\":\"group3\"},{\"1\":\"origin\",\"2\":\"group4\"},{\"1\":\"origin\",\"2\":\"group5\"},{\"1\":\"group1\",\"2\":\"subgroup_1\"},{\"1\":\"group1\",\"2\":\"subgroup_2\"},{\"1\":\"group1\",\"2\":\"subgroup_3\"},{\"1\":\"group1\",\"2\":\"subgroup_4\"},{\"1\":\"group1\",\"2\":\"subgroup_5\"},{\"1\":\"group2\",\"2\":\"subgroup_6\"},{\"1\":\"group2\",\"2\":\"subgroup_7\"},{\"1\":\"group2\",\"2\":\"subgroup_8\"},{\"1\":\"group2\",\"2\":\"subgroup_9\"},{\"1\":\"group2\",\"2\":\"subgroup_10\"},{\"1\":\"group3\",\"2\":\"subgroup_11\"},{\"1\":\"group3\",\"2\":\"subgroup_12\"},{\"1\":\"group3\",\"2\":\"subgroup_13\"},{\"1\":\"group3\",\"2\":\"subgroup_14\"},{\"1\":\"group3\",\"2\":\"subgroup_15\"},{\"1\":\"group4\",\"2\":\"subgroup_16\"},{\"1\":\"group4\",\"2\":\"subgroup_17\"},{\"1\":\"group4\",\"2\":\"subgroup_18\"},{\"1\":\"group4\",\"2\":\"subgroup_19\"},{\"1\":\"group4\",\"2\":\"subgroup_20\"},{\"1\":\"group5\",\"2\":\"subgroup_21\"},{\"1\":\"group5\",\"2\":\"subgroup_22\"},{\"1\":\"group5\",\"2\":\"subgroup_23\"},{\"1\":\"group5\",\"2\":\"subgroup_24\"},{\"1\":\"group5\",\"2\":\"subgroup_25\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# Create a graph object \nmygraph1 <- tidygraph::as_tbl_graph( edges )\n \n# Basic tree\np1 <- ggraph(mygraph1, layout = 'dendrogram', circular = TRUE) + \n  geom_edge_diagonal() +\n  geom_node_point() +\n  theme_void()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# create a data frame \ndata <- tibble(\n  level1=\"CEO\",\n  level2=c( rep(\"boss1\",4), rep(\"boss2\",4)),\n  level3=paste0(\"mister_\", letters[1:8])\n)\n \n# transform it to a edge list!\nedges_level1_2 <- data %>% \n  select(level1, level2) %>% unique %>% rename(from=level1, to=level2)\n\nedges_level2_3 <- data %>% \n  select(level2, level3) %>% unique %>% rename(from=level2, to=level3)\n\nedge_list <- rbind(edges_level1_2, edges_level2_3)\nedge_list\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"from\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"to\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"CEO\",\"2\":\"boss1\"},{\"1\":\"CEO\",\"2\":\"boss2\"},{\"1\":\"boss1\",\"2\":\"mister_a\"},{\"1\":\"boss1\",\"2\":\"mister_b\"},{\"1\":\"boss1\",\"2\":\"mister_c\"},{\"1\":\"boss1\",\"2\":\"mister_d\"},{\"1\":\"boss2\",\"2\":\"mister_e\"},{\"1\":\"boss2\",\"2\":\"mister_f\"},{\"1\":\"boss2\",\"2\":\"mister_g\"},{\"1\":\"boss2\",\"2\":\"mister_h\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# Now we can plot that\nmygraph2 <- as_tbl_graph(edge_list)\np2 <- ggraph(mygraph2, layout = 'dendrogram', circular = FALSE) + \n  geom_edge_diagonal() +\n  geom_node_point() +\n  theme_void()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + p2 + theme(aspect.ratio = 1)\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n### Circle Packing\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidygraph)\nlibrary(ggraph)\ngraph <- tbl_graph(flare$vertices, flare$edges)\nset.seed(1)\nggraph(graph, 'circlepack', weight = size) + \n  geom_node_circle(aes(fill = as_factor(depth)), size = 0.25, n = 50) + \n  coord_fixed() +\n  scale_fill_discrete(name = \"Depth\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## {{< iconify bi person-up >}} Your Turn\n\n1.  Use the `penguins` dataset from the `palmerpenguins` package and\n    plot pies, fans, and donuts as appropriate.\n2.  Look at the `whigs` and `highschool` datasets in the package\n    `ggraph`. Plot Pies, Fans and if you are feeling confident, Trees,\n    Dendrograms, and Circle Packings as appropriate for these.\n\n## {{< iconify ooui references-ltr >}} References\n\n\\\nIaroslava.2020. *A Parliament Diagram in R*, <https://datavizstory.com/a-parliament-diagram-in-r/>\\\nVenn Diagrams in R, [Venn diagram in ggplot2 \\| R CHARTS\n    (r-charts.com](https://r-charts.com/part-whole/ggvenndiagram/))\\\nGenerate icon-array charts without code! <https://iconarray.com>\n\n::: {#refs style=\"font-size: 60%;\"}\n###### {{< iconify lucide package-check >}} R Package Citations\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\nPackage        Version   Citation      \n-------------  --------  --------------\ndata.tree      1.1.0     @datatree     \necharts4r      0.4.5     @echarts4r    \nggparliament   2.0.0     @ggparliament \nggpol          0.0.7     @ggpol        \nggraph         2.2.1     @ggraph       \nplotrix        3.8.4     @plotrix      \ntidygraph      1.3.1     @tidygraph    \nwaffle         1.0.2     @waffle       \n\n\n:::\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../../../../../site_libs/echarts4r-4.8.0/echarts-en.min.js\"></script>\n<script src=\"../../../../../../site_libs/echarts4r-4.8.0/ecStat.min.js\"></script>\n<script src=\"../../../../../../site_libs/echarts4r-4.8.0/dataTool.min.js\"></script>\n<script src=\"../../../../../../site_libs/echarts4r-binding-0.4.5/echarts4r.js\"></script>\n<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}