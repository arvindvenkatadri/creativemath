{
  "hash": "44925b8f28ed019b9f16cefb6518e12c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"\\U0001F44C Ratings and Rankings\"\nsubtitle: \"Better than All the Rest\"\nauthor: \"Arvind V.\"\ndate: 10 Feb 2023\ndate-modified: \"2024-06-02\"\norder : 80\nabstract: \"Comparisons between observations and between variables\"\nimage: preview.jpg\nimage-alt: Photo by Jonathan Chng on Unsplash\ncategories:\n- Bar Charts\n- Lollipop Charts\n- Dumbbell Charts\n- Radar Charts\n- Bump Charts\n- Word Clouds\nbibliography: \n  - grateful-refs.bib\ncitation: true\n#suppress-bibliography: true\n\n---\n\n\n## {{< fa folder-open >}} Slides and Tutorials\n\nTBD.\n\n## {{< iconify noto-v1 package >}} Setting up R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(tidyverse) # includes ggplot for plotting\nlibrary(mosaic)\nlibrary(ggformula)\nlibrary(RColorBrewer) # colour palettes\n\nlibrary(ggbump) # Bump Charts\nlibrary(ggiraphExtra) # Radar, Spine, Donut and Donut-Pie combo charts !!\nlibrary(ggalt) # New geometries, coordinate systems, statistical transformations, scales and fonts\n\n# install.packages(\"devtools\")\n# devtools::install_github(\"ricardo-bion/ggradar\")\nlibrary(ggradar) # Radar Plots\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## {{< iconify fxemoji japanesesymbolforbeginner >}} What graphs are we going to see today?\n\nWhen we wish to compare the size of things and rank them, there are\nquite a few ways to do it.\n\nBar Charts and Lollipop Charts are immediately obvious when we wish to\nrank things on *one aspect or parameter*, e.g. mean income vs gender. We can also *put two lollipop charts back-to-back* to make a Dumbbell Chart to show comparisons/ranks across *two datasets* based on *one aspect*, e.g change in mean income over two years, across gender.\n \nWhen we wish to rank the *multiple objects* against *multiple aspects or parameters*, then we can use Bump Charts and Radar Charts, e.g performance of one or more products against multiple criteria (cost, size, performance...)s.\n\n\n## {{< iconify openmoji poppy >}} Lollipop Charts\nLet's make a toy dataset of Products and Ratings:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data set\nset.seed(1)\ndf1 <- tibble(product = LETTERS[1:10],\n              rank = sample(20:35, 10, replace = TRUE))\ndf1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   product  rank\n   <chr>   <int>\n 1 A          28\n 2 B          23\n 3 C          26\n 4 D          20\n 5 E          21\n 6 F          32\n 7 G          26\n 8 H          30\n 9 I          33\n10 J          21\n```\n\n\n:::\n:::\n\n\n::: {.panel-tabset .nav-pills style=\"background: whitesmoke;\"}\n\n### Using ggformula\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n# Set graph theme\ntheme_set(new = theme_custom())\n\n###\ngf_segment(0 + rank ~ product + product, data = df1) %>% \n# A formula with shape y + yend ~ x + xend.\n  \n  gf_point(rank ~ product, colour = ~ product, \n           size = 5,\n           ylab = \"Rank\",\n           xlab = \"Product\") \n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-4-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n###\ngf_segment(0 + rank ~ fct_reorder(product, - rank) + \n             fct_reorder(product, - rank), \n           data = df1) %>%\n  # A formula with shape y + yend ~ x + xend.\n  \n  gf_point(rank ~ product, colour = ~ product, size = 5) %>%\n  \n  gf_refine(coord_flip()) %>%\n  gf_labs(x = \"Product\", y = \"Rank\") \n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-4-2.png){width=2100}\n:::\n:::\n\n\nWe have flipped the chart horizontally *and* reordered the $x$ categories in order of decreasing ( or increasing ) $y$, using `forcats::fct_reorder`.\n\n\n### Using ggplot\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n# Set graph theme\ntheme_set(new = theme_custom())\n\n###\nggplot(df1) +\n  geom_segment(aes(y = 0, yend = rank, \n                   x = product, \n                   xend = product)) +\n  geom_point(aes(y = rank, x = product, colour = product), size = 5) +\n  labs(title = \"Product Ratings\", x = \"Product\", y = \"Rank\")\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-5-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n###\nggplot(df1) +\n  geom_segment(aes(y = 0, yend = rank, \n                   x = fct_reorder(product, -rank),\n                   xend = fct_reorder(product, -rank)))  +\n  geom_point(aes(x = product, y = rank, colour = product), size = 5) +\n  labs(title = \"Product Ratings\", x = \"Product\", y = \"Rank\")  +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-5-2.png){width=2100}\n:::\n:::\n\n\n:::\n\n::: callout-note\n### Business Insights from Lollipop Plots\n\n- Very simple chart, almost like a bar chart\n- Differences between the same set of data across one *aspect* (i.e. rank) is very quickly apparent\n- *Ordering* the dataset by the attribute (i.e ordering product by rank) makes the message very clear.\n- Even a large number of data can safely be visualized and understood\n\n:::\n\n\n## {{< iconify solar dumbbells-bold >}} Dumbbell Charts\n\nA lollipop chart compares a set of data against *one aspect*. What if we have more than one? Say sales in many product lines *across two years*?\n\nLet us once again construct a very similar looking toy dataset, but with *two* columns for ratings, one for each of two years:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data set\n# Wide Format data!\nset.seed(2)\ndf2 <- tibble(product = LETTERS[1:10],\n              rank_year1 = sample(20:35, 10, replace = TRUE),\n              rank_year2 = sample(15:45, 10, replace = TRUE))\ndf2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 3\n   product rank_year1 rank_year2\n   <chr>        <int>      <int>\n 1 A               24         43\n 2 B               34         23\n 3 C               25         32\n 4 D               25         25\n 5 E               35         15\n 6 F               27         17\n 7 G               20         36\n 8 H               32         30\n 9 I               20         32\n10 J               31         33\n```\n\n\n:::\n:::\n\n\nA short diversion: we can also make this data into long form: this will become useful very shortly!\n\n::: callout-note\n\n### {{< iconify icon-park pivot-table >}} Wide Form and Long Form Data\n\nLook at the data: this is **wide form data**. The columns pertaining to each of the Product-Features would normally be stacked into two columns, one with the Feature and the other with the score. Note the trio: Qual(product) + Qual(year) + Quant(scores):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# With Long Format Data\ndf2_long <- df2 %>% \n  pivot_longer(cols = c(dplyr::starts_with(\"rank\")), \n               names_to = \"year\", values_to = \"scores\")\ndf2_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 3\n   product year       scores\n   <chr>   <chr>       <int>\n 1 A       rank_year1     24\n 2 A       rank_year2     43\n 3 B       rank_year1     34\n 4 B       rank_year2     23\n 5 C       rank_year1     25\n 6 C       rank_year2     32\n 7 D       rank_year1     25\n 8 D       rank_year2     25\n 9 E       rank_year1     35\n10 E       rank_year2     15\n11 F       rank_year1     27\n12 F       rank_year2     17\n13 G       rank_year1     20\n14 G       rank_year2     36\n15 H       rank_year1     32\n16 H       rank_year2     30\n17 I       rank_year1     20\n18 I       rank_year2     32\n19 J       rank_year1     31\n20 J       rank_year2     33\n```\n\n\n:::\n:::\n\n\nA cool visualization of this operation was created by [Garrick Aden-Buie](https://www.garrickadenbuie.com/project/tidyexplain/):\n\n![](https://github.com/gadenbuie/tidyexplain/raw/main/images/tidyr-pivoting.gif)\n\n\n:::\n\n\n::: {.panel-tabset .nav-pills style=\"background: whitesmoke;\"}\n\n### Using ggformula\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set graph theme\ntheme_set(new = theme_custom())\n\n## With Wide Form Data\n## \ndf2 %>% gf_segment(product + product ~ rank_year1 + rank_year2 ) %>% \n  gf_point(product ~ rank_year1, size = 3, colour = \"#123456\") %>% \n  gf_point(product ~ rank_year2, size = 3, colour = \"#bad744\") %>% gf_labs(x = \"Rank\", y = \"Product\")\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-8-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n## With Long Form Data\ndf2_long %>% \n  gf_segment(product + product ~ scores + scores, \n             group = ~ year, colour = \"grey\", \n             linewidth = 2, data = ., caption = \"Segments not Showing? Why?\") %>% \n  gf_point(size = 3, colour = ~ year)\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-8-2.png){width=2100}\n:::\n:::\n\n\n\n\n\n### Using ggplot\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n# Set graph theme\ntheme_set(new = theme_custom())\n\n\n## With Wide Format Data\nggplot(df2, aes(y = product, yend = product, x = rank_year1, xend = rank_year2)) + \n  geom_segment(size = 3, color=\"#e3e2e1\") + \n  geom_point(aes(rank_year1, product), colour = \"#5b8124\", size = 3)   +\n  geom_point(aes(rank_year2, product), colour = \"#bad744\", size = 3) + \n  labs(x = \"Rank\", y = \"Product\")\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-9-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n## With Long Form Data\ndf2_long %>% \n  ggplot(aes(y = product, x = scores, group = year, colour = year)) + \n  geom_segment(aes(y = product, yend = product, x = scores, xend = scores, group = year)) + \n  geom_point(size = 3) +\n  labs(caption = \"Segments not showing? Why?\")\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-9-2.png){width=2100}\n:::\n:::\n\n\n\n### Using ggalt\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set graph theme\ntheme_set(new = theme_custom())\n\ndf2 %>% ggplot() + \n  geom_dumbbell(aes(y = product, x = rank_year1, xend = rank_year2),\n                size = 3, color = \"#e3e2e1\", \n                colour_x = \"#5b8124\", colour_xend = \"#bad744\",\n                dot_guide=TRUE,  # Try FALSE\n                dot_guide_size=0.25) +\n  \n  labs(x = NULL, y = NULL, title = \"ggplot2 geom_dumbbell with dot guide\", caption = \"Made with ggalt\") +\n  #theme_minimal() +\n  theme(panel.grid.major.x=element_line(size=0.05)) +\n  theme(panel.grid.major.y=element_blank())\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-10-1.png){width=2100}\n:::\n:::\n\n\n\n### Comparison barchart\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set graph theme\ntheme_set(new = theme_custom())\n\ndf2_long %>% \n  gf_col(product ~ scores, group = ~ year, fill = ~ year, position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-11-1.png){width=2100}\n:::\n:::\n\n\n:::\n\n::: callout-note\n### Business Insights from Dumbbell Plots\n\n- Dumbbell Plots are clearly they are more intuitive and clear than the bar chart\n- Differences between the same set of data at two different *aspects* is very quickly apparent\n- *Differences in differences(DID)* are also quite easily apparent. Experiments do use these metrics and these plots would be very useful there. \n- `ggalt` works nicely with additional visible guides rendered in the chart\n- However: *long form* data does not seem to work out very well. There is no chart rendered and the code does not throw an error either...need to investigate!\n\n:::\n\n\n\n\n## {{< iconify teenyicons curved-connector-outline >}} Bump Charts\n\nBump Charts track the ranking of several objects based on *other*\nparameters, such as time/month or even category. For instance, what is\nthe opinion score of a set of products across various categories of\nusers?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear <- rep(2019:2021, 4)\nposition <- c(4, 2, 2, 3, 1, 4, 2, 3, 1, 1, 4, 3)\nproduct <- c(\"A\", \"A\", \"A\",\n            \"B\", \"B\", \"B\", \n            \"C\", \"C\", \"C\",\n            \"D\", \"D\", \"D\")\n\ndf3 <- tibble(year,position,product)\n\ndf3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n    year position product\n   <int>    <dbl> <chr>  \n 1  2019        4 A      \n 2  2020        2 A      \n 3  2021        2 A      \n 4  2019        3 B      \n 5  2020        1 B      \n 6  2021        4 B      \n 7  2019        2 C      \n 8  2020        3 C      \n 9  2021        1 C      \n10  2019        1 D      \n11  2020        4 D      \n12  2021        3 D      \n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n\n### `ggbump` uses `ggplot` syntax\n\nWe need to use a new package called, what else, `ggbump` to create our\n`Bump Charts`: Here again we do not yet have a `ggformula` equivalent. ( Though it may be possible with a combination of `gf_point` and `gf_polygon`, and pre-computing the coordinates. Seems long-winded.)\n\nNote the `+` syntax with `ggplot` code!!\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#library(ggbump)\n\n# Set graph theme\ntheme_set(new = theme_custom())\n\n###\ndf3 %>%  \n  ggplot() +\n  geom_bump(aes(x = year, y = position, color = product)) +\n  geom_point(aes(x = year, y = position, color = product),\n             size = 6) +\n  xlab(\"Year\") +\n  ylab(\"Rank\") +\n  scale_color_brewer(palette = \"RdBu\") + # Change Colour Scale\n  scale_x_discrete(limits = c(2019, 2020, 2021)) # Check warning here...\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/bump-1-1.png){width=2100}\n:::\n:::\n\n\nWe can add labels along the \"bump lines\" and remove the legend\naltogether:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set graph theme\ntheme_set(new = theme_custom())\n\n###\nggplot(df3) +\n  geom_bump(aes(x = year, y = position, color = product)) +\n  geom_point(aes(x = year, y = position, color = product),\n             size = 6) +\n  scale_color_brewer(palette = \"RdBu\") + # Change Colour Scale\n# Same as before up to here\n# Add the labels at start and finish\n\n  geom_text(data = df3 %>% filter(year == min(year)),\n            aes(x = year - 0.1, label = product, y = position),\n            size = 5, hjust = 1) +\n  geom_text(data = df3 %>% filter(year == max(year)),\n            aes(x = year + 0.1, label = product, y = position),\n            size = 5, hjust = 0) +\n  xlab(\"Year\") +\n  ylab(\"Rank\") +\n  scale_x_discrete(limits = c(2019:2021)) + \n  theme(legend.position = \"\")\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/bump-2-1.png){width=2100}\n:::\n:::\n\n\n::: callout-note\n\n### Business Insights from Bump Charts\n\n- Bump charts are good for depicting Ranks/Scores pertaining to a set of data, as they vary over another *aspect*, for a set of products\n- Cannot have too many levels in the *aspect* parameter, else the graph gets too hard to make sense with.\n- For instance if we had 10 years in the data above, we would have lost the plot, literally! Better off with a dumbbell plot in such a case. \n\n\n:::\n\n\n\n## {{< iconify ant-design radar-chart-outlined >}} Radar Charts\n\nWhat if your marketing folks had rated some products along several\ndifferent desirable criteria? Such data, where a certain set of items\n(Qualitative!!) are **rated** (Quantitative!) against another set\n(Qualitative again!!) can be plotted on a roughly *circular set of axes*,\nwith the *radial distance* defining the rank against each axes. Such a plot is called a *radar plot*. \n\nOf course, we will use the aptly named `ggradar`, which is at this time\n(Feb 2023) a development version and not yet part of CRAN. We will still\ntry it, and another package `ggiraphExtra` which IS a part of CRAN (and\nhas some other capabilities too, which are worth exploring!)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#library(ggradar)\n\nset.seed(4)\ndf4 <- tibble(Product = c(\"G1\", \"G2\", \"G3\"),\n              Power = runif(3), \n              Cost = runif(3),\n              Harmony = runif(3),\n              Style = runif(3),\n              Size = runif(3),\n              Manufacturability = runif(3),\n              Durability = runif(3),\n              Universality = runif(3))\ndf4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 9\n  Product   Power  Cost Harmony  Style  Size Manufacturability Durability\n  <chr>     <dbl> <dbl>   <dbl>  <dbl> <dbl>             <dbl>      <dbl>\n1 G1      0.586   0.277   0.724 0.0731 0.100             0.455      0.962\n2 G2      0.00895 0.814   0.906 0.755  0.954             0.971      0.762\n3 G3      0.294   0.260   0.949 0.286  0.416             0.584      0.715\n# ℹ 1 more variable: Universality <dbl>\n```\n\n\n:::\n:::\n\n\n::: callout-note\n\n\n### {{< iconify icon-park radar-chart >}} Using `ggradar`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggradar::ggradar(plot.data = df4,\n                 axis.label.size = 3, # Titles of Params\n                 grid.label.size = 4, # Score Values/Circles\n                 group.point.size = 3,# Product Points Sizes\n                 group.line.width = 1, # Product Line Widths\n                 fill = TRUE, # fill the radar polygons\n                 fill.alpha = 0.3, # Not too dark, Arvind\n                 legend.title = \"Product\") \n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-15-1.png){width=2100}\n:::\n:::\n\n\n### {{< iconify flat-color-icons radar-plot >}} Using `ggiraphExtra`\n\nFrom the `ggiraphExtra` website:\n\n> Package `ggiraphExtra` contains many useful functions for exploratory\n> plots. These functions are made by both 'ggplot2' and 'ggiraph'\n> packages. You can make a static ggplot or an interactive ggplot by\n> setting the parameter interactive=TRUE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(ggiraphExtra)\n\nggiraphExtra::ggRadar(data = df4,\n        aes(colour = Product),\n        interactive = FALSE, # try TRUE\n        rescale = FALSE,\n        title = \"Using ggiraphExtra\"\n          )  + # recale = TRUE makes it look different...try!!\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/using ggiraphExtra-1.png){width=2100}\n:::\n:::\n\n\n:::\n\n::: callout-note\n### Business Insights from Radar Plots\n\n- Differences in scores for a given item across several *aspect* or parameters are readily apparent.\n- These can also be compared, parameter for parameter, with more than one item\n- the same set of data at two different *aspects* is very quickly apparent\n- Data is clearly in *wide* form\n- Both `ggradar` and `ggiraphExtra` render very similar-looking radar charts and the syntax is not too intimidating!!\n:::\n\n## {{< iconify icon-park me >}} Your Turn\n\n1.  Take the `HELPrct` dataset from our well used `mosaicData` package.\n    Plot ranking charts using each of the public health issues that you\n    can see in that dataset. What choice will you make for the the axes?\n2.  Try the `SaratogaHouses` dataset also from `mosaicData`.\n\n:::{.hidden}\n::::: columns\n::: column\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% gf_point(hwy ~ cty)\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-16-1.png){width=2100}\n:::\n:::\n\n:::\n\n::: column\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% gf_point(hwy ~ cty, \n                 color = ~ cyl)\n```\n\n::: {.cell-output-display}\n![](ranking_files/figure-html/unnamed-chunk-17-1.png){width=2100}\n:::\n:::\n\n:::\n:::::\n:::\n\n## {{< iconify ooui references-ltr >}} References\n\n1. Highcharts Blog. [Why you need to start using dumbbell charts](https://www.highcharts.com/blog/tutorials/why-you-need-to-start-using-dumbbell-charts/)\\\n<https://github.com/hrbrmstr/ggalt#lollipop-charts>\\\n\n1. See this use of Radar Charts in Education. Choose the country/countries of choice and plot their ranks on various educational parameters in a radar chart.  <https://gpseducation.oecd.org/Home>\n\n::: {#refs style=\"font-size: 60%;\"}\n###### {{< iconify lucide package-check >}} R Package Citations\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nPackage        Version   Citation      \n-------------  --------  --------------\nggalt          0.4.0     @ggalt        \nggbump         0.1.0     @ggbump       \nggiraphExtra   0.3.0     @ggiraphExtra \nggradar        0.2       @ggradar      \n\n\n:::\n:::\n\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}