{
  "hash": "59c1855a3a7b68dab50efb6ff3f2ab9f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: 23/Nov/2024\ndate-modified: \"2025-01-02\"\ntitle: \"Gradient Descent\"\norder: 50\nsummary: \ntags:\n- Neural Nets\n- Back Propagation\n- Gradient\nfilters:\n  - d2\nd2:\n  layout: elk\n  theme: \"CoolClassics\"\n  sketch: true\n\n---\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n\n## Learning: Adapting the Weights\n\nWe obtained the backpropagated error for each layer:\n\n$$\n\\begin{bmatrix}\ne_{11}\\\\\ne_{12}\\\\\ne_{13}\\\\\n\\end{bmatrix} \\pmb{\\sim}\n\\begin{bmatrix}\nW_{11} & W_{21} & W_{31} \\\\\nW_{12} & W_{22}  & W_{32} \\\\\nW_{13} & W_{23} & W_{33} \\\\\n\\end{bmatrix} * \n\\begin{bmatrix}\n{e_{21}}\\\\\n{e_{22}}\\\\\n{e_{23}}\\\\\n\\end{bmatrix}\n$$\n\nAnd the matrix form: \n\n$$\ne^{l-1} ~ \\pmb{\\sim} ~ {W^l}^{\\pmb{\\color{red}{T}}}* e^{l}\n$${#eq-Back-Prop}\n\n\nNow what? How do we use all these errors, from the output right up to those backpropagated backwards up to the first ($l=1$) layer? To adapt the weights of the NN using these backpropagated errors, here are the steps:\n\n1. **Per-Weight Cost Gradient**: We are looking for something like $\\pmb{\\color{red}{\\frac{dC}{W_{jk}}}}$ for all possible combos of $jk$.\n1. **Learn**: Adapt the Weights in the opposite direction to its Cost-Gradient. (Why?)\n\n Are you ready? ;-D Let us do this !\n\n\n### Cost-Gradient for each Weight\n\n1a. The cost function was the squared error averaged over all $n$ neurons:\n\n$$\n\\begin{align}\nC(W, b) &= \\frac{1}{2n}\\sum^{n ~ neurons}_{i=1}e^2(i)\\\\\n\\\\\n&= \\frac{1}{2n}\\sum^{n~neurons}_{k=1}(a_i - d_i)^2\n\\end{align}\n$${#eq-cost-function}\n\n\n\n1b. ***Serious Magic***: We want to differentiate this sum for **each Weight**. Before we calculate $\\frac{dC}{dW^l_{jk}}$, we realize that *any weight* $W^l_{jk}$ connects only as input to **one neuron** $j$, which outputs $a_j$. No other neuron-terms in the above summation depend upon this specific Weight, so the summation becomes *just one term*, pertaining to activation-output, say $a_j$!\n\n$$\n\\begin{align}\n\\frac{d~C}{d~\\color{orange}{\\pmb{W^l_{jk}}}} &= \\frac{1}{2n}\\sum^{n~neurons}_{k=1}(a_i - d_i)^2\\\\\n\\\\\n&= \\frac{1}{2n} ~ * ~\\bigg(~\\pmb{\\color{orange}{W^l_{jk}}} * \\pmb{\\color{red}{a^l_j}}~ \\bigg)^2 ~~only~~j^{th}~~term~~matters\\\\\n\\\\\n&= {\\color{red}{\\pmb{a^l_j}}} ~ * ~ \\frac{d~\\color{red}{\\pmb{a^l_j}}}{d~\\color{orange}{\\pmb{W^l_{jk}}}} ~~\\text{(leave out the n scaling factor; 2 cancels !!)}\n\\end{align}\n$$\n\n1b. Now, the relationship between $a^l_j$ and $W^l_{jk}$ involves the sigmoid function. \n\n$$\n\\begin{align}\n\\color{red}{\\pmb{a^l_j}} ~ &= \\sigma~\\bigg(\\sum^{k_{max}}_k \\pmb{\\color{orange}{W^l_{jk}}} ~ * ~{a^{l-1}_k + b^l_j}\\bigg)\\\\\n&= \\color{red}{\\sigma(everything)}\\\\\n\\end{align}\n$$\nwhere $k_{max}$ is the number of neurons in the previous layer $l-1$. We also know $\\frac{d\\sigma(x)}{dx} = \\sigma(x) * \\big(1 - \\sigma(x)\\big)$. \n\n1c. **Final Leap**: Using the great [chain rule for differentiation](https://en.wikipedia.org/wiki/Derivative#Rules_for_basic_functions), we obtain:\n\n$$\n\\begin{align}\n\\frac{d~C}{d~\\color{orange}{\\pmb{W^l_{jk}}}} &= ~ a^l_j *  \\frac{d~\\color{red}{\\pmb{a^l_j}}}{d~\\color{orange}{\\pmb{W^l_{jk}}}}\\\\\n&=a^l_j * \\frac{d~ \\color{red}{\\sigma(everything)}}{d~\\color{orange}{\\pmb{W^l_{jk}}}}\\\\\n\\\\\n&= \\text{(Write this step yourself, DL peasants!)}\\\\\n\\\\\n&= ~ a^l_j * \\sigma(everything) * (1 -\\sigma(everything)) * \\frac{d(everything)}{d~\\color{orange}{\\pmb{W^l_{jk}}}}~~ \\text{Applying Chain Rule!}\\\\\n&= ~ a^l_j ~* ~ a^{l-1}_k * ~ \\sigma~\\bigg(\\sum^{k_{max}}_k \\pmb{\\color{orange}{W^l_{jk}}} ~ * ~{a^{l-1}_k + b^l_j}\\bigg) * \\bigg(1-\\sigma~\\bigg(\\sum^{k_{max}}_k \\pmb{\\color{orange}{W^l_{jk}}} ~ * ~{a^{l-1}_k + b^l_j}\\bigg)\\bigg)\n\\end{align}\n$$\n\n### \n\nIf $d(k)$ are the desired outputs of the NN (over an entire training set), and $y(k)$ are the outputs of the ***output layer***, then we calculate the error **at the outputs** of the NN as:\n\n$$\ne(k) = a(k) - d(k)\n$${#eq-error-function}\n\nThis error is calculated at *each output* for each training epoch/sample/batch. (More about the batch-mode in a bit.)\n\n### What is the Cost Function?\n\nWe define the **cost** or **objective** function as:\n\n$$\n\\begin{align}\nC(W, b) &= \\frac{1}{2n}\\sum^n_{k=1}(e(k))^2\\\\\n&= \\frac{1}{2n}\\sum^n_{k=1}(a(k) - d(k))^2\n\\end{align}\n$${#eq-cost-function}\n\nWe take each of the output $a(k)$s over $n$ training samples and $d(k)$ are the desired outputs for each of the training samples. \n\n[The Cost Function is of course dependent upon the *Weights* and the *biases*]{.bg-light-red .black }, and is to be minimized by adapting these. Using the sum of *squared errors*, along with the *linear* operations in the NN guarantees that the Cost Function (usually) has one global, minimum. \n\n\n\n\n::: {.cell warn='false'}\n\n:::\n\n\n\n\n### What is Backpropagation of Error?\n\nAs we stated earlier, error is calculated at the output. In order to adapt **all weights**, we need to *send error proportionately back along the network*, towards the input. This proportional error will enable will give us a basis to adapt the individual weights anywhere in the network. \n\nWhat does \"proportional\" mean here?\n\n- Consider the two diagrams below:\n\n:::: column-screen-inset-right\n:::: {.columns}\n::: {.column width=\"49%\"}\n:::: {style=\"background-color: whitesmoke\"}\n::: {.cell}\n\n```{.d2 .cell-code}\ntitle: Error Contributions to e21 {\n  shape: text\n  near: top-center\n  style: {\n    font-size: 60\n    italic: true\n  }\n}\ndirection: right\ngrid-columns: 3\ngrid-gap: 400\n\nlayer-1: {\n  grid-columns: 1\n  grid-gap: 100\n  1 {shape: circle\n     style: {\n      font-size: 45\n    }}\n  2 {shape: circle\n     style: {\n      font-size: 45\n    }}\n  3 {shape: circle\n     style: {\n      font-size: 45\n    }}\n}\nlayer-2: {\n  grid-columns: 1\n  grid-gap: 100\n  h1 {shape: circle\n     style: {\n      font-size: 45\n    }}\n  h2 {shape: circle\n     style: {\n      font-size: 45\n    }}\n  h3 {shape: circle\n     style: {\n      font-size: 45\n    }}\n}\n\nlayer-3: {\n  grid-columns: 1\n  grid-gap: 100\n  style: {\n    opacity: 0\n  }\n    e21: \"e21\" {shape: circle\n     style: {\n      font-size: 45\n      stroke: white\n      fill: white\n    }}\n    e22: \"e22\" {shape: circle\n     style: {\n      font-size: 45\n      stroke: white\n      fill: white\n    }}\n    e23: \"e23\" {shape: circle\n     style: {\n      font-size: 45\n      stroke: white\n      fill: white\n     }\n     }\n}\nlayer-1.1 -> layer-2.h1: W11 {\n  source-arrowhead.label: a11\n  style: {\n    font-size: 45\n    fill: LightBlue\n    stroke: FireBrick\n    stroke-width: 9\n    animated: true\n  }\n}\nlayer-1.1 -> layer-2.h2\nlayer-1.1 -> layer-2.h3\nlayer-1.2 -> layer-2.h1: W12 {\n  source-arrowhead.label: a12\n  style: {\n    font-size: 45\n    fill: LightBlue\n    stroke: FireBrick\n    stroke-width: 9\n    animated: true\n  }\n}\nlayer-1.2 -> layer-2.h2\nlayer-1.2 -> layer-2.h3\nlayer-1.3 -> layer-2.h1: W13 {\n  source-arrowhead.label: a13\n  style: {\n    font-size: 45\n    fill: LightBlue\n    stroke: FireBrick\n    stroke-width: 9\n    animated: true\n  }\n}\nlayer-1.3 -> layer-2.h2\nlayer-1.3 -> layer-2.h3\n\nlayer-2.h1 -> layer-3.e21 { style: {stroke-width: 9\n         stroke: FireBrick}}\nlayer-2.h2 -> layer-3.e22\nlayer-2.h3 -> layer-3.e23\n\n```\n:::\n$$\n\\begin{align}\ne_{21} = ~ a_{11} * \\frac{W_{11}}{Sum~of~Weights~to~{\\color{magenta}{\\pmb{h_1}}}}\\\\\n+ a_{12} * \\frac{W_{12}}{Sum~of~Weights~to~{\\color{magenta}{\\pmb{h_1}}}} \\\\\n+ a_{13} * \\frac{W_{13}}{Sum~of~Weights~to~\\color{magenta}{\\pmb{h_1}}} \\\\\n\\end{align}\n$$\n\n\n$$\n\\begin{align}\ne_{21} = ~ a_{11} * \\frac{W_{11}}{\\pmb{\\color{magenta}{W_{11} + W_{12} + W_{13}}}}\\\\\n+ a_{12} * \\frac{W_{12}}{\\pmb{\\color{magenta}{W_{11} + W_{12} + W_{13}}}} \\\\\n+ a_{13} * \\frac{W_{13}}{\\pmb{\\color{magenta}{W_{11} + W_{12} + W_{13}}}}  \\\\\n\\end{align}\n$$\n<br><br><br>\n\n::::\n\n\n:::\n::: {.column width=\"2%\"}\n:::\n::: {.column width=\"49%\"}\n:::: {style=\"background-color: whitesmoke\"}\n::: {.cell}\n\n```{.d2 .cell-code}\ntitle: Total Error at a11 {\n  shape: text\n  near: top-center\n  style: {\n    font-size: 60\n    italic: true\n  }\n}\ndirection: right\ngrid-columns: 3\ngrid-gap: 400\n\nlayer-1: {\n  grid-columns: 1\n  grid-gap: 100\n  1 {shape: circle\n     style: {\n      font-size: 45\n    }}\n  2 {shape: circle\n     style: {\n      font-size: 45\n    }}\n  3 {shape: circle\n     style: {\n      font-size: 45\n    }}\n}\nlayer-2: {\n  grid-columns: 1\n  grid-gap: 100\n  h1 {shape: circle\n     style: {\n      font-size: 45\n    }}\n  h2 {shape: circle\n     style: {\n      font-size: 45\n    }}\n  h3 {shape: circle\n     style: {\n      font-size: 45\n    }}\n}\n\nlayer-3: {\n  grid-columns: 1\n  grid-gap: 100\n  style: {\n    opacity: 0\n  }\n    e21: \"e21\" {shape: circle\n     style: {\n      font-size: 45\n      stroke: white\n      fill: white\n    }}\n    e22: \"e22\" {shape: circle\n     style: {\n      font-size: 45\n      stroke: white\n      fill: white\n    }}\n    e23: \"e23\" {shape: circle\n     style: {\n      font-size: 45\n      stroke: white\n      fill: white\n     }\n     }\n}\nlayer-1.1 -> layer-2.h1: W11 {\n  source-arrowhead.label: e11\n  style: {\n    font-size: 45\n    fill: LightBlue\n    stroke: FireBrick\n    stroke-width: 9\n    animated: true\n  }\n}\nlayer-1.1 -> layer-2.h2: W21 {\n  style: {\n    font-size: 45\n    fill: LightBlue\n    stroke: FireBrick\n    stroke-width: 9\n    animated: true\n  }\n}\nlayer-1.1 -> layer-2.h3: W31 {\n  style: {\n    font-size: 45\n    fill: LightBlue\n    stroke: FireBrick\n    stroke-width: 9\n    animated: true\n  }\n}\nlayer-1.2 -> layer-2.h1\nlayer-1.2 -> layer-2.h2\nlayer-1.2 -> layer-2.h3\nlayer-1.3 -> layer-2.h1\nlayer-1.3 -> layer-2.h2\nlayer-1.3 -> layer-2.h3\n\nlayer-2.h1 -> layer-3.e21 { style: {stroke-width:9 \n         stroke: FireBrick}}\nlayer-2.h2 ->layer-3.e22  { style: {stroke-width:9\n         stroke: FireBrick}}\nlayer-2.h3 ->layer-3.e23  { style: {stroke-width:9\n         stroke: FireBrick}}\n\n```\n:::\n\n$$\n\\begin{align}\ne_{11} = ~ e_1 * \\frac{W_{11}}{Sum~of~weights~to~{\\color{orange}{\\pmb {h_1}}}}\\\\\n+ e_2 * \\frac{W_{21}}{Sum~of~Weights~to~\\color{pink}{\\pmb{h_2}}} \\\\\n+ e_3 * \\frac{W_{31}}{Sum~of~Weights~to~\\color{teal}{\\pmb{h_3}}}  \\\\\n\\end{align}\n$$\n\n\n$$\n\\begin{align}\ne_{11} = ~ e_{21} * \\frac{W_{11}}{\\pmb{\\color{orange}{W_{11} + W_{12} + W_{13}}}}\\\\\n+ e_{22} * \\frac{W_{21}}{\\pmb{\\color{pink}{W_{11} + W_{22} + W_{23}}}} \\\\\n+ e_{23} * \\frac{W_{31}}{\\pmb{\\color{teal}{W_{31} + W_{32} + W_{33}}}}  \\\\\n\\end{align}\n$$\n\n\n$$\n\\begin{align}\ne_{12} = similar~expression!!\\\\\n\\\ne_{13} = similar~expression!!\\\\\n\\end{align}\n$$\n<br>\n::::\n:::\n::::\n::::\n\n- In the LHS column, we have taken one output error, $e_{21}$ and parcelled it back to the preceding neurons ***in proportion to their connecting Weights***. This makes intuitive sense; we are making those neurons put their money where their mouth is. As [Nassim Nicholas Taleb](https://philosophiatopics.wordpress.com/wp-content/uploads/2018/10/skin-in-the-game-nassim-nicholas-taleb.pdf) says, people (and neurons!) need to pay for their opinions, especially when things go wrong!\n- In the RHS column, we are doing the same thing, but looking at the error per connecting-neuron in layer $l-1$, rather than on a per output-error-basis). \n- What is the *accumulated error* then, at each connecting neuron? We add up back-propagated error contributions from all subsequent neurons to which we are connected. \n\n- So we can compactly write the relationships in the RHS column above as:\n\n$$\n\\begin{bmatrix}\ne_{11}\\\\\ne_{12}\\\\\ne_{13}\\\\\n\\end{bmatrix} = \n\\Bigg(\n\\begin{bmatrix}\n\\frac{W_{11}}{D_{11}} & \\frac{W_{21}}{D_{21}} & \\frac{W_{31}}{D_{31}}\\\\\n\\frac{W_{12}}{D_{12}} & \\frac{W_{22}}{D_{22}} & \\frac{W_{32}}{D_{32}}\\\\\n\\frac{W_{13}}{D_{13}} & \\frac{W_{13}}{D_{13}} & \\frac{W_{33}}{D_{33}}\\\\\n\\end{bmatrix} * \n\\begin{bmatrix}\n{e_{21}}\\\\\n{e_{22}}\\\\\n{e_{23}}\\\\\n\\end{bmatrix}\n\\Bigg)\n$$\n\nThe denominators make things look complicated! But if we are able to [simply ignore them]{.black .bg-light-red} for a moment, then we see a very interesting thing:\n\n$$\n\\begin{bmatrix}\ne_{11}\\\\\ne_{12}\\\\\ne_{13}\\\\\n\\end{bmatrix} \\pmb{\\sim}\n\\begin{bmatrix}\nW_{11} & W_{21} & W_{31} \\\\\nW_{12} & W_{22}  & W_{32} \\\\\nW_{13} & W_{23} & W_{33} \\\\\n\\end{bmatrix} * \n\\begin{bmatrix}\n{e_{21}}\\\\\n{e_{22}}\\\\\n{e_{23}}\\\\\n\\end{bmatrix}\n$$\n\n[This new *approximate* matrix is the **tranpose** of our original Weight matrix]{.black .bg-light-red} from @eq-fwd-prop-1! The rows there have become columns here!!\n\n$$\ne^{l-1}  \\pmb{\\sim} ~ \\Bigg(W^{lT} * e^{l}\\Bigg)\n$${#eq-Back-Prop}\n\nThis is our equation for backpropagation of error. \n\nWhy is ignoring all those *individual* denominators justified? Let us park that question until we have understood the one last step in NN training, the [Gradient Descent.](../Modules/50-GradientDescent/index.qmd)\n\n\n\n### Assumptions in the Training Process\n\n1. **Cost Function**: We will minimize the Cost function which is assumed to be a function of (all) outputs of a NN.\n\n1. **Training Error**: We can calculate overall training Cost as the average Cost taken over all/several input samples.\n$$\nC = \\frac{1}{n}*\\sum_{x}C_x\n$$\nIn practice, the input samples are not presented one by one, but in batches, called *minbatches*. This is cheaper by way of computation since we adapt the weights on a per-batch basis, and also allows to perform *averaging* of errors over each batch. However is also seems to complicate the housekeeping necessary to manage batches. ( We will not, in the interest of time, deal with this idea more. It is dealt with in the references below. )\n\n1. **Global Minimum**: Cost function has a global minimum! (Bowl shaped surface which we can descend)\n\n## Backpropagation Numerically Demonstrated\n\n::: {.cell}\n\n```{.d2 .cell-code}\ndirection: right\ngrid-columns: 6\ngrid-rows: 3\n###\nin1.style.opacity: 0\nin2.style.opacity: 0\nin3.style.opacity: 0\n1.shape: circle\n2.shape: circle\n3.shape: circle\nh1.shape: circle\nh2.shape: circle\nh3.shape: circle\no1.shape: circle\n# o1 {\n#   icon: https://icons.terrastruct.com/infra/019-network.svg\n# }\no2.shape: circle\no3.shape: circle\nout1.style.opacity: 0\nout2.style.opacity: 0\nout3.style.opacity: 0\n###\nin1 -> 1\nin2 -> 2\nin3 -> 3\n1 -> h1: w21 {\n  style: {\n    stroke: deepskyblue}\n}\n1 -> h2: W21 {\n  style: {\n  fill: LightBlue\n  stroke: FireBrick\n  stroke-width: 2\n  animated: true\n  }\n}\n1 -> h3\n2 -> h1\n2 -> h2\n2 -> h3\n3 -> h1\n3 -> h2\n3 -> h3\nh1 -> o1\nh2 -> o1\nh3 -> o1\nh1 -> o2\nh2 -> o2\nh3 -> o2\nh1 -> o3\nh2 -> o3\nh3 -> o3\n\no1 -> out1\no2 -> out2\no3 -> out3\n\n```\n:::\n\n## Here Comes the ~~Rain~~ Maths Again!\n\nNow, we are ready (maybe?) to watch these two very beautifully made videos on Backpropagation. One is of course from Dan Shiffman, and the other from Grant Sanderson a.ka. 3Blue1Brown.\n\n:::: {.columns}\n\n::: {.column width=\"48%\"}\n\n\n\n{{< video https://youtu.be/QJoa0JYaX1I?list=PLRqwX-V7Uu6Y7MdSCaIfsxc561QI0U0Tb >}}\n\n\n\n\n\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column width=\"48%\"}\n\n\n\n{{< video https://youtu.be/tIeHLnjs5U8?list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi >}}\n\n\n\n\n\n:::\n::::\n\n## Backpropagation in Code\n\n::: {.panel-tabset .nav-pills style=\"background: whitesmoke \"}\n\n### Using p5.js\n\n\n### Using R\nUsing `torch`.\n\n:::\n\n\n## References\n\n1. Tariq Rashid. *Make your own Neural Network*. [PDF Online](https://github.com/harshitkgupta/StudyMaterial/blob/master/Make%20Your%20Own%20Neural%20Network%20(Tariq%20Rashid)%20-%20%7BCHB%20Books%7D.pdf)\n1. Mathoverflow. *Intuitive Crutches for Higher Dimensional Thinking*. <https://mathoverflow.net/questions/25983/intuitive-crutches-for-higher-dimensional-thinking>\n1. Interactive Backpropagation Explainer <https://xnought.github.io/backprop-explainer/>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}