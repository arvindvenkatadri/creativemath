{
  "hash": "807f17b7f01bf640bd6b8d6ef04fe455",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: 23/Nov/2024\ndate-modified: \"2024-12-28\"\ntitle: \"The Multilayer Perceptron\"\norder: 30\nsummary: \ntags:\n- Neural Nets\n- Hidden Layers\nfilters:\n  - d2\nd2:\n  layout: elk\n  theme: \"CoolClassics\"\n  sketch: true\n\n---\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n## {{< iconify icons8 idea >}} What is a Multilayer Perceptron?\n\nThis was our bare bones Perceptron, or neuron as we will refer to it henceforth:\n\n::: {.cell}\n\n```{.d2 .cell-code}\ndirection: right\ngrid-gap: 10\ntitle: The Perceptron {\n  shape: text\n  near: top-center\n  style: {\n    font-size: 30\n    italic: true\n  }\n}\nin1.style.opacity: 0\nin2.style.opacity: 0\nin3.style.opacity: 0\nin4.style.opacity: 0\nin5.style.opacity: 0\nin6.style.opacity: 0\n1.shape: circle\n2.shape: circle\n3.shape: circle\n4.shape: circle\n5.shape: circle\n6.shape: circle\nact.shape: circle\nact {\n  icon: ./carbon--chart-logistic-regression.svg\n}\nout.style.opacity: 0\n###\nin1 -> 1\nin2 -> 2\nin3 -> 3\nin4 -> 4\nin5 -> 5\nin6 -> 6\n\n1 -> act\n2 -> act\n3 -> act\n4 -> act\n5 -> act\n6 -> act\n\nact -> out\n\n```\n:::\n\n<br>\nWe add (one or more ) **hidden layers** to setup a *Multilayer Perceptron*:\n\n::: {.cell}\n\n```{.d2 .cell-code}\ntitle: Multilayer Perceptron {\n  shape: text\n  near: top-center\n  style: {\n    font-size: 30\n    italic: true\n  }\n}\ndirection: right\ngrid-columns: 5\ngrid-rows: 3\n###\nin1: \"in1\" {shape: circle\n     style: {\n      font-size: 25\n      stroke: white\n      fill: white\n    }}\nin2: \"in2\" {shape: circle\n     style: {\n      font-size: 25\n      stroke: white\n      fill: white\n    }}\nin3: \"in3\" {shape: circle\n     style: {\n      font-size: 25\n      stroke: white\n      fill: white\n    }}\ni1: {shape: circle\n     style: {\n      font-size: 25\n      fill: white\n    }}\ni2: {shape: circle\n     style: {\n      font-size: 25\n      fill: white\n    }}\ni3: {shape: circle\n     style: {\n      font-size: 25\n      fill: white\n    }}\nh1: {shape: circle\n     style: {\n      stroke: blue\n      font-color: blue\n      font-size: 25\n      stroke-dash: 2\n      stroke-width: 6\n      fill: white\n    }}\nh2: {shape: circle\n     style: {\n      stroke: blue\n      font-color: blue\n      font-size: 25\n      stroke-dash: 2\n      stroke-width: 6\n      fill: white\n    }}\nh3: {shape: circle\n     style: {\n      stroke: blue\n      font-color: blue\n      font-size: 25\n      stroke-dash: 2\n      stroke-width: 6\n      fill: white\n    }}\no1: {shape: circle\n     style: {\n      font-size: 25\n      fill: white\n    }}\no2: {shape: circle\n     style: {\n      font-size: 25\n      fill: white\n    }}\no3: {shape: circle\n     style: {\n      font-size: 25\n      fill: white\n    }}\nout1: \"out1\" {shape: circle\n     style: {\n      font-size: 25\n      stroke: white\n      fill: white\n    }}\nout2: \"out2\" {shape: circle\n     style: {\n      font-size: 25\n      stroke: white\n      fill: white\n    }}\nout3: \"out3\" {shape: circle\n     style: {\n      font-size: 25\n      stroke: white\n      fill: white\n    }}\n###\nin1 -> i1\nin2 -> i2\nin3 -> i3\ni1 -> h1\ni1 -> h2\ni1 -> h3\ni2 -> h1\ni2 -> h2\ni2 -> h3\ni3 -> h1\ni3 -> h2\ni3 -> h3\nh1 -> o1\nh2 -> o1\nh3 -> o1\nh1 -> o2\nh2 -> o2\nh3 -> o2\nh1 -> o3\nh2 -> o3\nh3 -> o3\n\no1 -> out1\no2 -> out2\no3 -> out3\n\n```\n:::\n\n<br>\n\n- Here, `i1`, `i2`, and `i3` are *input neurons*: they are simply inputs and are drawn as circles in the literature. \n- The `h1`, `h2`, `h3` are neuron in the so-called **hidden layer**; *hidden* because they are not inputs! \n- The neurons `o1`, `o2`, and `o3` are **output neurons**.\n- The signals/information flows from left to right in the diagram. And we have shown every neuron connected to everyone in the next layer downstream.\n\nHow do we mathematically, and concisely, express the operation of the MLP? Let us setup a notation for the MLP weights. \n\n  - $l$ : layer index; \n  - $j$, $k$ : neuron index in two adjacent layers\n  - $W^l_{jk}$ : weight from $k$th neuron / $(l−1)$th layer to $j$th neuron / $l$th layer;\n  - $b^l_j$ : *bias* of the $j$th neuron in the $l$th layer.\n  - $a^l_j$ : activation of $j$th neuron / $l$th layer. \n\n::: {.cell}\n\n```{.d2 .cell-code}\ntitle: Data Processing Between Layers {\n  shape: text\n  near: top-center\n  style: {\n    font-size: 30\n    italic: true\n  }\n}\ndirection: right\ngrid-columns: 3\n\nlayer-1: {\n  grid-columns: 1\n  1.shape: circle\n  2.shape: circle\n  3.shape: circle\n}\nlayer-2: {\n  grid-columns: 1\n  h1.shape: circle\n  h2.shape: circle\n  h3.shape: circle\n}\nlayer-3: {\n  grid-columns: 1\n  style: {\n    opacity: 0\n  }\n    a21: \"a21\" {shape: circle\n     style: {\n      stroke: white\n      fill: white\n    }}\n    a22: \"a22\" {shape: circle\n     style: {\n      stroke: white\n      fill: white\n    }}\n    a23: \"a23\" {shape: circle\n     style: {\n      stroke: white\n      fill: white\n     }\n     }\n}\nlayer-1.1 -> layer-2.h1: W11 {\n  source-arrowhead.label: a11\n  style: {\n    fill: LightBlue\n    stroke: FireBrick\n    stroke-width: 4\n    animated: true\n  }\n}\nlayer-1.1 -> layer-2.h2\nlayer-1.1 -> layer-2.h3\nlayer-1.2 -> layer-2.h1: W21 {\n  source-arrowhead.label: a12\n  style: {\n    fill: LightBlue\n    stroke: FireBrick\n    stroke-width: 4\n    animated: true\n  }\n}\nlayer-1.2 -> layer-2.h2\nlayer-1.2 -> layer-2.h3\nlayer-1.3 -> layer-2.h1: W31 {\n  source-arrowhead.label: a13\n  style: {\n    fill: LightBlue\n    stroke: FireBrick\n    stroke-width: 4\n    animated: true\n  }\n}\nlayer-1.3 -> layer-2.h2\nlayer-1.3 -> layer-2.h3\n\nlayer-2.h1 -> layer-3.a21\nlayer-2.h2 -> layer-3.a22\nlayer-2.h3 -> layer-3.a23\n\n```\n:::\n\n\n\n\n\n\n\n\n\n\n<br>\nWe can write the outputs of the `layer-2` as:\n\n\n$$\n\\begin{align}\na^2_1 = sigmoid~(~\\color{red}{W^2_{11}*a^1_1} + \\color{skyblue}{W^2_{21}*a^1_2} + \\color{forestgreen}{W^2_{31}*a^1_3}~ + b^2_1)\\\\\na^2_2 = sigmoid~(~W^2_{12}*a^1_1 + W^2_{22}*a^1_2 + W^2_{32}*a^1_3~ + b^2_2 )\\\\\na^2_3 = sigmoid~(~W^2_{13}*a^1_1 + W^2_{23}*a^1_2 + W^2_{33}*a^1_3~ + b^2_3)\\\\\n\\end{align}\n$$\nIn (dreaded?) matrix notation :\n\n$$\n\\begin{bmatrix}\na^2_1\\\\\na^2_2\\\\\na^2_3\\\\\n\\end{bmatrix} = \nsigmoid~\\Bigg(\n\\begin{bmatrix}\n\\color{red}{W^2_{11}} & \\color{skyblue}{W^2_{21}} & \\color{forestgreen}{W^2_{31}}\\\\\nW^2_{12} & W^2_{22} & W^2_{32}\\\\\nW^2_{13} & W^2_{23} & W^2_{33}\\\\\n\\end{bmatrix} * \n\\begin{bmatrix}\n\\color{red}{a^1_1}\\\\\n\\color{skyblue}{a^1_2}\\\\\n\\color{forestgreen}{a^1_3}\\\\\n\\end{bmatrix} +\n\\begin{bmatrix}\nb^2_1\\\\\nb^2_2\\\\\nb^2_3\\\\\n\\end{bmatrix}\n\\Bigg)\n$$\nIn compact notation we write, in general:\n\n$$\na^l_j=σ(\\sum_kW^l_{jk} * a^{l−1}_k+b^l_j)\n$${#eq-forward-prop}\n\n\n\n\n\n### How does and MLP Learn?\n\nSee how the conections between neurons are marked by **weights**: these multiply the signal from the previous neuron. The multiplied/weighted products are added up in the neuron, and the sum is given to the activation block therein. \n\nSo learning?\n\nThe only controllable variables in a neural network are these weights! So learning involves adapting these wwights so that they can perform a sueful function. \n\n### What is the Training Process?\n\nThe process of adapting the weights of a neural network can be described in the following steps:\n\n- **Training Set**: Training is over several known input-output pairs (\"training data\")\n- **Training Epoch**: For each input, the signals propagate forward until we have an output\n- **Error Calculation**: Output is compared with **desired output**, to calculate *error*\n- **Backpropagation**: Errors need to be *sent backward from the output* to input, where we unravel the error from layer $l$ to layer $l-1$. (like apportioning blame !!). \n- **Error-to-Cost**: How does error at a given neuron relate to overall Cost?\n- **Differentiate**: Evaluate the *effect* of each weight/bias on ~~the (apportioned) error~~ overall Cost. (Slope!!)\n- **Gradient Descent**: Adapt the weights/biases with a small step in the **opposite direction** to the slope\n\n\n### Assumptions in the Training Process\n\n1. **Training Error**: We can calculate overall training Cost as the average Cost taken over all/several input samples.\n$$\nC = \\frac{1}{n}*\\Sum_{x}C_x\n$$\nIn practice, the input samples are not presented one by one, but in batches, called *minbatches*. This is cheaper by way of computation since we adapt the weights on a per-batch basis, and also allows to perform *averaging* of errors over each batch. However is also seems to complicate the housekeeping necessary to manage batches. ( We will not, in the interest of time, deal with this idea more. It is dealt with in the references below. )\n\n2. **Cost Function**: We will minimize the Cost function which is assumed to be a function of (all) outputs of a NN.\n\n3. **Global Minimum**: Cost function has a global minimum! (Bowl shaped surface which we can descend)\n\n\n## Here Comes the ~~Rain~~ Maths Again!\n\n1. Rosenblatt-Nielsen's Demon: \n  - messes/perturbs with input to the sigmoid function at a neuron. (Weighted Sum)\n  - Error = Slope * perturbation  \n  - However, **Error ~= Slope** when we allow that the perturbation is a fixed amplitude.\n  - Still a product of slopes  -O\n  \n$$\n{\\delta_j}^L = \\frac{\\delta C}{\\delta {a_j}^L} * \\sigma ({z_j}^L)\n$${#eq-bp1}\n\n:::: {.columns}\n\n::: {.column width=\"48%\"}\n\n\n\n{{< video https://youtu.be/Ilg3gGewQ5U?list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi >}}\n\n\n\n\n\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column width=\"48%\"}\n\n\n\n{{< video https://youtu.be/tIeHLnjs5U8?list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi >}}\n\n\n\n\n\n:::\n::::\n\n\n\n## MLPs in Code\n\n::: {.panel-tabset .nav-pills style=\"background: whitesmoke \"}\n\n### Using p5.js\n\n\n### Using R\nUsing `torch`.\n\n:::\n\n\n## References\n\n1. Tariq Rashid. *Make your own Neural Network*. [PDF Online](https://github.com/harshitkgupta/StudyMaterial/blob/master/Make%20Your%20Own%20Neural%20Network%20(Tariq%20Rashid)%20-%20%7BCHB%20Books%7D.pdf)\n1. Mathoverflow. *Intuitive Crutches for Higher Dimensional Thinking*. <https://mathoverflow.net/questions/25983/intuitive-crutches-for-higher-dimensional-thinking>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}