{
  "hash": "f35eca85aa859d57b5f82a497a53540d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"L-Systems\"\nsubtitle: \"\"\nsubject: \"Shapes and Code\"\nabstract: \"\"\ndate: 02/May/2024\ndate-modified: \"2025-05-13\"\norder: 50\ncategories:\n- Iterated Functions\n- Fractals\n- L-Systems\n- Algorithmic Patterns\n- Symmetry\nimage: \"\"\nlightbox: true\n---\n\n:::: pa4\n::: {.athelas .ml0 .mt0 .pl4 .black-90 .bl .bw2 .b--blue}\n[Trees]{.f3}\\\n\n[\"I think that I shall never see\\\nA poem lovely as a tree.\\\nA tree whose hungry mouth is prest\\\nAgainst the earth’s sweet flowing breast;\\\nA tree that looks at God all day,\\\nAnd lifts her leafy arms to pray;\\\nA tree that may in Summer wear\\\nA nest of robins in her hair;\\\nUpon whose bosom snow has lain;\\\nWho intimately lives with rain.\\\nPoems are made by fools like me,\\\nBut only God can make a tree.\"]{.f5 .f4-m .f3-l .lh-copy .measure .mt0}\n\n[--- Joyce Kilmer, 1915]{.f6 .ttu .tracked .fs-normal}\n:::\n::::\n\n## {{< iconify icons8 idea >}} Inspiration\n\n![Japanese Daisugi](../../../../../materials/images/daisugi.jpg)\n\n## Introduction\n\nTrees are fractal in nature, meaning that patterns created by the large\nstructures, such as the main branches, repeat themselves in smaller\nstructures, such as smaller branches.... a universal growth pattern\nfirst observed by Leonardo da Vinci 500 years ago: a simple yet\nstartling relationship that always holds between the size of a tree's\ntrunk and sizes of its branches.\n\n<center>![](../../../../../materials/images/leonardotree1.jpg)</center>\n\n## An Introduction to L-Systems\n\nFrom [Job Talle's\nWebsite](https://jobtalle.com/lindenmayer_systems.html):\n\nLindenmayer systems were originally conceived by Hungarian biologist\nAristid Lindenmayer while studying algae growth. He developed L-systems\nas a way to describe the growth process of algae and simple plants. The\nresult was a **type of language** in which the recursive and self\nsimilar properties of organism growth can be expressed. Indeed,\nL-systems can be used to generate natural patterns, but well known\nmathematical patterns can also be written as an L-system. In this\narticle, I will explain different flavors of L-systems, and I will\ndemonstrate them by rendering 2D Lindenmayer systems and 3D Lindenmayer\nsystems using turtle graphics.\n\nThe language is very simple. It consists of **symbols** (the alphabet)\nand **production rules**. The first state of the sentence is called the\n**axiom**. The production rules can be applied repeatedly on this axiom\nto evolve or grow the system. A simple example would be a system with\nthe axiom $AA$, and the rule $A→ABA$.\n\nYou can see how a self expanding sentence can be analogous to cell\ndivision in plants and other biological processes.\n\n$$\naxiom: AA\n$$ $$\nProduction ~ Rule: A --> ABA\n$$\n\n$$\nIterations:\\\\\\ \n1. A\\\\\\ \n$$\n\n$$\n2. ~\\color{magenta}{A}~\\color{Black}B~\\color{magenta}{A}\\\\\\ \n$$ $$\n3.~\\color{magenta}{ABA}~\\color{Black}B~\\color{magenta}{ABA}\\\\\\\n$$ $$\n4.~\\color{magenta}{ABA}~\\color{Black}B~\\color{magenta}{ABA}~~\\color{Black}B~~\\color{magenta}{ABA}~\\color{Black}B~\\color{magenta}{ABA}\n$$\n\nL-system Structures thus develop through a process of **string\nrewriting**. A string of letters is transformed into a new string of\nletters using simple rules called **productions**. The process is\nrepeated indefinitely, each time using the string that was just produced\nas the source for the next string. Because the strings tend to grow with\neach rewrite, an L-system can become arbitrarily complex, but always\nguided by a simple process dictated by a fixed set of simple rules. In\nthis respect, L-systems are a manifestation of [Complexity\nPhenomena](https://www.complexityexplorer.org/courses/185-introduction-to-complexity).\n\nAll right, but how does this become a **tree**??\n\nTwo things need to be done:\n\n-   Each **symbol** in the language needs to be mapped to a *left\n    branch* or a *right branch*. (with turn angle)\n-   At each application of the *production rules*, branch **size** is\n    scaled down by a number.\n\n![](https://www.birdsoutsidemywindow.org/wp-content/uploads/2018/11/diagram_da_vinci_rule_of_trees_christophermalloy_insidescience-600x291.jpg){#fig-l-system}\n\n[Image Courtesy Christophe Eloy \\| University of\nProvence](https://www.insidescience.org/news/uncovering-da-vincis-rule-trees).\n\nIn the @fig-l-system, the RHS shows a typical figure generated by the\nL-system language. This figure shows both the LHS and RHS turns, and the\nfairly rapid reduction in the size of the branches.\n\nLet us see how we can create **\"Algorithmic Trees\"**.\n\n## Creating Trees using L-systems\n\n::: {.panel-tabset .nav-pills style=\"background: whitesmoke;\"}\n### Using p5.js\n\n<center>\n\n<iframe width=\"780px\" height=\"600px\" src=\"https://editor.p5js.org/arvindv/full/3XhIEr2Iv\">\n\n</iframe>\n\n</center>\n\n### Using R\n\nWe will use the package `LindenmayerR` to create our tree.\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\n###\nlibrary(LindenmayeR)\nlibrary(LearnGeom)\nlibrary(TurtleGraphics)\noptions(max.print = 20)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Lindemayer tree\n\n## Dictionary of Symbols\ndictionary <- data.frame(\n  symbol = c(\"F\", \"f\", \"+\", \"-\", \"[\", \"]\"), # symbol column\n  action = c(\"F\", \"f\", \"+\", \"-\", \"[\", \"]\"), # action column\n  stringsAsFactors = FALSE\n)\n\n## Axioms to start and morph\ntree_morph_rules <- data.frame(\n  inp = c(\"F\"), # starting axiom\n  out = c(\"F[+F][-F]\"), # Morphing Rule\n  stringsAsFactors = FALSE\n)\n\n## Build the Tree with commands\nLtree <- Lsys(\n  init = \"F\",\n  rules = tree_morph_rules,\n  n = 2,\n  verbose = 0, # No progress messages please...\n  retAll = FALSE # One Vector output at the end only\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n     start end\n[1,]     1   1\n\n[[1]]\n  start end    insert\n1     1   1 F[+F][-F]\n\n[[1]]\n     start end\n[1,]     1   1\n[2,]     4   4\n[3,]     8   8\n\n[[1]]\n  start end    insert\n1     1   1 F[+F][-F]\n2     4   4 F[+F][-F]\n3     8   8 F[+F][-F]\n```\n\n\n:::\n\n```{.r .cell-code}\n## Now draw the tree\ndrawLsys(\n  string = Ltree,\n  drules = dictionary,\n  stepSize = 10, shrinkFactor = 1.2, # integers shrink!\n  ang = 12,\n  st = c(50, 10, 90) # Root Position x, y, angle from bottom-left\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=2100}\n:::\n:::\n\nA more complex, and more botanical-looking, tree or seaweed:\n\n::: {.cell}\n\n```{.r .cell-code}\n## Define Axiom and Mutation Rules\nfractal_tree_rules <- data.frame(\n  inp = c(\"X\", \"F\"),\n  out = c(\"F-[[X]+X]+F[+FX]-X\", \"FF\"),\n  stringsAsFactors = FALSE\n)\n\n## Create the Algorithmic Tree\nfractal_tree <- Lsys(\n  init = \"X\", # Axiom\n  rules = fractal_tree_rules,\n  n = 4,\n  verbose = 0,\n  retAll = FALSE\n)\n\n## Now draw the tree\ndrawLsys(\n  string = fractal_tree,\n  drules = dictionary,\n  stepSize = 2, # Shrink by half each time\n  ang = runif(n = 1, min = 3, max = 30),\n  st = c(50, 5, 90), # Origin of tree\n  gp = gpar(col = \"chocolate4\", fill = \"honeydew\")\n)\n\ngrid.text(\"Fractal Seaweed (n = 4)\", 0.25, 0.25)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=2100}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n     start end\n[1,]     1   1\n\n[[1]]\n  start end             insert\n1     1   1 F-[[X]+X]+F[+FX]-X\n\n[[1]]\n     start end\n[1,]     5   5\n[2,]     8   8\n[3,]    15  15\n[4,]    18  18\n\n[[2]]\n     start end\n[1,]     1   1\n[2,]    11  11\n[3,]    14  14\n\n[[1]]\n  start end             insert\n1     5   5 F-[[X]+X]+F[+FX]-X\n2     8   8 F-[[X]+X]+F[+FX]-X\n3    15  15 F-[[X]+X]+F[+FX]-X\n4    18  18 F-[[X]+X]+F[+FX]-X\n\n[[2]]\n  start end insert\n1     1   1     FF\n2    11  11     FF\n3    14  14     FF\n\n[[1]]\n      start end\n [1,]    10  10\n [2,]    13  13\n [3,]    20  20\n [4,]    23  23\n [5,]    30  30\n [6,]    33  33\n [7,]    40  40\n [8,]    43  43\n [9,]    56  56\n[10,]    59  59\n[11,]    66  66\n[12,]    69  69\n[13,]    76  76\n[14,]    79  79\n[15,]    86  86\n[16,]    89  89\n\n[[2]]\n      start end\n [1,]     1   1\n [2,]     2   2\n [3,]     6   6\n [4,]    16  16\n [5,]    19  19\n [6,]    26  26\n [7,]    36  36\n [8,]    39  39\n [9,]    46  46\n[10,]    47  47\n[11,]    50  50\n[12,]    51  51\n[13,]    52  52\n[14,]    62  62\n[15,]    65  65\n[16,]    72  72\n[17,]    82  82\n[18,]    85  85\n\n[[1]]\n   start end             insert\n1     10  10 F-[[X]+X]+F[+FX]-X\n2     13  13 F-[[X]+X]+F[+FX]-X\n3     20  20 F-[[X]+X]+F[+FX]-X\n4     23  23 F-[[X]+X]+F[+FX]-X\n5     30  30 F-[[X]+X]+F[+FX]-X\n6     33  33 F-[[X]+X]+F[+FX]-X\n7     40  40 F-[[X]+X]+F[+FX]-X\n8     43  43 F-[[X]+X]+F[+FX]-X\n9     56  56 F-[[X]+X]+F[+FX]-X\n10    59  59 F-[[X]+X]+F[+FX]-X\n11    66  66 F-[[X]+X]+F[+FX]-X\n12    69  69 F-[[X]+X]+F[+FX]-X\n13    76  76 F-[[X]+X]+F[+FX]-X\n14    79  79 F-[[X]+X]+F[+FX]-X\n15    86  86 F-[[X]+X]+F[+FX]-X\n16    89  89 F-[[X]+X]+F[+FX]-X\n\n[[2]]\n   start end insert\n1      1   1     FF\n2      2   2     FF\n3      6   6     FF\n4     16  16     FF\n5     19  19     FF\n6     26  26     FF\n7     36  36     FF\n8     39  39     FF\n9     46  46     FF\n10    47  47     FF\n11    50  50     FF\n12    51  51     FF\n13    52  52     FF\n14    62  62     FF\n15    65  65     FF\n16    72  72     FF\n17    82  82     FF\n18    85  85     FF\n\n[[1]]\n      start end\n [1,]    17  17\n [2,]    20  20\n [3,]    27  27\n [4,]    30  30\n [5,]    37  37\n [6,]    40  40\n [7,]    47  47\n [8,]    50  50\n [9,]    63  63\n[10,]    66  66\n[11,]    73  73\n[12,]    76  76\n[13,]    83  83\n[14,]    86  86\n[15,]    93  93\n[16,]    96  96\n[17,]   108 108\n[18,]   111 111\n[19,]   118 118\n[20,]   121 121\n[21,]   128 128\n[22,]   131 131\n[23,]   138 138\n[24,]   141 141\n[25,]   154 154\n[26,]   157 157\n[27,]   164 164\n[28,]   167 167\n[29,]   174 174\n[30,]   177 177\n[31,]   184 184\n[32,]   187 187\n[33,]   209 209\n[34,]   212 212\n[35,]   219 219\n[36,]   222 222\n[37,]   229 229\n[38,]   232 232\n[39,]   239 239\n[40,]   242 242\n[41,]   255 255\n[42,]   258 258\n[43,]   265 265\n[44,]   268 268\n[45,]   275 275\n[46,]   278 278\n[47,]   285 285\n[48,]   288 288\n[49,]   300 300\n[50,]   303 303\n[51,]   310 310\n[52,]   313 313\n[53,]   320 320\n[54,]   323 323\n[55,]   330 330\n[56,]   333 333\n[57,]   346 346\n[58,]   349 349\n[59,]   356 356\n[60,]   359 359\n[61,]   366 366\n[62,]   369 369\n[63,]   376 376\n[64,]   379 379\n\n[[2]]\n      start end\n [1,]     1   1\n [2,]     2   2\n [3,]     3   3\n [4,]     4   4\n [5,]     8   8\n [6,]     9   9\n [7,]    13  13\n [8,]    23  23\n [9,]    26  26\n[10,]    33  33\n[11,]    43  43\n[12,]    46  46\n[13,]    53  53\n[14,]    54  54\n[15,]    57  57\n[16,]    58  58\n[17,]    59  59\n[18,]    69  69\n[19,]    72  72\n[20,]    79  79\n[21,]    89  89\n[22,]    92  92\n[23,]    99  99\n[24,]   100 100\n[25,]   104 104\n[26,]   114 114\n[27,]   117 117\n[28,]   124 124\n[29,]   134 134\n[30,]   137 137\n[31,]   144 144\n[32,]   145 145\n[33,]   148 148\n[34,]   149 149\n[35,]   150 150\n[36,]   160 160\n[37,]   163 163\n[38,]   170 170\n[39,]   180 180\n[40,]   183 183\n[41,]   190 190\n[42,]   191 191\n[43,]   192 192\n[44,]   193 193\n[45,]   196 196\n[46,]   197 197\n[47,]   198 198\n[48,]   199 199\n[49,]   200 200\n[50,]   201 201\n[51,]   205 205\n[52,]   215 215\n[53,]   218 218\n[54,]   225 225\n[55,]   235 235\n[56,]   238 238\n[57,]   245 245\n[58,]   246 246\n[59,]   249 249\n[60,]   250 250\n[61,]   251 251\n[62,]   261 261\n[63,]   264 264\n[64,]   271 271\n[65,]   281 281\n[66,]   284 284\n[67,]   291 291\n[68,]   292 292\n[69,]   296 296\n[70,]   306 306\n[71,]   309 309\n[72,]   316 316\n[73,]   326 326\n[74,]   329 329\n[75,]   336 336\n[76,]   337 337\n[77,]   340 340\n[78,]   341 341\n[79,]   342 342\n[80,]   352 352\n[81,]   355 355\n[82,]   362 362\n[83,]   372 372\n[84,]   375 375\n\n[[1]]\n   start end             insert\n1     17  17 F-[[X]+X]+F[+FX]-X\n2     20  20 F-[[X]+X]+F[+FX]-X\n3     27  27 F-[[X]+X]+F[+FX]-X\n4     30  30 F-[[X]+X]+F[+FX]-X\n5     37  37 F-[[X]+X]+F[+FX]-X\n6     40  40 F-[[X]+X]+F[+FX]-X\n7     47  47 F-[[X]+X]+F[+FX]-X\n8     50  50 F-[[X]+X]+F[+FX]-X\n9     63  63 F-[[X]+X]+F[+FX]-X\n10    66  66 F-[[X]+X]+F[+FX]-X\n11    73  73 F-[[X]+X]+F[+FX]-X\n12    76  76 F-[[X]+X]+F[+FX]-X\n13    83  83 F-[[X]+X]+F[+FX]-X\n14    86  86 F-[[X]+X]+F[+FX]-X\n15    93  93 F-[[X]+X]+F[+FX]-X\n16    96  96 F-[[X]+X]+F[+FX]-X\n17   108 108 F-[[X]+X]+F[+FX]-X\n18   111 111 F-[[X]+X]+F[+FX]-X\n19   118 118 F-[[X]+X]+F[+FX]-X\n20   121 121 F-[[X]+X]+F[+FX]-X\n21   128 128 F-[[X]+X]+F[+FX]-X\n22   131 131 F-[[X]+X]+F[+FX]-X\n23   138 138 F-[[X]+X]+F[+FX]-X\n24   141 141 F-[[X]+X]+F[+FX]-X\n25   154 154 F-[[X]+X]+F[+FX]-X\n26   157 157 F-[[X]+X]+F[+FX]-X\n27   164 164 F-[[X]+X]+F[+FX]-X\n28   167 167 F-[[X]+X]+F[+FX]-X\n29   174 174 F-[[X]+X]+F[+FX]-X\n30   177 177 F-[[X]+X]+F[+FX]-X\n31   184 184 F-[[X]+X]+F[+FX]-X\n32   187 187 F-[[X]+X]+F[+FX]-X\n33   209 209 F-[[X]+X]+F[+FX]-X\n34   212 212 F-[[X]+X]+F[+FX]-X\n35   219 219 F-[[X]+X]+F[+FX]-X\n36   222 222 F-[[X]+X]+F[+FX]-X\n37   229 229 F-[[X]+X]+F[+FX]-X\n38   232 232 F-[[X]+X]+F[+FX]-X\n39   239 239 F-[[X]+X]+F[+FX]-X\n40   242 242 F-[[X]+X]+F[+FX]-X\n41   255 255 F-[[X]+X]+F[+FX]-X\n42   258 258 F-[[X]+X]+F[+FX]-X\n43   265 265 F-[[X]+X]+F[+FX]-X\n44   268 268 F-[[X]+X]+F[+FX]-X\n45   275 275 F-[[X]+X]+F[+FX]-X\n46   278 278 F-[[X]+X]+F[+FX]-X\n47   285 285 F-[[X]+X]+F[+FX]-X\n48   288 288 F-[[X]+X]+F[+FX]-X\n49   300 300 F-[[X]+X]+F[+FX]-X\n50   303 303 F-[[X]+X]+F[+FX]-X\n51   310 310 F-[[X]+X]+F[+FX]-X\n52   313 313 F-[[X]+X]+F[+FX]-X\n53   320 320 F-[[X]+X]+F[+FX]-X\n54   323 323 F-[[X]+X]+F[+FX]-X\n55   330 330 F-[[X]+X]+F[+FX]-X\n56   333 333 F-[[X]+X]+F[+FX]-X\n57   346 346 F-[[X]+X]+F[+FX]-X\n58   349 349 F-[[X]+X]+F[+FX]-X\n59   356 356 F-[[X]+X]+F[+FX]-X\n60   359 359 F-[[X]+X]+F[+FX]-X\n61   366 366 F-[[X]+X]+F[+FX]-X\n62   369 369 F-[[X]+X]+F[+FX]-X\n63   376 376 F-[[X]+X]+F[+FX]-X\n64   379 379 F-[[X]+X]+F[+FX]-X\n\n[[2]]\n   start end insert\n1      1   1     FF\n2      2   2     FF\n3      3   3     FF\n4      4   4     FF\n5      8   8     FF\n6      9   9     FF\n7     13  13     FF\n8     23  23     FF\n9     26  26     FF\n10    33  33     FF\n11    43  43     FF\n12    46  46     FF\n13    53  53     FF\n14    54  54     FF\n15    57  57     FF\n16    58  58     FF\n17    59  59     FF\n18    69  69     FF\n19    72  72     FF\n20    79  79     FF\n21    89  89     FF\n22    92  92     FF\n23    99  99     FF\n24   100 100     FF\n25   104 104     FF\n26   114 114     FF\n27   117 117     FF\n28   124 124     FF\n29   134 134     FF\n30   137 137     FF\n31   144 144     FF\n32   145 145     FF\n33   148 148     FF\n34   149 149     FF\n35   150 150     FF\n36   160 160     FF\n37   163 163     FF\n38   170 170     FF\n39   180 180     FF\n40   183 183     FF\n41   190 190     FF\n42   191 191     FF\n43   192 192     FF\n44   193 193     FF\n45   196 196     FF\n46   197 197     FF\n47   198 198     FF\n48   199 199     FF\n49   200 200     FF\n50   201 201     FF\n51   205 205     FF\n52   215 215     FF\n53   218 218     FF\n54   225 225     FF\n55   235 235     FF\n56   238 238     FF\n57   245 245     FF\n58   246 246     FF\n59   249 249     FF\n60   250 250     FF\n61   251 251     FF\n62   261 261     FF\n63   264 264     FF\n64   271 271     FF\n65   281 281     FF\n66   284 284     FF\n67   291 291     FF\n68   292 292     FF\n69   296 296     FF\n70   306 306     FF\n71   309 309     FF\n72   316 316     FF\n73   326 326     FF\n74   329 329     FF\n75   336 336     FF\n76   337 337     FF\n77   340 340     FF\n78   341 341     FF\n79   342 342     FF\n80   352 352     FF\n81   355 355     FF\n82   362 362     FF\n83   372 372     FF\n84   375 375     FF\n```\n\n\n:::\n:::\n\n### Fractal Grower\n\nHead off to\n<https://www.cs.unm.edu/~joel/PaperFoldingFractal/paper.html>. Download\nthe `.jar` file and save it say in your Documents folder. Open and play.\nInstructions are on the website. Make note of how the `scaling factor`\nworks here.\n\nSome suggestions!! Note the alphabet!!!\n![](../../../../../materials/images/L-system-pythagoras.png)\n\n![](../../../../../materials/images/L-system-KrishnaAnklet.png)\n\n+----------------------------------+----------------------------------+\n| Col1                             | Col2                             |\n+==================================+==================================+\n| A.  Pythagorean Tree:            | ![                               |\n|                                  | ](../../../.%20./../materials/im |\n| -   Axiom: \\[++!++!++!\\]xy       | ages/L%20-system-pythagoras.png) |\n|                                  | \\|                               |\n| -   Production Rules:            |                                  |\n|                                  |                                  |\n|     -   x =                      |                                  |\n|                                  |                                  |\n|     \\[-\\[!++!++!++!\\]!xy         |                                  |\n|                                  |                                  |\n|     -   y =                      |                                  |\n|                                  |                                  |\n| \\[+\\![!++!++!++!\\]!xy            |                                  |\n|                                  |                                  |\n| ```                              |                                  |\n| -   startAngle: 0                |                                  |\n| -   turnAngle: 45.0              |                                  |\n| -   growth : 1.408               |                                  |\n| ```                              |                                  |\n+----------------------------------+----------------------------------+\n| B. Krishna's Anklets:            | ![](.                            |\n|                                  | ./../../../.%20./materials/image |\n| -   Axiom: ++af-h-f+h            | s/L-sy%20stem-KrishnaAnklet.png) |\n|                                  |                                  |\n|     ```                          |                                  |\n|     -   f                        |                                  |\n|     ```                          |                                  |\n|                                  |                                  |\n|     -   \\## h                    |                                  |\n|                                  |                                  |\n|         f++h++f-h-f++h++f-h-f++h |                                  |\n|                                  |                                  |\n| -   Production Rules:            |                                  |\n|                                  |                                  |\n|     -   f = f - h - f ++ h ++    |                                  |\n|         f - h - f                |                                  |\n|     -   startAngle: 0            |                                  |\n|     -   turnAngle: 45.0          |                                  |\n|     -   growth:1.0               |                                  |\n+----------------------------------+----------------------------------+\n|                                  |                                  |\n+----------------------------------+----------------------------------+\n:::\n\n## Design Principles for L-Systems\n\n-   Pick a set of symbols. i.e. our alphabet (say two or three letters\n    of the alphabet)\n-   Map these to specific movements in the growth of the tree\n-   Decide on an `axiom`. It can include one or more of the symbols.\n-   Decide on a (set of) `production rules`. These should generate all\n    the symbols in our alphabet. (Why?)\n-   Decide on a `scaling factor`\n-   Apply the `production rules` multiple times starting with the axiom,\n    develop an extensive string using this recursion\n-   Plot the resulting string, scaling the individual recursions by the\n    `scaling factor`.\n\n## {{< iconify mingcute thought-line >}} Wait, But Why?\n\n-   By making use of \"just sufficient randomness\" in a few parameters,\n    it is possible to generate very organic-looking trees\n-   These tree-like layouts can show up in a surprising number of\n    places, such as transport networks, residential layouts.\n-   The multiple iterations generated from a few simple rules embody all\n    the complexity of a **language**.\n-   Trees become a great metaphor for a diverse set of things and ideas.\n\n## {{< iconify ooui references-ltr >}} References\n\n1.  Job Talle. *Lindenmayer Systems*\n    <https://jobtalle.com/lindenmayer_systems.html>\n2.  C. J Jennings. *L-systems*.\n    <https://cgjennings.ca/articles/l-systems/>\n3.  Joel Castellanos. *Fractal Grower: Java Software for Growing\n    Lindenmayer Substitution Fractals (L-systems)*.\n    <https://www.cs.unm.edu/~joel/PaperFoldingFractal/paper.html>\n4.  Paul Bourke. *L systems User Notes*.\n    <https://paulbourke.net/fractals/lsys/>\n5.  Przemysław Prusinkiewicz and Aristid Lindenmayer. [The Algorithmic\n    Beauty of Plants](http://algorithmicbotany.org/papers/#abop).\n    Springer-Verlag, 1990.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}