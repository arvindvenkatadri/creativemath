{
  "hash": "207534e5353546c445948b04b01be307",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: <iconify-icon icon=\"mdi:reiterate\" width=\"1.2em\" height=\"1.2em\"></iconify-icon> <iconify-icon icon=\"gravity-ui:function\" width=\"1.2em\" height=\"1.2em\"></iconify-icon> Going Round in Circles\nsubtitle: \"\"\nsubject: \"Shapes and Code\"\nabstract: \"\"\ndate: 02/May/2024\ndate-modified: \"2024-11-29\"\norder: 10\ncategories:\n- Euler Formula\n- Parametric Equations\n- Rotation\n- Symmetry\nbibliography: \n  - grateful-refs.bib\ncitation: true\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n\n#### Plot Theme\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# https://stackoverflow.com/questions/74491138/ggplot-custom-fonts-not-working-in-quarto\n\n# Chunk options\nknitr::opts_chunk$set(\n  fig.width = 7,\n  fig.asp = 0.618, # Golden Ratio\n  # out.width = \"80%\",\n  fig.align = \"center\"\n)\n### Ggplot Theme\n### https://rpubs.com/mclaire19/ggplot2-custom-themes\n\ntheme_custom <- function() {\n  font <- \"Roboto Condensed\" # assign font family up front\n\n  theme_classic(base_size = 14) %+replace% # replace elements we want to change\n\n    theme(\n      panel.grid.minor = element_blank(), # strip minor gridlines\n      text = element_text(family = font),\n      # text elements\n      plot.title = element_text( # title\n        family = font, # set font family\n        # size = 20,               #set font size\n        face = \"bold\", # bold typeface\n        hjust = 0, # left align\n        # vjust = 2                #raise slightly\n        margin = margin(0, 0, 10, 0)\n      ),\n      plot.subtitle = element_text( # subtitle\n        family = font, # font family\n        # size = 14,                #font size\n        hjust = 0,\n        margin = margin(2, 0, 5, 0)\n      ),\n      plot.caption = element_text( # caption\n        family = font, # font family\n        size = 8, # font size\n        hjust = 1\n      ), # right align\n\n      axis.title = element_text( # axis titles\n        family = font, # font family\n        size = 10 # font size\n      ),\n      axis.text = element_text( # axis text\n        family = font, # axis family\n        size = 8\n      ) # font size\n    )\n}\n\n# Set graph theme\ntheme_set(new = theme_custom())\n#\n```\n:::\n\n\n\n## Introduction\n\n## {{< iconify icons8 idea >}} Inspiration\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Mystery Curve](index_files/figure-html/fig-mystery-curve-1.png){#fig-mystery-curve width=2100}\n:::\n:::\n\n\n\n<centre> <iframe \nwidth = 680 height = 680\nsrc=\"https://editor.p5js.org/arvindv/full/lEqfT1GBq\"> </iframe>\n</centre>\n\n## What is a Parametric Equation?\n\nHow was this curve created? The equation for the curve is given by a\npair of **parametric equations**, one for $x$ and one for $y$:\n\n$$\n\\begin{eqnarray}\nx &= cos(t) + cos(6t)/2 + sin(14t)/3\\\\\ny &= sin(t) + sin(6t)/2 + cos(14t)/3\n\\end{eqnarray}\n$$ {#eq-parametric}\n\nThis form is especially suited for a *computational depiction* of the\ncurve, since we can have the parameter $t$ go from $0~ ->\\infty$ and let\nthe $x$ and $y$ be computed and plotted. All right, whatever...but what\ndoes this have to do with circles?? For that we need to turn to the\nfamous Euler formula relating complex vectors and circles.\n\n## How about the Euler Formula?\n\nWhat is the equation of a circle? Most likely you will say:\n\n$$\n\\begin{eqnarray}\nx^2 + y^2 &= 1\\\\ \nor ~ perhaps\\\\ \n(ùë• ‚àí ‚Ñé)^2 + (ùë¶ ‚àí ùëò)^2 &= ùëÖ^2\\\\\n\\end{eqnarray}\n$$ {#eq-circle}\n\nfor a circle with center $C(h,k)$ and radius R.\n\nAs Frank Farris says, this is fine, but it represents a static view of a\ncircle, which is not the simplest way to direct the drawing of one. The\nsimplest way to **instruct a machine** to draw a circle uses a\n**parametric form** discussed above, also known as a *vector-valued function*:\n\n$$\n\\gamma(t) = (cos(t), sin(t))\n$$ for the unit circle and\n\n$$\nùõæ(ùë°) = (h + ùëÖ cos(ùë°), k + ùëÖ sin(ùë°))\n$$ for a more general one.\n\nNow, if we were to use *complex numbers* as our notation, then the function for our circle becomes:\n\n$$\n\\begin{eqnarray}\n\\gamma(t) &=& (cos(t), sin(t))\\\\\n&=& e^{it}\n\\end{eqnarray}\n$$ {#eq-euler}\n\nwhere of course, $i = \\sqrt{-1}$.\n\nThis is the famous Euler Formula that connects complex numbers with\ntrigonometry. \n\n## The Mystery Curve\n\nUsing this formula, our parametric function $\\mu(t)$ for\nour mystery curve becomes a family of three circles, of [**different\nsizes**]{.bg-pink .black} and rotating at [**different\nspeeds**]{.bg-blue .black}:\n\n$$\n\\begin{eqnarray}\nx &= cos(t) + cos(6t)/2 + sin(14t)/3\\\\\ny &= sin(t) + sin(6t)/2 + cos(14t)/3\\\\\n\\end{eqnarray}\n$$\n\nand\n\n$$\n\\mu(t) = {\\large{\\color{hotpink}{1}} * {e^{\\color{Blue}{\\Large\\pmb{1it}}}}} + \n{\\large{\\color{hotpink}{\\frac{1}{2}}} * {e^{\\color{Blue}{\\Large{\\pmb{6it}}}}}} + \n{\\large{\\color{hotpink}{\\frac{1}{3}}} * {e^{\\color{Blue}{\\Large{\\pmb{-14it}}}}}}\n$$ {#eq-mystery-curve}\n\nwhich gives us three *rotating vectors* with amplitudes given by {1, 1/2, 1/3} and with rotation speeds in the ratio {1 : 6: -14}. The first two rotate counter-clockwise; the third vector rotates in the clockwise direction since we have a negative coefficient for $t$). The tips of these rotating vectors course trace out the individual circles. We can picture the pattern as the *vector sum* of the vectors, or as three circles where each subsequent circle rotates and rolls on the circumference of the earlier one, like meshed gears. \n\n<centre> <iframe \nwidth = 600 height = 600 src=\"https://editor.p5js.org/arvindv/full/WBLDwFSNV\">\n</iframe>\n</centre>\n\n\nThe first two terms in @eq-mystery-curve are direct; the third term may\nneed a bit of understanding. Here the $sin$ and $cos$ terms are\n\"interchanged\" between *x* and *y*, so we need **multiply by** $i$\n(rotate by $\\pi/2$) to swap them, which means that the third circle\nstarts from a 90 degree angle compared to the other two. Multiplying by\n$i$ however makes the $sin$ term negative, so we need to **negate t** as\nwell, since $-sin(-t) = sin(t)$. See the expansion / explanation in the\nmargin.\n\n::: column-margin\n$$\n\\begin{eqnarray}\n\\frac{1}{3}*i*e^{-i14t} &=& i *\\frac{1}{3} \\Big\\{cos(-14t) + i(sin(-14t) \\Big\\}\\\\\n&=& i *\\frac{1}{3} \\Big\\{cos(14t) - i*sin(14t)\\Big\\}\\\\\n&=& \\frac{1}{3} \\Big\\{i*cos(14t) + sin(14t)\\Big\\}\\\\\n&=& \\frac{1}{3} \\Big\\{sin(14t) + i*cos(14t)\\Big\\}\\\\\n\\end{eqnarray}\n$$\n\nwhich are respectively the desired *x* and *y* parametric functions for\nthe third term.\n:::\n\n## Rotational Symmetry\n\nWe notice a pattern in @fig-mystery-curve, our inspiration example: the\nshape has a five-fold symmetry: If we rotate the entire figure by\n$\\frac{2\\pi}{5}$, it will overlap exactly with the original. Further, we\nsuspect that the curve has 5 \"pieces\", that repeat every\n$\\frac{2\\pi}{5}$. If we chop up the parametric variable $t$ into 5\nsections, we might obtain each individual *piece*, rotated by that\nangle. What properties does the generating function @eq-mystery-curve\nhave that causes this symmetry?\n\nFollowing the development in Frank Farris' book, let us record our\nideas/suspicions of symmetry as:\n\n$$\n\\begin{eqnarray}\n\\mu(t) &= \\mu(t + \\color{Blue}{\\Large\\pmb{2\\pi/5}})\\\\\n&= e^{\\color{Blue}{\\huge\\pmb{2\\pi *i/5}}} * \\mu(t)\n\\end{eqnarray}\n$$ {#eq-symmetry-suspicion}\n\nDoes this work out? Let's see:\n\n$$\n\\begin{eqnarray}\n\\mu(t + 2\\pi/5) &=& \\Big\\{ e^{i(t + 2\\pi/5)} + \\frac{1}{2}*e^{i6(t + 2\\pi/5)} + \\frac{1}{3}*i*e^{-i14(t + 2\\pi/5)}\\Big\\}\\\\\n&=& \\Big\\{e^{2\\pi i/5} *e^{it} + \\frac{1}{2}*e^{12\\pi i/5} *e^{i6t} + \\frac{1}{3}*e^{-28\\pi i/5} *e^{-i14t}\\Big\\}\\\\\n&=& \\Big\\{e^{2\\pi i/5}*e^{it} + \\frac{1}{2}*e^{(10+2)\\pi i/5}*e^{i6t} +  \\frac{1}{3}*e^{(-30 +2)\\pi i/5} *e^{-i14t}\\Big\\}\\\\\n&=& e^{2\\pi i/5}* \\Big\\{ e^{it} + \\frac{1}{2}*e^{i6t} + \\frac{1}{3}*i*e^{-i14t}\\Big\\}\\\\\n\\end{eqnarray}\n$$ {#eq-five-fold-symmetry}\n\nSo if we shift time by $t = 2\\pi/5$, we get the same pattern rotated by\n$2\\pi/5$ radians. [Because the frequencies 1, 6, and ‚àí14 are all congruent to 1 modulo 5]{.bg-pink .black}, shifting time by $2\\pi/5$ causes the equation to add on a complex rotation term of $e^{2\\pi*i/5}$. Time shifts are Angle Shifts. \n\nAnd our mystery curve hence meets the symmetry condition in @eq-symmetry-suspicion. \n\n\n\n\n### The Symmetry Condition Theorem\n\nSuppose that $m$ and $k$ are integers and that all the frequency numbers\n$n_j$, $j={1..M}$ in the finite sum:\n\n$$\nf(t) = \\sum_{i=1}^M(a_1*e^{in_1t} + a_2*e^{in_2t}...+ a_M*e^{in_Mt})\n$$ have $n_j = k(mod~ùëö)$.\n\nThen, for any choice of the [**complex**]{.bg-pink .black} coefficients $a_j$, $f(t)$ satisfies the symmetry condition: \n\n$$\nf(t + \\frac{2\\pi}{m}) = e{\\frac{2k*\\pi*i}{m}} * f(t)\\\\\nfor~ all~ t\n$$ \n\nWhat a mouthful! What does that mean?\n\nIf we take a set of $M$ integer frequencies, such that they have the\n**same remainder** $k$ when divided by another integer $m$, then these\nfrequencies when attached to rotating circles will give us $m$-fold\nsymmetry.\nE.g: M = 5, m = 7, k = 1\nimplies the frequencies are -14+1, -7+1, 1, 7+1, 14+1\n\n\n::: callout-note\n### Complex Coefficients?\nQuestion: How do we handle $n_j$, $j={1..M}$ being [complex]{.bg-pink .black}, at least some of them?\n\nConsider a $term = i/3 * e^{i6t}$. \nWe can expand this as:\n\n$$\n\\begin{eqnarray}\nterm &=& i/3 * e^{i6t}\\\\\n&=& i/3 * \\big[cos(6t) + i*sin(6t)\\big]\\\\\n&=& -1/3*sin(6t) + i/3*cos(t)\\\\\n\\end{eqnarray}\n$$\nWe can view this as a rotation by $\\pi/2$ in the counter-clockwise direction. Other angles will contribute to rotations of the coefficients in the same way.\nComplex Coefficients will alter the nature of the pattern of course, but not the symmetry!\n\n:::\n\n\n::: callout-note\n### Mutually Prime?\nQuestion: What happens when $k$ is a *factor* of $m$? E.g: $k=3$ and\n$m=9$: what happens? Find out!\n:::\n\n## Design Principles for Rotational Symmetry\n\nHow do we capture all of the above in a set of design principles for\nsymmetric rotation-based patterns? The *design parameters* for us are:\n\n-   Number of frequencies / rolling circles: M\n-   The Frequency values for each rolling circle: $n_j$, $j={1..M}$\n-   The (complex) Amplitudes $a_j$, $j={1..M}$\n\nLarger values of $M$ give a more fine grain structure to the pattern,\nespecially when combined with *diminishing amplitudes* of $a_j$, an idea\nthat we will encounter again in [Making\nNoise](../../Modules/30-MakingNoise/index.qmd#d.-fractal-overlay-and-combining).\n\nLet us create an equation, using the following parameters:\n\n- M = 5 (Number of rotating circles)\n- m = 7 (Prime Modulus) i.e. **Order** of Symmetry\n- k = 2  (The remainder of $n*m~mod~k$) i.e. **Type** of Symmetry\n\nHere is the plot of the frequency components:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"prime_multiple\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"frequency\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"amplitude\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-14\",\"2\":\"-12\",\"3\":\"-0.1666667\"},{\"1\":\"-7\",\"2\":\"-5\",\"3\":\"-0.4000000\"},{\"1\":\"0\",\"2\":\"2\",\"3\":\"1.0000000\"},{\"1\":\"7\",\"2\":\"9\",\"3\":\"0.2222222\"},{\"1\":\"14\",\"2\":\"16\",\"3\":\"0.1250000\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=2100}\n:::\n:::\n\n\n\nThe function for this curve would be:\n\n$$\n\\begin{multline}\n\\mu(t) = {\\large{\\color{hotpink}{1}} * {e^{\\color{Blue}{\\large{\\pmb{2it}}}}}}+\n\\\\\n+{\\large{\\color{hotpink}{0.2222}} * {e^{\\color{Blue}{\\large{\\pmb{9it}}}}}} +\n{\\large{\\color{hotpink}{0.125}} *\n{e^{\\color{Blue}{\\large{\\pmb{16it}}}}}}\n\\\\\\ -\n{\\large{\\color{hotpink}{0.4}} * {e^{\\color{Blue}{\\large{\\pmb{-5it}}}}}} \n-{\\large{\\color{hotpink}{0.1667}} * {e^{\\color{Blue}{\\large{\\pmb{-12it}}}}}}\n\\\\\\\n\\end{multline}\n$${#eq-mystery-curve2}\n\n\nLet us now plot this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remainder = 2 from 7\n# frequencies: 2, 7+2, 14+2, -7+2, -14+2\ndata2 <- tibble::tibble(\n  t = seq(0, 2 * pi, 0.001),\n  x = cos(2 * t) + 0.2222 * cos(9 * t) + 0.0765 * cos(16 * t) + 0.2448 * sin(5 * t) + 0.1020 * sin(12 * t),\n  y = sin(2 * t) + 0.2222 * sin(9 * t) + 0.0765 * sin(16 * t) + 0.2448 * cos(5 * t) + 0.1020 * cos(12 * t)\n)\ndata2 %>%\n  gf_point(y ~ x) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mystery-curve-2-1.png){width=2100}\n:::\n:::\n\n\n\nThere, we have designed a pattern with seven-fold rotational symmetry. Can you make this in `p5.js`? Can you try for other orders and types of symmetry?\n\n## Mirror Symmetry\n\nThe coordinate system defines a positive increase in angle as the **counterclockwise direction**. So an increase in the parameter $t$, increases the angle for each frequency component in that direction, **if their coefficient is positive**, and the other way of their **coefficient is negative**. So far so good.\n\nConsider a small modification to our original @fig-mystery-curve:\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n## Original Mystery Curve\n# ## remainder = +1 from 5\n# ## frequencies 1, 5+1, -15+1\ndata1 <- tibble::tibble(\n  t = seq(0, 2 * pi, 0.001),\n  x = cos(t) + cos(6 * t) / 2 + sin(14 * t) / 3,\n  y = sin(t) + sin(6 * t) / 2 + cos(14 * t) / 3\n)\n\n# Mystery Curve\ndata1 %>%\n  gf_point(y ~ x) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Derived from Mystery\n# Remainder = 2 from 5\n# Frequencies: 2, 5+2, -15+2\n# Coeffs: 1,1,1\ndata3 <- tibble::tibble(\n  t = seq(0, 2 * pi, 0.001),\n  x = cos(t) + cos(6 * t) + cos(14 * t),\n  y = sin(t) + sin(6 * t) + sin(14 * t)\n)\ndata3 %>%\n  gf_point(y ~ x) %>%\n  gf_refine(coord_equal()) %>%\n  gf_hline(yintercept = 0) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=2100}\n:::\n:::\n\n\n\nIt should be immediately clear that the second pattern above is the same above and below the horizontal line; it exhibits *horizontal mirror symmetry*, $f(-t) = f(t)$.\n\nUnder what conditions would a pattern be symmetric about an arbitrarily-tilted mirror, a mirror at angle $\\alpha$ say?\n\nFrom Farris: \n\n:::callout-note\n### Mirror at Angle $\\alpha$\nWhen every coefficient is a real multiple of $e^{i\\alpha}, the\ncurve satisfies $f(-t) = e^{2\\alpha*i}f(t)$. \n\nThe right-hand side is the correct expression for reflection across the line through the origin inclined at angle $\\alpha$(Check!!). If one wants curves with slanted mirrors, simply finds a curve symmetric about the x-axis satisfying $f(-t) = f(t)$, and tilts it by $\\alpha$.\n:::\n\n\n## Fun Extras to Try\n\nIt would be cool to simply develop the equations for any pattern in **complex notation** as in @eq-mystery-curve and throw that into code, without the tedious conversions into sines and cosines. Can we try that?\n\nHere is an example in R: \n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nt <- seq(0, 2 * pi, by = 0.001)\nx <- t\n## NOTE: need the minus sign here inside the exponential!!\n## AND Absolutely need the \"1\" here before the solitary \"i\"!!\n## Need to figure these out\nf1 <- function(x) {\n  (exp(-(0 + 1i) * x) +\n    0.25 * exp(-(0 + 6i) * x) +\n    0.2 * exp(-(0 + 11i) * x))\n}\nplot(f1(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n##\nf2 <- function(x) {\n  (exp(-(0 + 2i) * x) +\n    0.2222 * exp(-(0 + 9i) * x) +\n    0.125 * exp(-(0 + 16i) * x) -\n    0.4 * exp(-(0 - 5i) * x) -\n    0.1667 * exp(-(0 - 12i) * x))\n}\nplot(f2(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-2.png){width=2100}\n:::\n\n```{.r .cell-code}\n## Mystery Pattern\n##\n## Plotting with Exponential Functions\nf3 <- function(x) {\n  (exp(-(0 + 1i) * x) +\n    0.5 * exp(-(0 + 6i) * x) +\n    1 / 3 * exp(-(0 - 14i) * x)\n  )\n}\nplot(f3(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-3.png){width=2100}\n:::\n\n```{.r .cell-code}\n##\nf4 <- function(x) {\n  (exp(-(0 + 1i) * x) +\n    0.5 * exp(-(0 + 6i) * x) +\n    1 / 3 * exp(-(0 + 14i) * x)\n  )\n}\nplot(f4(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-4.png){width=2100}\n:::\n\n```{.r .cell-code}\n##\n# ## remainder = +2 from 5\n# ## frequencies 0+2, 5+2, -15+2\n# ## Coefficients 1, 1, 1\nf5 <- function(x) {\n  (exp(-(0 + 2i) * x) +\n    1.0 * exp(-(0 + 7i) * x) +\n    1.0 * exp(-(0 + 13i) * x)\n  )\n}\nplot(f5(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-5.png){width=2100}\n:::\n\n```{.r .cell-code}\n##\n# ## remainder = +2 from 5\n# ## frequencies 0+2, 5+2, -15+2\n# ## Coefficients 1, -1/2, -i/3 ( Note!!!)\nf6 <- function(x) {\n  (exp(-(0 + 2i) * x) +\n    -0.5 * exp(-(0 + 7i) * x) +\n    -1 / 3 * exp(pi / 2 * 1i) * exp(-(0 + 13i) * x)\n  )\n}\nplot(f6(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-6.png){width=2100}\n:::\n:::\n\n::: {.cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\n# t <- seq(0, 2 * pi, by = 0.001) # Already computed\ndata1 <- tibble(t, pattern = f1(t))\ndata2 <- tibble(t, pattern = f2(t))\ndata3 <- tibble(t, pattern = f3(t))\ndata4 <- tibble(t, pattern = f4(t))\ndata5 <- tibble(t, pattern = f5(t))\ndata6 <- tibble(t, pattern = f6(t))\n\ndata1 %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-ggformula-1.png){width=2100}\n:::\n\n```{.r .cell-code}\ndata2 %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-ggformula-2.png){width=2100}\n:::\n\n```{.r .cell-code}\ndata3 %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-ggformula-3.png){width=2100}\n:::\n\n```{.r .cell-code}\ndata4 %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-ggformula-4.png){width=2100}\n:::\n\n```{.r .cell-code}\ndata5 %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-ggformula-5.png){width=2100}\n:::\n\n```{.r .cell-code}\ndata6 %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-ggformula-6.png){width=2100}\n:::\n:::\n\n\n\n\nTwo more to compare function and trigonometric notation:\n\n\n\n::: {.cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\n# ## remainder = +2 from 5\n# ## frequencies 0+2, 5+2, -15+2\n# ## Coefficients 1, 1, 1\nf7 <- function(x) {\n  (exp(-(0 + 2i) * x) + exp(-(0 + 7i) * x) + exp(-(0 + 13i) * x))\n}\nplot(f7(x), asp = 1, cex = 0.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=2100}\n:::\n\n```{.r .cell-code}\ndata7a <- tibble::tibble(\n  t = seq(0, 2 * pi, 0.001),\n  x = cos((0 + 2) * t) + cos((5 + 2) * t) + cos(-(-15 + 2) * t),\n  y = sin((0 + 2) * t) + sin((5 + 2) * t) + sin(-(-15 + 2) * t)\n)\ndata7b <- tibble(t, pattern = f7(t))\n###\ndata7a %>%\n  gf_point(y ~ x) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-2.png){width=2100}\n:::\n\n```{.r .cell-code}\ndata7b %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-3.png){width=2100}\n:::\n:::\n\n\n\n##############################################\n\n\n::: {.cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\n# ## remainder = +2 from 5\n# ## frequencies 0+2, 5+2, -15+2\n# ## Coefficients 1, -1/2, -i/3 ( Note!!!)\nf8 <- function(x) {\n  (exp(-(0 + 2i) * x) - 0.5 * exp(-(0 + 7i) * x) +\n    1i / 3 * exp((0 + 13i) * x))\n}\nplot(f8(x), asp = 1, cex = 0.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=2100}\n:::\n\n```{.r .cell-code}\ndata8a <- tibble::tibble(\n  t = seq(0, 2 * pi, 0.001),\n  x = cos(2 * t) - 0.5 * cos(7 * t) +\n    0.3 * cos(-13 * t + pi / 2),\n  y = sin(2 * t) - 0.5 * sin(7 * t) +\n    0.3 * sin(-13 * t + pi / 2)\n)\ndata8b <- tibble(t, pattern = f8(t))\n###\ndata8a %>%\n  gf_point(y ~ x) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-2.png){width=2100}\n:::\n\n```{.r .cell-code}\ndata8b %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-3.png){width=2100}\n:::\n:::\n\n\n\n\n## {{< iconify mingcute thought-line >}} Wait, But Why?\n\n\n{{< lipsum 1 >}}\n\n\n\n\n## {{< iconify mingcute thought-line >}} Conclusion\n\n\n{{< lipsum 1 >}}\n\n\n\n\n## {{< iconify ooui references-ltr >}} References\n\n1.  Gorilla Sun Blog.\n    <https://www.gorillasun.de/blog/parametric-functions-and-particles/>\n\n2.  CrateCode: Complex Generative Art with p5.js.\n    <https://cratecode.com/info/p5js-generative-art-complex-functions>\n\n3.  Gorilla Sun Blog.\n    <https://www.gorillasun.de/blog/parametric-functions-and-particles/>\n\n::: {#refs style=\"font-size: 60%;\"}\n###### {{< iconify lucide package-check >}} R Package Citations\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nPackage      Version   Citation    \n-----------  --------  ------------\nambient      1.0.2     @ambient    \nmosaicCalc   0.6.4     @mosaicCalc \nplot3D       1.4.1     @plot3D     \n\n\n:::\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}