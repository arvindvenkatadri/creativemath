{
  "hash": "a30516ddb2f730db53a249e55e37d177",
  "result": {
    "markdown": "---\ntitle: \"\\U0001F554 Modelling Time Series\"\nauthor: \"Arvind Venkatadri\"\ndate: 19/NOv/2022\ndate-modified: \"2023-01-29\"\norder: 50\nabstract: We will look at the basic models for Time Series\ntags:\n- Smoothing\n- Exponential Models\n- ARIMA\n- Forecasting\n- Prophet\n---\n\n\n\n\n## Introduction\n\nIn this module we will look at modelling of time series. We will start\nwith the simplest of *expoential* models and go all the way through\n**ARIMA** and forecasting with **Prophet**.\n\nFirst, some terminology!\n\n## Additive and Multiplicative Time Series Models\n\nAdditive Time Series can be represented as:\n\n$$\nY_t = S_t + T_t + ϵ_t\n$$\n\nMultiplicative Time Series can be described as:\n\n$$\nY_t = S_t × T_t × ϵ_t\n$$\n\nLet us consider a *Multiplicative Time Series*, pertaining to sales of\nsouvenirs at beaches in Australia: The time series looks like this:\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-231d116755bf43f8633b\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-231d116755bf43f8633b\">{\"x\":{\"data\":[{\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],\"y\":[1664.81,2397.53,2840.71,3547.29,3752.96,3714.74,4349.61,3566.34,5021.82,6423.48,7600.6,19756.21,2499.81,5198.24,7225.14,4806.03,5900.88,4951.34,6179.12,4752.15,5496.43,5835.1,12600.08,28541.72,4717.02,5702.63,9957.58,5304.78,6492.43,6630.8,7349.62,8176.62,8573.17,9690.5,15151.84,34061.01,5921.1,5814.58,12421.25,6369.77,7609.12,7224.75,8121.22,7979.25,8093.06,8476.7,17914.66,30114.41,4826.64,6470.23,9638.77,8821.17,8722.37,10209.48,11276.55,12552.22,11637.39,13606.89,21822.11,45060.69,7615.03,9849.69,14558.4,11587.33,9332.56,13082.09,16732.78,19888.61,23933.38,25391.35,36024.8,80721.71,10243.24,11266.88,21826.84,17357.33,15997.79,18601.53,26155.15,28586.52,30505.41,30821.33,46634.38,104660.67],\"text\":[\"time:  1<br />.value:   1664.81\",\"time:  2<br />.value:   2397.53\",\"time:  3<br />.value:   2840.71\",\"time:  4<br />.value:   3547.29\",\"time:  5<br />.value:   3752.96\",\"time:  6<br />.value:   3714.74\",\"time:  7<br />.value:   4349.61\",\"time:  8<br />.value:   3566.34\",\"time:  9<br />.value:   5021.82\",\"time: 10<br />.value:   6423.48\",\"time: 11<br />.value:   7600.60\",\"time: 12<br />.value:  19756.21\",\"time: 13<br />.value:   2499.81\",\"time: 14<br />.value:   5198.24\",\"time: 15<br />.value:   7225.14\",\"time: 16<br />.value:   4806.03\",\"time: 17<br />.value:   5900.88\",\"time: 18<br />.value:   4951.34\",\"time: 19<br />.value:   6179.12\",\"time: 20<br />.value:   4752.15\",\"time: 21<br />.value:   5496.43\",\"time: 22<br />.value:   5835.10\",\"time: 23<br />.value:  12600.08\",\"time: 24<br />.value:  28541.72\",\"time: 25<br />.value:   4717.02\",\"time: 26<br />.value:   5702.63\",\"time: 27<br />.value:   9957.58\",\"time: 28<br />.value:   5304.78\",\"time: 29<br />.value:   6492.43\",\"time: 30<br />.value:   6630.80\",\"time: 31<br />.value:   7349.62\",\"time: 32<br />.value:   8176.62\",\"time: 33<br />.value:   8573.17\",\"time: 34<br />.value:   9690.50\",\"time: 35<br />.value:  15151.84\",\"time: 36<br />.value:  34061.01\",\"time: 37<br />.value:   5921.10\",\"time: 38<br />.value:   5814.58\",\"time: 39<br />.value:  12421.25\",\"time: 40<br />.value:   6369.77\",\"time: 41<br />.value:   7609.12\",\"time: 42<br />.value:   7224.75\",\"time: 43<br />.value:   8121.22\",\"time: 44<br />.value:   7979.25\",\"time: 45<br />.value:   8093.06\",\"time: 46<br />.value:   8476.70\",\"time: 47<br />.value:  17914.66\",\"time: 48<br />.value:  30114.41\",\"time: 49<br />.value:   4826.64\",\"time: 50<br />.value:   6470.23\",\"time: 51<br />.value:   9638.77\",\"time: 52<br />.value:   8821.17\",\"time: 53<br />.value:   8722.37\",\"time: 54<br />.value:  10209.48\",\"time: 55<br />.value:  11276.55\",\"time: 56<br />.value:  12552.22\",\"time: 57<br />.value:  11637.39\",\"time: 58<br />.value:  13606.89\",\"time: 59<br />.value:  21822.11\",\"time: 60<br />.value:  45060.69\",\"time: 61<br />.value:   7615.03\",\"time: 62<br />.value:   9849.69\",\"time: 63<br />.value:  14558.40\",\"time: 64<br />.value:  11587.33\",\"time: 65<br />.value:   9332.56\",\"time: 66<br />.value:  13082.09\",\"time: 67<br />.value:  16732.78\",\"time: 68<br />.value:  19888.61\",\"time: 69<br />.value:  23933.38\",\"time: 70<br />.value:  25391.35\",\"time: 71<br />.value:  36024.80\",\"time: 72<br />.value:  80721.71\",\"time: 73<br />.value:  10243.24\",\"time: 74<br />.value:  11266.88\",\"time: 75<br />.value:  21826.84\",\"time: 76<br />.value:  17357.33\",\"time: 77<br />.value:  15997.79\",\"time: 78<br />.value:  18601.53\",\"time: 79<br />.value:  26155.15\",\"time: 80<br />.value:  28586.52\",\"time: 81<br />.value:  30505.41\",\"time: 82<br />.value:  30821.33\",\"time: 83<br />.value:  46634.38\",\"time: 84<br />.value: 104660.67\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(44,62,80,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],\"y\":[2526.50735571811,2893.21376332228,3251.74855860489,3602.04565160519,3944.03895236245,4277.66237091591,4602.84981730485,4919.53520156852,5227.65243374618,5527.13542387709,5817.9180820005,6099.75037098183,6372.55890933082,6636.54259055322,6891.90030815477,7138.83095564121,7377.5334265183,7608.20661429178,7831.0494124674,8046.2607145509,8254.03941404802,8450.10493200775,8631.19119751611,8799.0188661344,8955.30859342394,9101.78103494603,9240.15684626198,9372.1566829331,9499.50120052071,9623.91105458611,9747.10690069062,9870.80939439554,9978.31177428501,10057.0955220841,10115.1636580656,10160.5192025023,10201.1651756669,10245.1045978322,10300.3404892709,10374.8758702558,10476.7137610597,10613.8571819553,10755.5861672439,10872.424897715,10974.242613374,11070.9085542259,11172.291960276,11288.2620715296,11428.6881279919,11603.4393696681,11822.3850365635,12095.3943686834,12432.3366060328,12782.814523807,13102.0350993185,13408.2738757488,13719.8063962795,14054.9082040921,14431.8548423679,14868.9218542886,15384.3847830356,15996.5191717905,16723.6005637346,17534.3977148437,18388.0011535912,19288.1690819052,20238.6597017139,21243.2312149455,22305.6418235283,23429.6497293903,24619.0131344598,25877.490240665,27208.8392499341,28616.8183641952,30100.2215541434,31654.2602562521,33277.318871116,34967.7817993303,36724.0334414901,38544.4581981904,40427.4404700262,42371.3646575925,44374.6151614845,46435.5763822972],\"text\":[\"time:  1<br />.value_smooth:  2526.507\",\"time:  2<br />.value_smooth:  2893.214\",\"time:  3<br />.value_smooth:  3251.749\",\"time:  4<br />.value_smooth:  3602.046\",\"time:  5<br />.value_smooth:  3944.039\",\"time:  6<br />.value_smooth:  4277.662\",\"time:  7<br />.value_smooth:  4602.850\",\"time:  8<br />.value_smooth:  4919.535\",\"time:  9<br />.value_smooth:  5227.652\",\"time: 10<br />.value_smooth:  5527.135\",\"time: 11<br />.value_smooth:  5817.918\",\"time: 12<br />.value_smooth:  6099.750\",\"time: 13<br />.value_smooth:  6372.559\",\"time: 14<br />.value_smooth:  6636.543\",\"time: 15<br />.value_smooth:  6891.900\",\"time: 16<br />.value_smooth:  7138.831\",\"time: 17<br />.value_smooth:  7377.533\",\"time: 18<br />.value_smooth:  7608.207\",\"time: 19<br />.value_smooth:  7831.049\",\"time: 20<br />.value_smooth:  8046.261\",\"time: 21<br />.value_smooth:  8254.039\",\"time: 22<br />.value_smooth:  8450.105\",\"time: 23<br />.value_smooth:  8631.191\",\"time: 24<br />.value_smooth:  8799.019\",\"time: 25<br />.value_smooth:  8955.309\",\"time: 26<br />.value_smooth:  9101.781\",\"time: 27<br />.value_smooth:  9240.157\",\"time: 28<br />.value_smooth:  9372.157\",\"time: 29<br />.value_smooth:  9499.501\",\"time: 30<br />.value_smooth:  9623.911\",\"time: 31<br />.value_smooth:  9747.107\",\"time: 32<br />.value_smooth:  9870.809\",\"time: 33<br />.value_smooth:  9978.312\",\"time: 34<br />.value_smooth: 10057.096\",\"time: 35<br />.value_smooth: 10115.164\",\"time: 36<br />.value_smooth: 10160.519\",\"time: 37<br />.value_smooth: 10201.165\",\"time: 38<br />.value_smooth: 10245.105\",\"time: 39<br />.value_smooth: 10300.340\",\"time: 40<br />.value_smooth: 10374.876\",\"time: 41<br />.value_smooth: 10476.714\",\"time: 42<br />.value_smooth: 10613.857\",\"time: 43<br />.value_smooth: 10755.586\",\"time: 44<br />.value_smooth: 10872.425\",\"time: 45<br />.value_smooth: 10974.243\",\"time: 46<br />.value_smooth: 11070.909\",\"time: 47<br />.value_smooth: 11172.292\",\"time: 48<br />.value_smooth: 11288.262\",\"time: 49<br />.value_smooth: 11428.688\",\"time: 50<br />.value_smooth: 11603.439\",\"time: 51<br />.value_smooth: 11822.385\",\"time: 52<br />.value_smooth: 12095.394\",\"time: 53<br />.value_smooth: 12432.337\",\"time: 54<br />.value_smooth: 12782.815\",\"time: 55<br />.value_smooth: 13102.035\",\"time: 56<br />.value_smooth: 13408.274\",\"time: 57<br />.value_smooth: 13719.806\",\"time: 58<br />.value_smooth: 14054.908\",\"time: 59<br />.value_smooth: 14431.855\",\"time: 60<br />.value_smooth: 14868.922\",\"time: 61<br />.value_smooth: 15384.385\",\"time: 62<br />.value_smooth: 15996.519\",\"time: 63<br />.value_smooth: 16723.601\",\"time: 64<br />.value_smooth: 17534.398\",\"time: 65<br />.value_smooth: 18388.001\",\"time: 66<br />.value_smooth: 19288.169\",\"time: 67<br />.value_smooth: 20238.660\",\"time: 68<br />.value_smooth: 21243.231\",\"time: 69<br />.value_smooth: 22305.642\",\"time: 70<br />.value_smooth: 23429.650\",\"time: 71<br />.value_smooth: 24619.013\",\"time: 72<br />.value_smooth: 25877.490\",\"time: 73<br />.value_smooth: 27208.839\",\"time: 74<br />.value_smooth: 28616.818\",\"time: 75<br />.value_smooth: 30100.222\",\"time: 76<br />.value_smooth: 31654.260\",\"time: 77<br />.value_smooth: 33277.319\",\"time: 78<br />.value_smooth: 34967.782\",\"time: 79<br />.value_smooth: 36724.033\",\"time: 80<br />.value_smooth: 38544.458\",\"time: 81<br />.value_smooth: 40427.440\",\"time: 82<br />.value_smooth: 42371.365\",\"time: 83<br />.value_smooth: 44374.615\",\"time: 84<br />.value_smooth: 46435.576\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(51,102,255,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":43.7625570776256,\"r\":7.30593607305936,\"b\":25.5707762557078,\"l\":46.027397260274},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":14.6118721461187},\"title\":{\"text\":\"Time Series Plot\",\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":17.5342465753425},\"x\":0,\"xref\":\"paper\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":true,\"range\":[-3.15,88.15],\"tickmode\":\"auto\",\"ticktext\":[\"0\",\"20\",\"40\",\"60\",\"80\"],\"tickvals\":[-4.44089209850063e-16,20,40,60,80],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"20\",\"40\",\"60\",\"80\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(204,204,204,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.22139200221392,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(204,204,204,1)\",\"gridwidth\":0.22139200221392,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"\",\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":true,\"range\":[-3484.983,109810.463],\"tickmode\":\"auto\",\"ticktext\":[\"0\",\"25000\",\"50000\",\"75000\",\"100000\"],\"tickvals\":[0,25000,50000,75000,100000],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"25000\",\"50000\",\"75000\",\"100000\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(204,204,204,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.22139200221392,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(204,204,204,1)\",\"gridwidth\":0.22139200221392,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"\",\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(44,62,80,1)\",\"width\":0.33208800332088,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.88976377952756,\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":11.689497716895}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"4d0c4bfa34cc\":{\"x\":{},\"y\":{},\"type\":\"scatter\"},\"4d0cb42af\":{\"x\":{},\"y\":{}}},\"cur_data\":\"4d0c4bfa34cc\",\"visdat\":{\"4d0c4bfa34cc\":[\"function (y) \",\"x\"],\"4d0cb42af\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nNote that along with the trend, the amplitude of both *seasonal* and\n*noise* components are also increasing in a *multiplicative* here !! A\nmultiplicative time series can be converted to additive by taking a\n`log` of the time series.\n\n## Stationarity\n\nA time series is said to be stationary if it holds the following\nconditions true:\n\n1.  The mean value of time-series is constant over time, which implies,\n    the trend component is nullified/constant.\n2.  The variance does not increase over time.\n3.  Seasonality effect is minimal.\n\nThis means it is devoid of trend or seasonal patterns, which makes it\nlooks like a random white noise irrespective of the observed time\ninterval.( i.e. self-similar and fractal)\n\n## A Bit of Forecasting?\n\nWe are always interested in the future. We will do this in three ways:\n\n-   use Simple Exponential Smoothing\n-   use a package called `forecast` to fit an ARIMA (Autoregressive\n    Moving Average Integrated Model) model to the data and make\n    predictions for weekly sales;\n-   And do the same using a package called `prophet`.\n\n### Forecasting using Exponential Smoothing\n\nFor example, the file contains total annual rainfall in inches for\nLondon, from 1813-1912 (original data from Hipel and McLeod, 1994).\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThere is a nearly constant value of about 25 around which there are\nrandom fluctuations and it seems to be an additive model. How can we\nmake forecasts with this time series?\n\n**A deliberate detour:**\n\nLet's see some quick **notation** to aid understanding: Much of\nsmoothing is based on the high school concept of a straight line, \\$ y =\nm \\* x + c\\$.\n\nIn the following, we choose to describe the models with:\n\n-   $y$ : the actual values in the time series\n-   $\\hat y$ : our predictions from whichever model we create\n-   $l$ : a *level* or *mean* as forecast;\n-   $b$ : a *trend* variable; akin to the *slope* in the straight line\n    equation;\n-   $s$ : seasonal component of the time series. Note that this is a\n    *set of values* that stretch over one *cycle* of the time series.\n\nIn Exponential Smoothing and Forecasting, we make three models of\nincreasing complexity:\n\n1.  Simple Exponential Model: Here we deal only with the mean or *level*\n    aspect of the (decomposed) time series and make predictions with\n    that.\n\n2.  Holt Model: Here we use the `level` and the `trend` from the\n    decomposed time series for predictions\n\n3.  Holt-Winters Model: Here we use the `level`, the `trend`, and the\n    `seasonal` component from the decomposed time series for\n    predictions.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"nomnoml html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-9e9d5603fd946777dabd\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-9e9d5603fd946777dabd\">{\"x\":{\"code\":\"\\n#fill: #FEFEFF\\n#lineWidth: 1\\n#zoom: 4\\n#direction: right\\n\\n[<start>st]->[<input>input]\\n[<input> input]->[<package> Time  Series|Decomposition]\\n[<package> Time  Series|Decomposition]->[<component> Mean/Level]\\n[<package> Time  Series|Decomposition]->[<component> Slope/Trend]\\n[<package> Time  Series|Decomposition]->[<component> Seasonal]\\n\\n//Simple Exponential Smoothing\\n[<component> Mean/Level]->[Delay A1]\\n[Delay A1]->[Delay A2]\\n[Delay A2]->[Delay A3]\\n[Delay A3]...->...[Delay AN]\\n[Delay A1]->[<state> A1]\\n[Delay A2]->[<state> A2]\\n[Delay A3]->[<state> A3]\\n[Delay AN]->[<state> AN]\\n[<state> AN]---([<note> $$alpha(1-alpha)^i$$]\\n\\n[<state> A1]->[<state> Add1]\\n[<state> A2]->[<state> Add1]\\n[<state> A3]->[<state> Add1]\\n[<state> AN]->[<state> Add1]\\n[<state> Add1]->[<end> Output]\\n\\n//Holt \\n[<component> Slope/Trend]->[Delay B1]\\n[Delay B1]->[Delay B2]\\n[Delay B2]->[Delay B3]\\n[Delay B3]...->...[Delay BN]\\n[Delay B1]->[<state> B1]\\n[Delay B2]->[<state> B2]\\n[Delay B3]->[<state> B3]\\n[Delay BN]->[<state> BN]\\n[<state> BN]---([<note> $$beta(1-beta)^i$$]\\n[<state> B1]->[<state> Add2]\\n[<state> B2]->[<state> Add2]\\n[<state> B3]->[<state> Add2]\\n[<state> BN]->[<state> Add2]\\n[<state> Add2]->[<end> Output]\\n\\n// Holt Winters\\n[<component> Seasonal]->[Delay C1]\\n[Delay C1]->[Delay C2]\\n[Delay C2]->[Delay C3]\\n[Delay C3]...->...[Delay CN]\\n[Delay C1]->[<state> C1]\\n[Delay C2]->[<state> C2]\\n[Delay C3]->[<state> C3]\\n[Delay CN]->[<state> CN]\\n[<state> CN]---([<note> $$gamma(1-gamma)^i$$]\\n[<state> C1]->[<state> Add3]\\n[<state> C2]->[<state> Add3]\\n[<state> C3]->[<state> Add3]\\n[<state> CN]->[<state> Add3]\\n[<state> Add3]->[<end> Output]\\n\\n// Final Output\\n[<end> Output]->[<receiver> Forecast]\\n\",\"svg\":false,\"png\":null},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n**Simple Smoothing** is smoothing based forecasting using just the\n*level* ( i.e. mean) of the Time Series to make forecasts.\n\n**Double exponential** smoothing, or *Holt Smoothing Model*, is just\nexponential smoothing applied to both level and trend.\n\nThe idea behind **triple exponential smoothing**, or the *Holt-Winters\nSmoothing Model*, is to apply exponential smoothing to the seasonal\ncomponents in addition to level and trend.\n\n**What does \"Exponential\" mean?**\n\nAll three models use **memory**: at each time instant in the Time\nSeries, a set of past values, along with the present sample is used to\nmake a prediction of the relevant parameter ( level / slope / seasonal).\nThese are then added together to make the **forecast**.\n\nThe memory in each case controlled by a parameter: `alpha` for the\nestimate of the level `beta` for the slope estimate, and `gamma` for the\nseasonal component estimate at the current time point. All these\nparameters are between `0` and `1`. The model takes a **weighted\naverage** of past values of each parameter. The weights are derived in\nthe form of $\\alpha(1-\\alpha)^i$, where $i$ defines how old the sample\nis compared to the present one, thus forming a set of weights that\ndecrease *exponentially* with delay. Values of $\\alpha, \\beta. \\gamma$\nthat are close to 0 mean that significant weightage is placed on\nobservations in the past.(Memory is \"stronger\").To express this in\nmathematical notation we now need three equations: one for level, one\nfor the trend and one to combine the level and trend to get the expected\n$\\hat y$ .\n\nTo make forecasts using simple exponential smoothing in R, we can use\nthe `HoltWinters()` function in R, or the `forecast::ets()` function\nfrom `forecasts`. This latter function s more powerful.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, alpha = NULL, beta = NULL, gamma = NULL, seasonal = c(\"additive\", \n    \"multiplicative\"), start.periods = 2, l.start = NULL, b.start = NULL, \n    s.start = NULL, optim.start = c(alpha = 0.3, beta = 0.1, \n        gamma = 0.1), optim.control = list()) \nNULL\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (y, model = \"ZZZ\", damped = NULL, alpha = NULL, beta = NULL, \n    gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL, \n    biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999, \n        3), 0.98), opt.crit = c(\"lik\", \"amse\", \"mse\", \"sigma\", \n        \"mae\"), nmse = 3, bounds = c(\"both\", \"usual\", \"admissible\"), \n    ic = c(\"aicc\", \"aic\", \"bic\"), restrict = TRUE, allow.multiplicative.trend = FALSE, \n    use.initial.values = FALSE, na.action = c(\"na.contiguous\", \n        \"na.interp\", \"na.fail\"), ...) \nNULL\n```\n:::\n:::\n\n\nTo use `HoltWinters()` for simple exponential smoothing, we need to set\nthe parameters `beta=FALSE` and `gamma=FALSE` in the `HoltWinters()`\nfunction (the beta and gamma parameters are used for double exponential\nsmoothing, or triple exponential smoothing.\n\nTo use `forecast::ets`, we set the `model` argument to \"ANN\", \"AAN\", and\n\"AAA\" respectively for each of the three smoothing models.\n\nNote: The `HoltWinters()` function returns a list variable, that\ncontains several named elements.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/Applying Holt-Winters-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/Applying Holt-Winters-2.png){width=672}\n:::\n:::\n\n\n#### ARIMA\n\nWe can also use past trends and seasonality in the data to make\npredictions about the future using the forecast package. Here we use an\nauto ARIMA model to guess at the trend in the time series. Then we use\nthat model to forecast a few periods into the future.\n\nMathematically an ARIMA model can be shown as follows:\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"nomnoml html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-cca8f220705e3def6f8c\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-cca8f220705e3def6f8c\">{\"x\":{\"code\":\"\\n#fill: #FEFEFF\\n#lineWidth: 1\\n#zoom: 4\\n#direction: right\\n\\n\\n\",\"svg\":false,\"png\":null},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nWe will use the familiar Walmart Sales dataset, and try to predict\nweekly sales for one of the Departments.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nTime Series:\nStart = c(2010, 1) \nEnd = c(2012, 52) \nFrequency = 52 \n  [1] 106690.06 111390.36 107952.07 103652.58 112807.75 112048.41 117716.13\n  [8] 113117.35 111466.37 116770.82 126341.84 110204.77 107648.14 125592.28\n [15] 120247.90 120036.99 121902.19 133056.97 131995.00 134118.05 120172.47\n [22] 124821.44 126241.20 121386.73 116256.35 108781.57 131128.96 131288.83\n [29] 124601.48 117929.58 124220.10 125027.49 124372.90 114702.69 113009.41\n [36] 120764.22 123510.99 110052.15 105793.40 110332.92 110209.31 107544.02\n [43] 106015.41 100834.31 111384.36 116521.67 121695.13  93676.95 107317.32\n [50] 109955.90 103724.16  99043.34 114270.08 117548.75 112165.80 107742.95\n [57] 116225.68 120621.32 123405.41 122280.13 112905.09 126746.25 126834.30\n [64] 118632.26 111764.31 120882.84 124953.94 112581.20 119815.67 135260.49\n [71] 136364.46 135197.63 121814.84 128054.88 133213.04 127906.50 121483.11\n [78] 117284.94 138538.47 138567.10 133260.84 122721.92 130446.34 133762.77\n [85] 133939.40 116165.28 115663.78 132805.42 125954.30 116931.34 108018.21\n [92] 114793.92 115047.16 113966.34 112688.97 102798.99 119053.80 120721.07\n [99] 125041.39  93358.91 116427.93 118685.12 113021.23 102202.04 115507.25\n[106] 125038.09 119807.63 110870.94 118406.27 125840.82 132318.50 117030.73\n[113] 127706.00 137958.76 129438.22 123172.79 118589.44 130920.36 131341.85\n[120] 129031.19 127603.00 130573.37 139857.10 140806.36 124594.40 131935.56\n[127] 148798.05 129724.74 126861.49 121030.79 134832.22 137408.20 136264.68\n[134] 118845.34 124741.33 140657.40 128542.73 119121.35 115326.47 127009.22\n[141] 124559.93 123346.24 117375.38 106690.06 111390.36 107952.07 103652.58\n[148] 112807.75 112048.41 117716.13 113117.35 111466.37 116770.82 126341.84\n[155] 110204.77 107648.14\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSeries: sales_95_ts \nARIMA(0,1,1)(0,1,0)[52] \n\nCoefficients:\n          ma1\n      -0.8842\ns.e.   0.0530\n\nsigma^2 = 29974424:  log likelihood = -1033.02\nAIC=2070.03   AICc=2070.15   BIC=2075.3\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/ARIMA-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/ARIMA-2.png){width=672}\n:::\n:::\n\n\nWe're fairly limited in what we can actually tweak when using\n`autoplot()`, so instead we can convert the forecast object to a data\nframe and use ggplot() like normal:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n         Point Forecast    Lo 80    Hi 80    Lo 95    Hi 95\n2013.000       116571.1 109554.8 123587.5 105840.6 127301.7\n2013.019       126102.0 119038.7 133165.2 115299.7 136904.3\n2013.038       120871.5 113761.7 127981.4 109998.0 131745.1\n2013.058       111934.8 104778.7 119091.0 100990.5 122879.2\n2013.077       119470.2 112268.0 126672.3 108455.5 130484.9\n2013.096       126904.7 119656.9 134152.5 115820.1 137989.3\n2013.115       133382.4 126089.2 140675.6 122228.3 144536.5\n2013.135       118094.6 110756.3 125433.0 106871.6 129317.7\n2013.154       128769.9 121386.7 136153.1 117478.2 140061.6\n2013.173       139022.7 131594.8 146450.5 127662.8 150382.5\n2013.192       130502.1 123030.0 137974.3 119074.5 141929.8\n2013.212       124236.7 116720.5 131752.9 112741.7 135731.7\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 324 × 7\n   index key      value lo.80 lo.95 hi.80 hi.95\n   <dbl> <chr>    <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 2010  actual 106690.    NA    NA    NA    NA\n 2 2010. actual 111390.    NA    NA    NA    NA\n 3 2010. actual 107952.    NA    NA    NA    NA\n 4 2010. actual 103653.    NA    NA    NA    NA\n 5 2010. actual 112808.    NA    NA    NA    NA\n 6 2010. actual 112048.    NA    NA    NA    NA\n 7 2010. actual 117716.    NA    NA    NA    NA\n 8 2010. actual 113117.    NA    NA    NA    NA\n 9 2010. actual 111466.    NA    NA    NA    NA\n10 2010. actual 116771.    NA    NA    NA    NA\n# … with 314 more rows\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 324 × 8\n   index key      value lo.80 lo.95 hi.80 hi.95 actual_date\n   <dbl> <chr>    <dbl> <dbl> <dbl> <dbl> <dbl> <date>     \n 1 2010  actual 106690.    NA    NA    NA    NA 1975-07-04 \n 2 2010. actual 111390.    NA    NA    NA    NA 1975-07-04 \n 3 2010. actual 107952.    NA    NA    NA    NA 1975-07-04 \n 4 2010. actual 103653.    NA    NA    NA    NA 1975-07-04 \n 5 2010. actual 112808.    NA    NA    NA    NA 1975-07-04 \n 6 2010. actual 112048.    NA    NA    NA    NA 1975-07-04 \n 7 2010. actual 117716.    NA    NA    NA    NA 1975-07-04 \n 8 2010. actual 113117.    NA    NA    NA    NA 1975-07-04 \n 9 2010. actual 111466.    NA    NA    NA    NA 1975-07-04 \n10 2010. actual 116771.    NA    NA    NA    NA 1975-07-04 \n# … with 314 more rows\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/Plotting Forecast with ggplot-1.png){width=672}\n:::\n:::\n\n\n### A Bit of Forecasting?\n\nWe are always interested in the future. We will do this in three ways:\n\n-   use Simple Exponential Smoothing\n-   use a package called `forecast` to fit an ARIMA (Autoregressive\n    Moving Average Integrated Model) model to the data and make\n    predictions for weekly sales;\n-   And do the same using a package called\n\n## Workflow using Orange\n\n## Workflow using Radiant\n\n## Workflow using R\n\n[<i class=\"fas fa-file-csv\"></i> `fred_raw.csv`](/data/fred_raw.csv)\n\n## Conclusion\n\n## References\n\n1, Shampoo Dataset Brownlee:\nhttps://raw.githubusercontent.com/jbrownlee/Datasets/master/shampoo.csv\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../../../../site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\r\n<script src=\"../../../../../../site_libs/plotly-binding-4.10.1/plotly.js\"></script>\r\n<script src=\"../../../../../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<script src=\"../../../../../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\r\n<link href=\"../../../../../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../../../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\r\n<link href=\"../../../../../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../../../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\r\n<script src=\"../../../../../../site_libs/es6shim-0.35.6/es6shim.js\"></script>\r\n<script src=\"../../../../../../site_libs/es7shim-6.0.0/es7shim.js\"></script>\r\n<script src=\"../../../../../../site_libs/graphre-0.1.3/graphre.js\"></script>\r\n<script src=\"../../../../../../site_libs/nomnoml-1.4.0/nomnoml.js\"></script>\r\n<script src=\"../../../../../../site_libs/nomnoml-binding-0.2.5/nomnoml.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}