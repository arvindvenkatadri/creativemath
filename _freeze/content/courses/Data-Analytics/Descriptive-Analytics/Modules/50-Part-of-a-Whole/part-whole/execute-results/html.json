{
  "hash": "27be3ae360c411dd22e7a2b0fca4e077",
  "result": {
    "markdown": "---\ntitle: \"\\U0001F355 Parts of a Whole\"\nsubtitle: \"Parts of a Whole\"\nauthor: \"Arvind Venkatadri\"\ndate: 25/Nov/2022\ndate-modified: \"2023-03-12\"\norder: 50\nabstract: \"Slices, Portions, Counts, and Aggregates of Data\"\nimage: preview.jpg\nimage-alt: image from rawpixels.com\ncategoriess:\n  - Pie Charts\n  - Fan Charts\n  - Donut Charts\n  - Grouping\n  - Staacking\n  - Circular Bar Charts\n  - Dot Plots\n  - Mosaic Charts\n  - Parliament Charts\n  - Waffle Charts\n---\n\n\n<!-- # {{< fa folder-open >}} Slides and Tutorials -->\n\n<!-- <a href=\"./files/distributions.qmd\"><i class=\"fa-brands       -->\n\n<!--       fa-r-project\"></i> R Tutorial</a>   -->\n\n<!-- <a href=\"./files/distributions.ows\"> <iconify-icon icon=\"fluent-emoji:orange-circle\"></iconify-icon> Orange Tutorial</a> -->\n\n<!-- <a href=\"./files/distributions.rda\"> <i class=\"fa-solid fa-person-rays\"></i> Radiant Tutorial</a>  -->\n\n<!-- <a href=\"./files/data/qdd-data.zip\"> <i class=\"fa-solid fa-database\"></i> Datasets</a> -->\n\n# Setting up the Packages\n\n\n::: {.cell hash='part-whole_cache/html/setup_14e0c003aceae31e43a4b63fa774354d'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(plotrix) # Fan, Pyramid Chart\nlibrary(ggparliament) # Parliament Chart\nlibrary(ggpol) # Parliament, Arc-Bar and other intersting charts\n#library(waffle) # What it says! See note below: need github version\n\nlibrary(tidygraph) # Trees, Dendros, and Circle Packings\nlibrary(ggraph) # Trees, Dendros, and Circle Packings\n\nlibrary(patchwork) # Arrange your plots\n```\n:::\n\n\n# What Graphs will we see today?\n\nThere are a good few charts available to depict things that constitute\nother bigger things. We will discuss a few of these: Pie, Fan, and\nDonuts; Waffle and Parliament charts; Trees, Dendrograms, and Circle\nPackings. (The last three visuals we will explore along with\n`network diagrams` in a later module.)\n\n## Pies and Fans\n\nSo let us start with \"eating humble pie\": discussing a Pie chart first.\n\nA `pie chart` is a circle divided into sectors that each represent a\nproportion of the whole. It is often used to show percentage, where the\nsum of the sectors equals 100%.\n\nThe problem is that humans are pretty bad at reading angles. This\nubiquitous chart is much vilified in the industry and `bar charts` that\nwe have seen earlier, are viewed as better options. However do read this\nspirited defense of pie charts here.\n<https://speakingppt.com/why-tufte-is-flat-out-wrong-about-pie-charts/>\n\nOn the other hand, pie charts are ubiquitous in business circles, and\nare very much accepted ! So there is an attractive, and similar-looking\nalternative, called a `fan chart` which we will explore here.\n\n(Base) R has a simple `pie` command that does the job.\n\n\n::: {.cell hash='part-whole_cache/html/unnamed-chunk-1_2fc52f68e6577cd827c1b5cc214ce03a'}\n\n```{.r .cell-code}\npie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\nlabels <- c(\"Blueberry\", \"Cherry\",\n    \"Apple\", \"Boston Cream\", \"Other\", \"Vanilla Cream\")\npie(x = pie.sales, labels = labels,col =  grDevices::hcl.colors(palette= \"Plasma\", n = 6)) # default colours\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-1-1.png){width=4200}\n:::\n:::\n\n\nThe `fan plot` displays numerical values as arcs of **overlapping\nsectors**. This allows for more effective comparison:\n\n\n::: {.cell hash='part-whole_cache/html/unnamed-chunk-2_f16bd066a11f977cdf53c43daf4c1dd8'}\n\n```{.r .cell-code}\nplotrix::fan.plot(x = pie.sales, labels = labels,\n                  col = grDevices::hcl.colors(palette= \"Plasma\", n = 6),\n                  shrink = 0.03, # How much to shrink each successive sector\n                  label.radius = 1.15,\n                  main = \"Fan Plot of Ice Cream Flavours\",\n                  # ticks = 360, \n                  # if we want tick marks on the circumference\n                  \n                  max.span = pi)\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-2-1.png){width=4200}\n:::\n:::\n\n\nThe `donut` chart suffers from the same defects as the pie, so should be\nused with discretion. The `donut` chart is essentially a `geom_rect`\nfrom ggplot, plotted on a **polar coordinate** set of of axes:\n\n\n::: {.cell hash='part-whole_cache/html/donut-chart_80ca279ea2229dfd6d4cd7cd2f132cee'}\n\n```{.r .cell-code}\n# Data\ndf <- data.frame(group = LETTERS[1:3],\n                 value = c(25, 20, 35))\n\ndf <-\n  df %>% dplyr::mutate(\n    fraction = value / sum(value), # percentages\n    ymax = cumsum(fraction), # cumulative percentages\n    ymin = lag(ymax, 1, default = 0),\n    # bottom edge of each\n    label = paste0(group, \"\\n value: \", value),\n    labelPosition = (ymax + ymin) / 2 # labels midway on arcs\n  )\n\ndf\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"group\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"value\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fraction\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ymax\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ymin\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"label\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"labelPosition\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"A\",\"2\":\"25\",\"3\":\"0.3125\",\"4\":\"0.3125\",\"5\":\"0.0000\",\"6\":\"A\\\\n value: 25\",\"7\":\"0.15625\"},{\"1\":\"B\",\"2\":\"20\",\"3\":\"0.2500\",\"4\":\"0.5625\",\"5\":\"0.3125\",\"6\":\"B\\\\n value: 20\",\"7\":\"0.43750\"},{\"1\":\"C\",\"2\":\"35\",\"3\":\"0.4375\",\"4\":\"1.0000\",\"5\":\"0.5625\",\"6\":\"C\\\\n value: 35\",\"7\":\"0.78125\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell hash='part-whole_cache/html/unnamed-chunk-3_bfb82818c8851ca5d1709f2b6000ee6e'}\n\n```{.r .cell-code}\nggplot(df) + \n# `geom_rect()` requires aesthetics: xmin, xmax, ymin, and ymax\n  geom_rect(aes(xmin = 2, xmax = 4, ymin = ymin, ymax = ymax, fill = group),colour = \"black\") + \n  geom_label( x=3.5, aes(y=labelPosition, label= label), size=4) +\n  coord_polar(theta = \"y\",direction = 1) + # Upto here will give us a pie chart\n\n# When switching to polar coords:\n# x maps to r\n# y maps to theta\n# so we create a \"hole\" in the radius, in in \nxlim(c(0,4)) + # try to play with the \"0\"\ntheme_void() +\ntheme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-3-1.png){width=4200}\n:::\n:::\n\n\n## Waffle and Parliament Charts\n\nWaffle charts are often called \"square pie charts\" !\n\n\n::: {.cell hash='part-whole_cache/html/using-waffle_05602c6ebc54ede57b89b900dfa97d40'}\n\n```{.r .cell-code}\n# install.packages(\"waffle\", repos = \"https://cinc.rud.is\")\nlibrary(waffle)\n\n# Data\ndf <- data.frame(group = LETTERS[1:3],\n                 value = c(25, 20, 35))\n\n# Waffle plot\nggplot(df, aes(fill = group, values = value)) +\n  geom_waffle(n_rows = 8, size = 0.33, colour = \"white\") +\n  scale_fill_manual(name = NULL,\n                    values = c(\"#BA182A\", \"#FF8288\", \"#FFDBDD\"),\n                    labels = c(\"A\", \"B\", \"C\")) +\n  coord_equal() +\n  theme_void() \n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/using-waffle-1.png){width=4200}\n:::\n:::\n\n\nThe package `ggpol` offers an interesting visualization in the shape of\na array of \"seats\" in a parliament. ( There is also a package called\n`ggparliament` which in my opinion is a bit cumbersome, having a two\nstep procedure to convert data into \"parliament form\" etc. )\n\n\n::: {.cell hash='part-whole_cache/html/using-ggpol_1378fc0ea2ec456ce317439378a95b85'}\n\n```{.r .cell-code}\ndf <- data.frame(group = LETTERS[1:3],\n                 value = c(25, 20, 35))\n\n# Parliament Plot\nggplot(df) +\n  ggpol::geom_parliament(aes(seats = value, \n                             fill = group),\n                         r0 = 2, # inner radius\n                         r1 = 4 # Outer radius\n  ) + \n  scale_fill_manual(name = NULL,\n                    values = c(\"#BA182A\", \"#FF8288\", \"#FFDBDD\"),\n                    labels = c(\"A\", \"B\", \"C\")) +\n  coord_equal() +\n  theme_void() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n```\n:::\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/using-ggpol-1.png){width=4200}\n:::\n:::\n\n\n## Trees, Dendrograms, and Circle Packings\n\nThere are still more esoteric plots to explore, if you are hell-bent on\nstartling people ! There is an R package called `ggraph`, that can do\nthese charts, and many more:\n\n> ggraph is an extension of [`ggplot2`](https://ggplot2.tidyverse.org/)\n> aimed at supporting relational data structures such as networks,\n> graphs, and trees. While it builds upon the foundation of `ggplot2`\n> and its API it comes with its own self-contained set of geoms, facets,\n> etc., as well as adding the concept of *layouts* to the grammar.\n\nWe will explore these charts when we examine `network diagrams.` For\nnow, we can quickly see what these diagrams look like. Although the\nR-code is visible to you, it may not make sense at the moment!\n\n### Dendrograms\n\nFrom the [R Graph Gallery\nWebsite](http://r-graph-gallery.com/index.html) :\n\n> Dendrograms can be built from:\n>\n> -   [Hierarchical\n>     dataset](http://r-graph-gallery.com/dendrogram.html#hiera): think\n>     about a CEO managing team leads managing employees and so on.\n>\n> -   [Clustering\n>     result](http://r-graph-gallery.com/dendrogram.html#clust):\n>     clustering divides a set of individuals in group according to\n>     their similarity. Its result can be visualized as a tree.\n\n\n::: {.cell hash='part-whole_cache/html/unnamed-chunk-4_a25f0121c9c14281ba6c4661c81e8e8b'}\n\n```{.r .cell-code}\n# create an edge list data frame giving the hierarchical structure of your individuals\nd1 <- data.frame(from=\"origin\", to=paste(\"group\", seq(1,5), sep=\"\"))\nd2 <- data.frame(from=rep(d1$to, each=5), to=paste(\"subgroup\", seq(1,25), sep=\"_\"))\nedges <- rbind(d1, d2)\n \n# Create a graph object \nmygraph1 <- tidygraph::as_tbl_graph( edges )\n \n# Basic tree\np1 <- ggraph(mygraph1, layout = 'dendrogram', circular = TRUE) + \n  geom_edge_diagonal() +\n  geom_node_point() +\n  theme_void()\n\n\n# create a data frame \ndata <- data.frame(\n  level1=\"CEO\",\n  level2=c( rep(\"boss1\",4), rep(\"boss2\",4)),\n  level3=paste0(\"mister_\", letters[1:8])\n)\n \n# transform it to a edge list!\nedges_level1_2 <- data %>% select(level1, level2) %>% unique %>% rename(from=level1, to=level2)\nedges_level2_3 <- data %>% select(level2, level3) %>% unique %>% rename(from=level2, to=level3)\nedge_list=rbind(edges_level1_2, edges_level2_3)\n \n# Now we can plot that\nmygraph2 <- as_tbl_graph( edge_list )\np2 <- ggraph(mygraph2, layout = 'dendrogram', circular = FALSE) + \n  geom_edge_diagonal() +\n  geom_node_point() +\n  theme_void()\n\np1 + p2+ theme(aspect.ratio = 1)\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-4-1.png){width=4200}\n:::\n:::\n\n\n### Circle Packing\n\n\n::: {.cell hash='part-whole_cache/html/unnamed-chunk-5_c1a3c730e2ab22145fc9fa3e100a3daa'}\n\n```{.r .cell-code}\nlibrary(tidygraph)\nlibrary(ggraph)\ngraph <- tbl_graph(flare$vertices, flare$edges)\nset.seed(1)\nggraph(graph, 'circlepack', weight = size) + \n  geom_node_circle(aes(fill = as_factor(depth)), size = 0.25, n = 50) + \n  coord_fixed() +\n  scale_fill_discrete(name = \"Depth\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](part-whole_files/figure-html/unnamed-chunk-5-1.png){width=4200}\n:::\n:::\n\n\n# Your Turn\n\n1.  Use the `penguins` dataset from the `palmerpenguins` package and\n    plot pies, fans, and donuts as appropriate.\n2.  Look at the `whigs` and `highschool` datasets in the package\n    `ggraph`. Plot Trees, Dendrograms, and Circle Packings as\n    appropriate for these.\n\n# References\n\n1.  <https://datavizstory.com/a-parliament-diagram-in-r/>\n\n2.  `ggpol`Guide by Frederik Tiedemann,\n    <https://erocoar.github.io/ggpol/>\n\n3.  Thomas Lin Pedersen, `ggraph:`A grammar of graphics for relational\n    data, <https://ggraph.data-imaginist.com/>\n\n4.  Venn Diagrams in R, [Venn diagram in ggplot2 \\| R CHARTS\n    (r-charts.com](https://r-charts.com/part-whole/ggvenndiagram/))\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}