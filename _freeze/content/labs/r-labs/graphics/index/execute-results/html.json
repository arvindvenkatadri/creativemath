{
  "hash": "9fd505180be15e33d40e4eb514d568fe",
  "result": {
    "markdown": "---\ntitle: 'Lab 06 - The Grammar of Graphics'\nsubtitle: Creating Graphs and Charts using `ggplot`\nauthor: \"Arvind Venkatadri\"\ndate: 06/July/2021\ndate-modified: \"2023-03-12\"\nabstract-title: \"Abstract\"\nabstract: Part of my `R for Artists and Designers` course using the idea of metaphors in written language.\n---\n\n\n## Introduction\n\nThis RMarkdown document is part of my course on R for Artists and\nDesigners. The material is based on A Layered Grammar of Graphics by\nHadley Wickham. The intent of this Course is to build Skill in coding in\nR, and also appreciate R as a way to metaphorically visualize\ninformation of various kinds, using predominantly geometric figures and\nstructures.\n\nAll RMarkdown files combine code, text, web-images, and figures\ndeveloped using code. Everything is text; code chunks are enclosed in\nfences (\\`\\`\\`)\n\n## Goals\n\nAt the end of this Lab session, we should: - know the types and\nstructures of tidy data and be able to work with them - be able to\ncreate data visualizations using `ggplot` - Understand *aesthetics* and\n*scales* in \\`ggplot\n\n## Pedagogical Note\n\nThe method followed will be based on\n[PRIMM](https://blogs.kcl.ac.uk/cser/2017/09/01/primm-a-structured-approach-to-teaching-programming/):\n\n-   **PREDICT** Inspect the code and guess at what the code might do,\n    **write predictions**\n-   **RUN** the code provided and check what happens\n-   **INFER** what the `parameters` of the code do and **write comments\n    to explain**. What bells and whistles can you see?\n-   **MODIFY** the `parameters` code provided to understand the\n    `options` available. **Write comments** to show what you have aimed\n    for and achieved.\n-   **MAKE** : take an idea/concept of your own, and graph it.\n\n## Set Up\n\nThe `setup` code **chunk** below brings into our coding session **R\npackages** that provide specific computational abilities and also\n**datasets** which we can use.\n\nTo reiterate: Packages and datasets are **not** the same thing !!\nPackages are (small) collections of programs. Datasets are\njust....information.\n\n\n\n\n\n## A Teaser from John Snow\n\n\n::: {.cell hash='index_cache/html/teaser_7a63806f85536b7eb35c83c576d46fba'}\n::: {.cell-output-display}\n![](index_files/figure-html/teaser-1.png){width=4200}\n:::\n:::\n\n\n## Review of Tidy Data\n\n\"Tidy Data\" is an important way of thinking about what data typically\nlook like in R. Let's fetch a figure from the web to show the\n(preferred) structure of data in R. (The syntax to bring in a web-figure\nis `![caption](url)`)\n\n![Tidy\nData](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/tidydata_1.jpg)\nThe three features described in the figure above define the nature of\ntidy data:\n\n-   *Variables in Columns*\\\n-   *Observations in Rows* and\\\n-   *Measurements in Cells*.\n\nData are imagined to be resulting from an **experiment**. Each\n*variable* represents a parameter/aspect in the experiment. Each *row*\nrepresents an additional datum of measurement. A *cell* is a single\nmeasurement on a single parameter(column) in a single observation(row).\n\n## Kinds of Variables\n\n**Kinds of Variable** are defined by the kind of *questions* they answer\nto:\n\n1.  What/Who/Where? -\\> Some kind of Name. **Categorical** variable\n2.  What Kind? How? -\\> Some kind of \"Type\". **Factor** variable\n3.  How Many? How large? -\\> Some kind of Quantity. **Numerical**\n    variable. Most Figures in R are computed with variables, and\n    therefore, with **columns**.\n\n## Interrogations and Graphs\n\nCreating graphs from data is an act of asking questions and viewing\nanswers in a geometric way. Let us write some simple English\ndescriptions of measures and visuals and see what commands they use in\nR.\n\n### Components of the layered grammar of graphics\n\n**Layers** are used to create the objects on a plot. They are defined by\nfive basic parts:\n\n1.  Data (What dataset/spreadsheet am I using?)\n2.  Mapping (What does each column do in my graph?)\n3.  Statistical transformation (stat) (Do I have count something first?)\n4.  Geometric object (geom) (What shape, colour, size...do I want?)\n5.  Position adjustment (position) (Where do I want it on the graph?)\n\n## Data {.tabset .tabset-pills}\n\nWe will use \"real world\" data. Let's use the `penguins` dataset in the\n`palmerpenguins` package. Run `?penguins` in the console to get more\ninformation about this dataset.\n\n### Head\n\n\n::: {.cell hash='index_cache/html/penguins-1_825bfd59a9174892c71bc9c3837a3855'}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"island\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"bill_length_mm\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_depth_mm\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flipper_length_mm\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"body_mass_g\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[7],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.1\",\"4\":\"18.7\",\"5\":\"181\",\"6\":\"3750\",\"7\":\"male\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.5\",\"4\":\"17.4\",\"5\":\"186\",\"6\":\"3800\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"40.3\",\"4\":\"18.0\",\"5\":\"195\",\"6\":\"3250\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"NA\",\"4\":\"NA\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"36.7\",\"4\":\"19.3\",\"5\":\"193\",\"6\":\"3450\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.3\",\"4\":\"20.6\",\"5\":\"190\",\"6\":\"3650\",\"7\":\"male\",\"8\":\"2007\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Tail\n\n\n::: {.cell hash='index_cache/html/penguins-2_b1d255536b87a0370133be650bce7c2a'}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"island\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"bill_length_mm\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_depth_mm\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flipper_length_mm\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"body_mass_g\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[7],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Chinstrap\",\"2\":\"Dream\",\"3\":\"45.7\",\"4\":\"17.0\",\"5\":\"195\",\"6\":\"3650\",\"7\":\"female\",\"8\":\"2009\"},{\"1\":\"Chinstrap\",\"2\":\"Dream\",\"3\":\"55.8\",\"4\":\"19.8\",\"5\":\"207\",\"6\":\"4000\",\"7\":\"male\",\"8\":\"2009\"},{\"1\":\"Chinstrap\",\"2\":\"Dream\",\"3\":\"43.5\",\"4\":\"18.1\",\"5\":\"202\",\"6\":\"3400\",\"7\":\"female\",\"8\":\"2009\"},{\"1\":\"Chinstrap\",\"2\":\"Dream\",\"3\":\"49.6\",\"4\":\"18.2\",\"5\":\"193\",\"6\":\"3775\",\"7\":\"male\",\"8\":\"2009\"},{\"1\":\"Chinstrap\",\"2\":\"Dream\",\"3\":\"50.8\",\"4\":\"19.0\",\"5\":\"210\",\"6\":\"4100\",\"7\":\"male\",\"8\":\"2009\"},{\"1\":\"Chinstrap\",\"2\":\"Dream\",\"3\":\"50.2\",\"4\":\"18.7\",\"5\":\"198\",\"6\":\"3775\",\"7\":\"female\",\"8\":\"2009\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Dim\n\n\n::: {.cell hash='index_cache/html/penguins-3_49bab014c31925c732229bbcfd0f4163'}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 344   8\n```\n:::\n:::\n\n\nSo we know what our data looks like. We pass this data to `ggplot` use\nto plot as follows: in R this creates an empty graph sheet!! Because we\nhave not (yet) declared the geometric shapes we want to use to plot our\ninformation.\n\n\n::: {.cell hash='index_cache/html/data-1_7d8785ed8d3780b1cfee9edf0d9a26fd'}\n::: {.cell-output-display}\n![](index_files/figure-html/data-1-1.png){width=4200}\n:::\n:::\n\n\n## Mapping\n\nNow that we have told R what data to use, we need to state what\nvariables to plot and how.\n\n**Aesthetic Mapping** defines how the variables are applied to the plot,\ni.e. we take a variable from the data and \"metaphorize\" it into a\ngeometric feature. We can map variables metaphorically to a variety of\ngeometric things: coordinate, length, height, size, shape, colour,\nalpha(how dark?)....\n\nThe syntax uses: `aes(some_geometric_thing = some_variable)`\n\nRemember **variable** = **column**.\n\nSo if we were graphing information from `penguins`, we might map a\npenguin's `flipper_length_mm` **column** to the $x$ position, and the\n`body_mass_g` **column** to the $y$ position.\n\n### Mapping Example-1 {.tabset .tabset-pills}\n\nWe can try another example of aesthetic mapping with the same dataset:\n\n#### Plot-1a\n\n\n::: {.cell hash='index_cache/html/mapping-1a_24088b950e979efe754eb18ae38fb112'}\n::: {.cell-output-display}\n![](index_files/figure-html/mapping-1a-1.png){width=4200}\n:::\n:::\n\n\n#### Plot-1b\n\n\n\n\n\n#### Plot-1c\n\n\n\n\n\n### Mapping Example-2 {.tabset .tabset-pills}\n\nWe can try another example of aesthetic mapping with the same dataset:\n\n#### Plot-2a\n\n\n::: {.cell hash='index_cache/html/mapping-2a_89c327d75eed3728768d5fe68ab3c0e4'}\n::: {.cell-output-display}\n![](index_files/figure-html/mapping-2a-1.png){width=4200}\n:::\n:::\n\n\n#### Plot-2b\n\n\n\n\n\n#### Plot-2c\n\n\n\n\n\n### Mapping Example-3 {.tabset .tabset-pills}\n\nWe can try another example of aesthetic mapping with the same dataset:\n\n#### Plot-3a\n\n\n::: {.cell hash='index_cache/html/mapping-3a_4efd4f22c8e427410b7c9ee1334de8b2'}\n::: {.cell-output-display}\n![](index_files/figure-html/mapping-3a-1.png){width=4200}\n:::\n:::\n\n\n#### Plot-3b\n\n\n\n\n\n#### Plot-3c\n\n\n\n\n\n### Mapping Example-4 {.tabset .tabset-pills}\n\nWe can try another example of aesthetic mapping with the same dataset:\n\n#### Plot-4a\n\n\n::: {.cell hash='index_cache/html/mapping-4a_8491878c21c3dd3bf2ae6b2e99397712'}\n::: {.cell-output-display}\n![](index_files/figure-html/mapping-4a-1.png){width=4200}\n:::\n:::\n\n\n#### Plot-4b\n\n\n\n\n\n#### Plot-4c\n\n\n\n\n\n## Geometric objects {.tabset .tabset-pills}\n\n**Geometric objects** (*geoms*) control the type of plot you create.\nGeoms are classified by their dimensionality:\n\n-   0 dimensions - point, text\n-   1 dimension - path, line\n-   2 dimensions - polygon, interval\n\nEach geom can only display certain **aesthetics** or visual attributes\nof the geom. For example, a point geom has position, color, shape, and\nsize aesthetics.\n\nWe can also stack up geoms on top of one another to add layers to the\ngraph.\n\n### Plot1\n\n\n::: {.cell hash='index_cache/html/other_geoms-1_e08b2c6f73926d239e966df47312c6ea'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other_geoms-1-1.png){width=4200}\n:::\n:::\n\n\n### Plot2\n\n\n::: {.cell hash='index_cache/html/other-geoms-2_d21d26e8a50c88bbec541016019b3a83'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other-geoms-2-1.png){width=4200}\n:::\n:::\n\n\n### Plot3\n\n\n::: {.cell hash='index_cache/html/other-geoms-3_e0ae595aae9050f1e1bdf35454ae6823'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/other-geoms-3-1.png){width=4200}\n:::\n:::\n\n::: {.cell hash='index_cache/html/geom_bar-1_1b79a6d20a771809c55478b3689ac37a'}\n::: {.cell-output-display}\n![](index_files/figure-html/geom_bar-1-1.png){width=4200}\n:::\n:::\n\n::: {.cell hash='index_cache/html/geom_bar-2_2e3df77701ebc4604aa3eaaa8d9ff5d5'}\n::: {.cell-output-display}\n![](index_files/figure-html/geom_bar-2-1.png){width=4200}\n:::\n:::\n\n\n-   Position determines the starting location (origin) of each bar\n-   Height determines how tall to draw the bar. Here the height is based\n    on the number of observations in the dataset for each possible\n    number of cylinders.\n\n## Position adjustment {.tabset .tabset-pills}\n\nSometimes with dense data we need to adjust the position of elements on\nthe plot, otherwise data points might obscure one another. Bar plots\nfrequently **stack** or **dodge** the bars to avoid overlap:\n\n\n::: {.cell hash='index_cache/html/geom_bar_position_stack_and_dodge_481b579897148df981dcd4d13a4a8673'}\n::: {.cell-output-display}\n![](index_files/figure-html/geom_bar_position_stack_and_dodge-1.png){width=4200}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/geom_bar_position_stack_and_dodge-2.png){width=4200}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_cf1a64f5baa594c0620501f79729c354'}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=4200}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=4200}\n:::\n:::\n\n\nSometimes scatterplots with few unique $x$ and $y$ values are\n**jittered** (random noise is added) to reduce overplotting.\n\n\n::: {.cell hash='index_cache/html/position_8802569f7342b121e4982458bbdcccf2'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/position-1.png){width=4200}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/position-2.png){width=4200}\n:::\n:::\n\n\n## Statistical transformation {.tabset .tabset-pills}\n\nA **statistical transformation** (*stat*) pre-transforms the data,\nbefore plotting. For instance, in a bar graph you might summarize the\ndata by `count`ing the total number of observations within a set of\ncategories, and then plotting the count.\n\n### Count\n\n\n::: {.cell hash='index_cache/html/stat-transform-1_bfde44cb4cafebf59a2346f8b5c999f2'}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"island\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Biscoe\",\"2\":\"168\"},{\"1\":\"Dream\",\"2\":\"124\"},{\"1\":\"Torgersen\",\"2\":\"52\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Count and Bar Graph\n\n\n::: {.cell hash='index_cache/html/stat-transform-2_2f935d78f59fa0ea93f67f5e126bcc59'}\n::: {.cell-output-display}\n![](index_files/figure-html/stat-transform-2-1.png){width=4200}\n:::\n:::\n\n\n### Tidy Count and Bar Graph\n\n\n::: {.cell hash='index_cache/html/stat-transform-3_5ada36097ca815c140476075b187e97b'}\n::: {.cell-output-display}\n![](index_files/figure-html/stat-transform-3-1.png){width=4200}\n:::\n:::\n\n\n### Count inside the Plot\n\n\n::: {.cell hash='index_cache/html/stat-transform-4_44dc9e9a5746782f4de6c6a10fe0a42e'}\n::: {.cell-output-display}\n![](index_files/figure-html/stat-transform-4-1.png){width=4200}\n:::\n:::\n\n\nSometimes you don't need to make a statistical transformation. For\nexample, in a scatterplot you use the raw values for the $x$ and $y$\nvariables to map onto the graph. In these situations, the statistical\ntransformation is an *identity* transformation - the stat simply passes\nin the original dataset and exports the exact same dataset.\n\n## Scale {.tabset .tabset-pills}\n\nA **scale** controls how data is mapped to aesthetic attributes, so we\nneed one scale for every aesthetic property employed in a layer. For\nexample, this graph defines a scale for color:\n\n\n::: {.cell hash='index_cache/html/scale-color_78ae739ff2ef1529504a60db87b9ed6f'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/scale-color-1.png){width=4200}\n:::\n:::\n\n\nThe scale can be changed to use a different color palette:\n\n\n::: {.cell hash='index_cache/html/scale-color-palette_a734884746cc3eec22612f8eda8d1f9e'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/scale-color-palette-1.png){width=4200}\n:::\n:::\n\n\nNow we are using a different palette, but the scale is still consistent:\nall Adelie penguins utilize the same color, whereas Chinstrap use a new\ncolor **but each Adelie still uses the same, consistent color**.\n\n## Coordinate system {.tabset .tabset-pills}\n\nA **coordinate system** (*coord*) maps the position of objects onto the\nplane of the plot, and controls how the axes and grid lines are drawn.\nPlots typically use two coordinates ($x, y$), but could use any number\nof coordinates. Most plots are drawn using the [**Cartesian coordinate\nsystem**](https://en.wikipedia.org/wiki/Cartesian_coordinate_system):\n\n\n::: {.cell hash='index_cache/html/coord-cart_ee02d054ea67327a77570b149ae7fa51'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `qplot()` was deprecated in ggplot2 3.4.0.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/coord-cart-1.png){width=4200}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/coord-cart-2.png){width=4200}\n:::\n:::\n\n\nThis system requires a fixed and equal spacing between values on the\naxes. That is, the graph draws the same distance between 1 and 2 as it\ndoes between 5 and 6. The graph could be drawn using a [**semi-log\ncoordinate system**](https://en.wikipedia.org/wiki/Semi-log_plot) which\nlogarithmically compresses the distance on an axis:\n\n\n::: {.cell hash='index_cache/html/coord_semi_log_0959ff4304b6c5b7977f0c25e4de7927'}\n::: {.cell-output-display}\n![](index_files/figure-html/coord_semi_log-1.png){width=4200}\n:::\n:::\n\n\nOr could even be drawn using [**polar\ncoordinates**](https://en.wikipedia.org/wiki/Polar_coordinate_system):\n\n\n::: {.cell hash='index_cache/html/coord_polar_00e245171e1fe8658eb5989f09a19aa3'}\n::: {.cell-output-display}\n![](index_files/figure-html/coord_polar-1.png){width=4200}\n:::\n:::\n\n\n## Faceting {.tabset .tabset-pills}\n\n**Faceting** can be used to split the data up into subsets of the entire\ndataset. This is a powerful tool when investigating whether patterns are\nthe same or different across conditions, and allows the subsets to be\nvisualized on the same plot (known as **conditioned** or **trellis**\nplots). The faceting specification describes which variables should be\nused to split up the data, and how they should be arranged.\n\n\n::: {.cell hash='index_cache/html/facet-1_734230f844bd5d25f80fce33b5ab22e0'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/facet-1-1.png){width=4200}\n:::\n:::\n\n::: {.cell hash='index_cache/html/facet-2_db1626e9cb3d5e3481712ec3f372860b'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/facet-2-1.png){width=4200}\n:::\n:::\n\n\n## Defaults\n\nRather than explicitly declaring each component of a layered graphic\n(which will use more code and introduces opportunities for errors), we\ncan establish intelligent defaults for specific geoms and scales. For\ninstance, whenever we want to use a bar geom, we can default to using a\nstat that counts the number of observations in each group of our\nvariable in the $x$ position.\n\nConsider the following scenario: you wish to generate a scatterplot\nvisualizing the relationship between penguins' bill_length and their\nbody_mass. With no defaults, the code to generate this graph is:\n\n\n::: {.cell hash='index_cache/html/default_983562fad6cbcd0f4cc775edd8c9979c'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/default-1.png){width=4200}\n:::\n:::\n\n\nThe above code:\n\n-   Creates a new plot object (`ggplot`)\n\n-   Adds a layer (`layer`)\n\n    -   Specifies the data (`penguins`)\n    -   Maps engine bill length to the $x$ position and body mass to the\n        $y$ position (`mapping`)\n    -   Uses the point geometric transformation (`geom = \"point\"`)\n    -   Implements an identity transformation and position\n        (`stat = \"identity\"` and `position = \"identity\"`)\n\n-   Establishes two continuous position scales (`scale_x_continuous` and\n    `scale_y_continuous`)\n\n-   Declares a cartesian coordinate system (`coord_cartesian`)\n\nHow can we simplify this using intelligent defaults?\n\n1.  We only need to specify one geom and stat, since each geom has a\n    default stat.\n\n2.  Cartesian coordinate systems are most commonly used, so it should be\n    the default.\n\n3.  Default scales can be added based on the aesthetic and type of\n    variables.\n\n    -   Continuous values are transformed with a linear scaling.\n    -   Discrete values are mapped to integers.\n    -   Scales for aesthetics such as color, fill, and size can also be\n        intelligently defaulted.\n\nUsing these defaults, we can rewrite the above code as:\n\n\n::: {.cell hash='index_cache/html/default2_3e037f0115b76943733887b24e7396c9'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/default2-1.png){width=4200}\n:::\n:::\n\n\nThis generates the exact same plot, but uses fewer lines of code.\nBecause multiple layers can use the same components (data, mapping,\netc.), we can also specify that information in the `ggplot()` function\nrather than in the `layer()` function:\n\n\n::: {.cell hash='index_cache/html/default3_fd1c770cd3ee4f5aca97577772716177'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/default3-1.png){width=4200}\n:::\n:::\n\n\nAnd as we will learn, function arguments in R use specific ordering, so\nwe can omit the explicit call to `data` and `mapping`:\n\n\n::: {.cell hash='index_cache/html/default4_2f35f6415995db70833ef4ad6486aaeb'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/default4-1.png){width=4200}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_cbc61032a4793ebaf0ae7a3a4a391783'}\n::: {.cell-output-display}\n![](https://isabella-b.com/blog/ggplot2-theme-elements-reference/ggplot2-theme-elements-reference-v2_hu8994090e1960a0a71878a3756da20076_580819_2000x2000_fit_lanczos_2.png)\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}