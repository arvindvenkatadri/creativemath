{
  "hash": "5ac6a99c4180ae8611a65c10f2b0d61b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Generating Fake Data in R\"\nauthor: \"Arvind V\"\nsuppress-bibliography: true\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n## Introduction\n\nOften we need to generate fake data for teaching and demo purposes. This post uncovers several different packages for this purpose.\n\n## Set Up the R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(mosaic)\nlibrary(ggformula)\nlibrary(vtable)\n\n# Generate Data\n# library(simulate) TO BE FOUND AND INSTALLED!!!!\nlibrary(regressinator)\nlibrary(holodeck)\nlibrary(explore)\nlibrary(charlatan)\nlibrary(ids) # animals, adjectives, sentences, and proquints\nlibrary(rcorpora)\nlibrary(simstudy)\n```\n:::\n\n\n## Using simulate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_bernoulli(prob = 0.2, params = NULL, data = df)\nsim_beta(shape1 = 0.2, shape2 = 0.8, params = NULL)\n```\n:::\n\n\n## Using regressinator\n\n<https://www.refsmmat.com/regressinator/>\n\n> The regressinator is a pedagogical tool for conducting simulations of\n> regression analyses and diagnostics. It can:\n>\n> -   Simulate populations with predictor variables from arbitrary\n>     distributions\n> -   Simulate response variables that are functions of the predictor\n>     variables plus error, or are drawn from a distribution related to\n>     the predictors\n> -   Given a model, simulate from the population sampling distribution\n>     of that model's estimates\n> -   Given a model fit to data, generate new simulated data based on\n>     the model fit\n> -   Facilitate lineup plots comparing diagnostics on the fitted model\n>     to diagnostics where all model assumptions are met.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(regressinator)\n\nlinear_pop <- population(\n  x1 = predictor(\"rnorm\", mean = 4, sd = 10),\n  x2 = predictor(\"runif\", min = 0, max = 10),\n  y = response(\n    0.7 + 2.2 * x1 - 0.2 * x2, # relationship between X and Y\n    family = gaussian(),       # link function and response distribution\n    error_scale = 1.5          # sd; errors are scaled by this amount\n  )\n)\n```\n:::\n\n\nIn general,\n[`population()`](https://www.refsmmat.com/regressinator/reference/population.html)\ndefines a population according to the following relationship:\n\n$$\nY ∼ Some ~ Distribution\\\\ \n$$\n$$\n~g(E[Y | X = x]) = \\mu(x)\\\\ \n$$\n$$\nwhere ~ μ(x)=any~function~of~x\\\\\n$$\n\nIf `family` is not specified the default is Gaussian, and the link\nfunction `g` is identity.\n\nWe can create a population with binary outcomes and a logistic link\nfunction:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_pop <- population(\n  x1 = predictor(\"rnorm\", mean = 0, sd = 10),\n  x2 = predictor(\"runif\", min = 0, max = 10),\n  y = response(0.7 + 2.2 * x1 - 0.2 * x2,\n               family = binomial(link = \"logit\"))\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}