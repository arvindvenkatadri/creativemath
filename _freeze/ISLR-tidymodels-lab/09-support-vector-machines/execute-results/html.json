{
  "hash": "a97b1bf4f63e2ea71bd025f6d521e0e3",
  "result": {
    "engine": "knitr",
    "markdown": "# Support Vector Machines\n\n\n::: {.cell}\n\n:::\n\n\nThis lab will take a look at support vector machines, in doing so we will explore how changing the hyperparameters can help improve performance. \nThis chapter will use [parsnip](https://www.tidymodels.org/start/models/) for model fitting and [recipes and workflows](https://www.tidymodels.org/start/recipes/) to perform the transformations, and [tune and dials](https://www.tidymodels.org/start/tuning/) to tune the hyperparameters of the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(ISLR)\n```\n:::\n\n\n## Support Vector Classifier\n\nLet us start by creating a synthetic data set. We will use some normally distributed data with an added offset to create 2 separate classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nsim_data <- tibble(\n  x1 = rnorm(40),\n  x2 = rnorm(40),\n  y  = factor(rep(c(-1, 1), 20))\n) %>%\n  mutate(\n    x1 = ifelse(y == 1, x1 + 1.5, x1),\n    x2 = ifelse(y == 1, x2 + 1.5, x2)\n  )\n```\n:::\n\n\nPlotting it shows that we are having two slightly overlapping classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sim_data, aes(x1, x2, color = y)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](09-support-vector-machines_files/figure-html/unnamed-chunk-4-1.png){width=2100}\n:::\n:::\n\n\nWe can then create a linear SVM specification by setting `degree = 1` in a polynomial SVM model. We furthermore set `scaled = FALSE` in `set_engine()` to have the engine scale the data for us. Once we get to it later we can be performing this scaling in a recipe instead. \n\n:::{.callout-note}\n`set_engine()` can be used to pass in additional arguments directly to the underlying engine. In this case, I'm passing in `scaled = FALSE` to `kernlab::ksvm()` which is the engine function.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_linear_spec <- svm_poly(degree = 1) %>%\n  set_mode(\"classification\") %>%\n  set_engine(\"kernlab\", scaled = FALSE)\n```\n:::\n\n\nTaking the specification, we can add a specific `cost` of 10 before fitting the model to the data. Using `set_args()` allows us to set the `cost` argument without modifying the model specification.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_linear_fit <- svm_linear_spec %>%\n  set_args(cost = 10) %>%\n  fit(y ~ ., data = sim_data)\n\nsvm_linear_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\nSupport Vector Machine object of class \"ksvm\" \n\nSV type: C-svc  (classification) \n parameter : cost C = 10 \n\nPolynomial kernel function. \n Hyperparameters : degree =  1  scale =  1  offset =  1 \n\nNumber of Support Vectors : 17 \n\nObjective Function Value : -152.0188 \nTraining error : 0.125 \nProbability model included. \n```\n\n\n:::\n:::\n\n\nThe `kernlab` models can be visualized using the `plot()` function if you load the `kernlab` package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(kernlab)\nsvm_linear_fit %>%\n  extract_fit_engine() %>%\n  plot()\n```\n\n::: {.cell-output-display}\n![](09-support-vector-machines_files/figure-html/unnamed-chunk-7-1.png){fig-alt='Scatter chart of sim_data with x2 on the x-axis and x1 on the\ny-axis. A gradient going from red through white to blue,\nis overlaid. Blue values occur when both x1 and x2 sum to more\nthan 2 and red values when x1 and x2 sum to less than 2.\nThe gradient does not appear to seperate the two classes\nwhich is represented by shapes.' width=2100}\n:::\n:::\n\n\nwhat if we instead used a smaller value of the `cost` parameter?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_linear_fit <- svm_linear_spec %>%\n  set_args(cost = 0.1) %>%\n  fit(y ~ ., data = sim_data)\n\nsvm_linear_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\nSupport Vector Machine object of class \"ksvm\" \n\nSV type: C-svc  (classification) \n parameter : cost C = 0.1 \n\nPolynomial kernel function. \n Hyperparameters : degree =  1  scale =  1  offset =  1 \n\nNumber of Support Vectors : 25 \n\nObjective Function Value : -2.0376 \nTraining error : 0.15 \nProbability model included. \n```\n\n\n:::\n:::\n\n\nNow that a smaller value of the cost parameter is being used, we obtain a larger number of support vectors, because the margin is now wider.\n\nLet us set up a `tune_grid()` section to find the value of `cost` that leads to the highest accuracy for the SVM model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_linear_wf <- workflow() %>%\n  add_model(svm_linear_spec %>% set_args(cost = tune())) %>%\n  add_formula(y ~ .)\n\nset.seed(1234)\nsim_data_fold <- vfold_cv(sim_data, strata = y)\n\nparam_grid <- grid_regular(cost(), levels = 10)\n\ntune_res <- tune_grid(\n  svm_linear_wf,\n  resamples = sim_data_fold,\n  grid = param_grid\n)\n\nautoplot(tune_res)\n```\n\n::: {.cell-output-display}\n![](09-support-vector-machines_files/figure-html/unnamed-chunk-9-1.png){fig-alt='Facetted connected scatter chart. x-axis shows different\nvalues of cost, and the y-axis show the performance metric\nvalue. The facets correspond to the two performance metrics\naccuracy and roc_auc. Both charts show a constant value for \nall values of cost, expect for once where the accuracy skipes.' width=2100}\n:::\n:::\n\n\nusing the `tune_res` object and `select_best()` function allows us to find the value of `cost` that gives the best cross-validated accuracy. Finalize the workflow with `finalize_workflow()` and fit the new workflow on the data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_cost <- select_best(tune_res, metric = \"accuracy\")\n\nsvm_linear_final <- finalize_workflow(svm_linear_wf, best_cost)\n\nsvm_linear_fit <- svm_linear_final %>% fit(sim_data)\n```\n:::\n\n\nWe can now generate a different data set to act as the test data set. We will make sure that it is generated using the same model but with a different seed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2)\nsim_data_test <- tibble(\n  x1 = rnorm(20),\n  x2 = rnorm(20),\n  y  = factor(rep(c(-1, 1), 10))\n) %>%\n  mutate(\n    x1 = ifelse(y == 1, x1 + 1.5, x1),\n    x2 = ifelse(y == 1, x2 + 1.5, x2)\n  )\n```\n:::\n\n\nand asseessing the model on this testing data set shows us that the model still performs very well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(svm_linear_fit, new_data = sim_data_test) %>%\n  conf_mat(truth = y, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction -1 1\n        -1  8 3\n        1   2 7\n```\n\n\n:::\n:::\n\n\n## Support Vector Machine\n\nWe will now see how we can fit an SVM using a non-linear kernel. Let us start by generating some data, but this time generate with a non-linear class boundary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nsim_data2 <- tibble(\n  x1 = rnorm(200) + rep(c(2, -2, 0), c(100, 50, 50)),\n  x2 = rnorm(200) + rep(c(2, -2, 0), c(100, 50, 50)),\n  y  = factor(rep(c(1, 2), c(150, 50)))\n)\n\nsim_data2 %>%\n  ggplot(aes(x1, x2, color = y)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](09-support-vector-machines_files/figure-html/unnamed-chunk-13-1.png){fig-alt='Scatter plot of sim_data2. Data is in a oblong shape with\npoints in the middle having color and both ends having\nanother color.' width=2100}\n:::\n:::\n\n\nWe will try an SVM with a radial basis function. Such a kernel would allow us to capture the non-linearity in our data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_rbf_spec <- svm_rbf() %>%\n  set_mode(\"classification\") %>%\n  set_engine(\"kernlab\")\n```\n:::\n\n\nfitting the model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_rbf_fit <- svm_rbf_spec %>%\n  fit(y ~ ., data = sim_data2)\n```\n:::\n\n\nand plotting reveals that the model was able to separate the two classes, even though they were non-linearly separated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_rbf_fit %>%\n  extract_fit_engine() %>%\n  plot()\n```\n\n::: {.cell-output-display}\n![](09-support-vector-machines_files/figure-html/unnamed-chunk-16-1.png){fig-alt='Scatter chart of sim_data with x2 on the x-axis and x1 on the\ny-axis. A gradient going from red through white to blue,\nis overlaid. The grading is blue in the middle of the data\nand red at the edges, with a non-linear seperation between\nthe colors.' width=2100}\n:::\n:::\n\n\nBut let us see how well this model generalizes to new data from the same generating process. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2)\nsim_data2_test <- tibble(\n  x1 = rnorm(200) + rep(c(2, -2, 0), c(100, 50, 50)),\n  x2 = rnorm(200) + rep(c(2, -2, 0), c(100, 50, 50)),\n  y  = factor(rep(c(1, 2), c(150, 50)))\n)\n```\n:::\n\n\nAnd it works well!\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(svm_rbf_fit, new_data = sim_data2_test) %>%\n  conf_mat(truth = y, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction   1   2\n         1 137   7\n         2  13  43\n```\n\n\n:::\n:::\n\n\n## ROC Curves\n\nROC curves can easily be created using the `roc_curve()` function from the yardstick package. We use this function much the same way as we have done using the `accuracy()` function, but the main difference is that we pass the predicted class probability instead of passing the predicted class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(svm_rbf_fit, new_data = sim_data2_test) %>%\n  roc_curve(truth = y, .pred_1)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".threshold\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"specificity\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sensitivity\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-Inf\",\"2\":\"0.00\",\"3\":\"1.000000000\"},{\"1\":\"0.1040527\",\"2\":\"0.00\",\"3\":\"1.000000000\"},{\"1\":\"0.1130252\",\"2\":\"0.02\",\"3\":\"1.000000000\"},{\"1\":\"0.1139618\",\"2\":\"0.04\",\"3\":\"1.000000000\"},{\"1\":\"0.1154434\",\"2\":\"0.06\",\"3\":\"1.000000000\"},{\"1\":\"0.1169911\",\"2\":\"0.08\",\"3\":\"1.000000000\"},{\"1\":\"0.1181076\",\"2\":\"0.10\",\"3\":\"1.000000000\"},{\"1\":\"0.1191923\",\"2\":\"0.12\",\"3\":\"1.000000000\"},{\"1\":\"0.1235649\",\"2\":\"0.14\",\"3\":\"1.000000000\"},{\"1\":\"0.1238959\",\"2\":\"0.14\",\"3\":\"0.993333333\"},{\"1\":\"0.1257153\",\"2\":\"0.16\",\"3\":\"0.993333333\"},{\"1\":\"0.1289994\",\"2\":\"0.18\",\"3\":\"0.993333333\"},{\"1\":\"0.1305748\",\"2\":\"0.20\",\"3\":\"0.993333333\"},{\"1\":\"0.1326363\",\"2\":\"0.22\",\"3\":\"0.993333333\"},{\"1\":\"0.1327504\",\"2\":\"0.24\",\"3\":\"0.993333333\"},{\"1\":\"0.1349382\",\"2\":\"0.26\",\"3\":\"0.993333333\"},{\"1\":\"0.1396128\",\"2\":\"0.28\",\"3\":\"0.993333333\"},{\"1\":\"0.1502247\",\"2\":\"0.30\",\"3\":\"0.993333333\"},{\"1\":\"0.1505378\",\"2\":\"0.32\",\"3\":\"0.993333333\"},{\"1\":\"0.1530998\",\"2\":\"0.34\",\"3\":\"0.993333333\"},{\"1\":\"0.1576276\",\"2\":\"0.36\",\"3\":\"0.993333333\"},{\"1\":\"0.1586589\",\"2\":\"0.38\",\"3\":\"0.993333333\"},{\"1\":\"0.1602499\",\"2\":\"0.40\",\"3\":\"0.993333333\"},{\"1\":\"0.1611064\",\"2\":\"0.42\",\"3\":\"0.993333333\"},{\"1\":\"0.1636730\",\"2\":\"0.44\",\"3\":\"0.993333333\"},{\"1\":\"0.1664636\",\"2\":\"0.46\",\"3\":\"0.993333333\"},{\"1\":\"0.1679949\",\"2\":\"0.48\",\"3\":\"0.993333333\"},{\"1\":\"0.1725073\",\"2\":\"0.48\",\"3\":\"0.986666667\"},{\"1\":\"0.1765074\",\"2\":\"0.48\",\"3\":\"0.980000000\"},{\"1\":\"0.1849597\",\"2\":\"0.48\",\"3\":\"0.973333333\"},{\"1\":\"0.1914231\",\"2\":\"0.50\",\"3\":\"0.973333333\"},{\"1\":\"0.2067634\",\"2\":\"0.52\",\"3\":\"0.973333333\"},{\"1\":\"0.2100531\",\"2\":\"0.54\",\"3\":\"0.973333333\"},{\"1\":\"0.2104097\",\"2\":\"0.56\",\"3\":\"0.973333333\"},{\"1\":\"0.2147400\",\"2\":\"0.58\",\"3\":\"0.973333333\"},{\"1\":\"0.2174951\",\"2\":\"0.60\",\"3\":\"0.973333333\"},{\"1\":\"0.2185161\",\"2\":\"0.62\",\"3\":\"0.973333333\"},{\"1\":\"0.2205856\",\"2\":\"0.64\",\"3\":\"0.973333333\"},{\"1\":\"0.2234173\",\"2\":\"0.66\",\"3\":\"0.973333333\"},{\"1\":\"0.2550024\",\"2\":\"0.66\",\"3\":\"0.966666667\"},{\"1\":\"0.2561215\",\"2\":\"0.68\",\"3\":\"0.966666667\"},{\"1\":\"0.2584548\",\"2\":\"0.68\",\"3\":\"0.960000000\"},{\"1\":\"0.2653652\",\"2\":\"0.70\",\"3\":\"0.960000000\"},{\"1\":\"0.2721763\",\"2\":\"0.70\",\"3\":\"0.953333333\"},{\"1\":\"0.2992786\",\"2\":\"0.72\",\"3\":\"0.953333333\"},{\"1\":\"0.3202998\",\"2\":\"0.72\",\"3\":\"0.946666667\"},{\"1\":\"0.3623168\",\"2\":\"0.74\",\"3\":\"0.946666667\"},{\"1\":\"0.3695180\",\"2\":\"0.76\",\"3\":\"0.946666667\"},{\"1\":\"0.3853026\",\"2\":\"0.76\",\"3\":\"0.940000000\"},{\"1\":\"0.3886025\",\"2\":\"0.78\",\"3\":\"0.940000000\"},{\"1\":\"0.4202818\",\"2\":\"0.80\",\"3\":\"0.940000000\"},{\"1\":\"0.4347666\",\"2\":\"0.80\",\"3\":\"0.933333333\"},{\"1\":\"0.4775879\",\"2\":\"0.82\",\"3\":\"0.933333333\"},{\"1\":\"0.4857051\",\"2\":\"0.82\",\"3\":\"0.926666667\"},{\"1\":\"0.5308072\",\"2\":\"0.82\",\"3\":\"0.920000000\"},{\"1\":\"0.5989916\",\"2\":\"0.84\",\"3\":\"0.920000000\"},{\"1\":\"0.6109155\",\"2\":\"0.86\",\"3\":\"0.920000000\"},{\"1\":\"0.6429849\",\"2\":\"0.86\",\"3\":\"0.913333333\"},{\"1\":\"0.6558108\",\"2\":\"0.86\",\"3\":\"0.906666667\"},{\"1\":\"0.6818806\",\"2\":\"0.86\",\"3\":\"0.900000000\"},{\"1\":\"0.6981701\",\"2\":\"0.86\",\"3\":\"0.893333333\"},{\"1\":\"0.7114952\",\"2\":\"0.86\",\"3\":\"0.886666667\"},{\"1\":\"0.7640732\",\"2\":\"0.88\",\"3\":\"0.886666667\"},{\"1\":\"0.7828528\",\"2\":\"0.90\",\"3\":\"0.886666667\"},{\"1\":\"0.8060760\",\"2\":\"0.90\",\"3\":\"0.880000000\"},{\"1\":\"0.8307915\",\"2\":\"0.90\",\"3\":\"0.873333333\"},{\"1\":\"0.8423458\",\"2\":\"0.90\",\"3\":\"0.866666667\"},{\"1\":\"0.8449866\",\"2\":\"0.92\",\"3\":\"0.866666667\"},{\"1\":\"0.8464544\",\"2\":\"0.92\",\"3\":\"0.860000000\"},{\"1\":\"0.8661602\",\"2\":\"0.92\",\"3\":\"0.853333333\"},{\"1\":\"0.8719792\",\"2\":\"0.92\",\"3\":\"0.846666667\"},{\"1\":\"0.8770571\",\"2\":\"0.94\",\"3\":\"0.846666667\"},{\"1\":\"0.8789773\",\"2\":\"0.94\",\"3\":\"0.840000000\"},{\"1\":\"0.8822628\",\"2\":\"0.94\",\"3\":\"0.833333333\"},{\"1\":\"0.8854204\",\"2\":\"0.94\",\"3\":\"0.826666667\"},{\"1\":\"0.8855349\",\"2\":\"0.94\",\"3\":\"0.820000000\"},{\"1\":\"0.8887350\",\"2\":\"0.94\",\"3\":\"0.813333333\"},{\"1\":\"0.8898017\",\"2\":\"0.94\",\"3\":\"0.806666667\"},{\"1\":\"0.8970959\",\"2\":\"0.94\",\"3\":\"0.800000000\"},{\"1\":\"0.8975614\",\"2\":\"0.94\",\"3\":\"0.793333333\"},{\"1\":\"0.8983310\",\"2\":\"0.94\",\"3\":\"0.786666667\"},{\"1\":\"0.9011013\",\"2\":\"0.94\",\"3\":\"0.780000000\"},{\"1\":\"0.9097736\",\"2\":\"0.94\",\"3\":\"0.773333333\"},{\"1\":\"0.9125385\",\"2\":\"0.94\",\"3\":\"0.766666667\"},{\"1\":\"0.9136231\",\"2\":\"0.94\",\"3\":\"0.760000000\"},{\"1\":\"0.9145896\",\"2\":\"0.94\",\"3\":\"0.753333333\"},{\"1\":\"0.9158280\",\"2\":\"0.94\",\"3\":\"0.746666667\"},{\"1\":\"0.9221470\",\"2\":\"0.94\",\"3\":\"0.740000000\"},{\"1\":\"0.9228710\",\"2\":\"0.94\",\"3\":\"0.733333333\"},{\"1\":\"0.9282271\",\"2\":\"0.94\",\"3\":\"0.726666667\"},{\"1\":\"0.9300912\",\"2\":\"0.94\",\"3\":\"0.720000000\"},{\"1\":\"0.9309979\",\"2\":\"0.94\",\"3\":\"0.713333333\"},{\"1\":\"0.9328896\",\"2\":\"0.94\",\"3\":\"0.706666667\"},{\"1\":\"0.9352800\",\"2\":\"0.94\",\"3\":\"0.700000000\"},{\"1\":\"0.9360884\",\"2\":\"0.94\",\"3\":\"0.693333333\"},{\"1\":\"0.9372929\",\"2\":\"0.94\",\"3\":\"0.686666667\"},{\"1\":\"0.9379398\",\"2\":\"0.94\",\"3\":\"0.680000000\"},{\"1\":\"0.9380836\",\"2\":\"0.94\",\"3\":\"0.673333333\"},{\"1\":\"0.9381881\",\"2\":\"0.94\",\"3\":\"0.666666667\"},{\"1\":\"0.9385505\",\"2\":\"0.94\",\"3\":\"0.660000000\"},{\"1\":\"0.9400275\",\"2\":\"0.94\",\"3\":\"0.653333333\"},{\"1\":\"0.9401315\",\"2\":\"0.94\",\"3\":\"0.646666667\"},{\"1\":\"0.9407054\",\"2\":\"0.94\",\"3\":\"0.640000000\"},{\"1\":\"0.9409200\",\"2\":\"0.94\",\"3\":\"0.633333333\"},{\"1\":\"0.9409590\",\"2\":\"0.94\",\"3\":\"0.626666667\"},{\"1\":\"0.9410298\",\"2\":\"0.94\",\"3\":\"0.620000000\"},{\"1\":\"0.9411055\",\"2\":\"0.96\",\"3\":\"0.620000000\"},{\"1\":\"0.9419764\",\"2\":\"0.96\",\"3\":\"0.613333333\"},{\"1\":\"0.9421585\",\"2\":\"0.96\",\"3\":\"0.606666667\"},{\"1\":\"0.9423696\",\"2\":\"0.96\",\"3\":\"0.600000000\"},{\"1\":\"0.9423737\",\"2\":\"0.96\",\"3\":\"0.593333333\"},{\"1\":\"0.9425447\",\"2\":\"0.96\",\"3\":\"0.586666667\"},{\"1\":\"0.9425529\",\"2\":\"0.96\",\"3\":\"0.580000000\"},{\"1\":\"0.9429197\",\"2\":\"0.96\",\"3\":\"0.573333333\"},{\"1\":\"0.9433580\",\"2\":\"0.96\",\"3\":\"0.566666667\"},{\"1\":\"0.9435527\",\"2\":\"0.96\",\"3\":\"0.560000000\"},{\"1\":\"0.9436014\",\"2\":\"0.96\",\"3\":\"0.553333333\"},{\"1\":\"0.9436742\",\"2\":\"0.96\",\"3\":\"0.546666667\"},{\"1\":\"0.9437708\",\"2\":\"0.96\",\"3\":\"0.540000000\"},{\"1\":\"0.9439056\",\"2\":\"0.96\",\"3\":\"0.533333333\"},{\"1\":\"0.9440771\",\"2\":\"0.96\",\"3\":\"0.526666667\"},{\"1\":\"0.9440855\",\"2\":\"0.96\",\"3\":\"0.520000000\"},{\"1\":\"0.9445786\",\"2\":\"0.96\",\"3\":\"0.513333333\"},{\"1\":\"0.9448375\",\"2\":\"0.96\",\"3\":\"0.506666667\"},{\"1\":\"0.9450270\",\"2\":\"0.96\",\"3\":\"0.500000000\"},{\"1\":\"0.9451282\",\"2\":\"0.96\",\"3\":\"0.493333333\"},{\"1\":\"0.9453627\",\"2\":\"0.96\",\"3\":\"0.486666667\"},{\"1\":\"0.9456177\",\"2\":\"0.96\",\"3\":\"0.480000000\"},{\"1\":\"0.9456365\",\"2\":\"0.96\",\"3\":\"0.473333333\"},{\"1\":\"0.9456877\",\"2\":\"0.96\",\"3\":\"0.466666667\"},{\"1\":\"0.9458661\",\"2\":\"0.96\",\"3\":\"0.460000000\"},{\"1\":\"0.9461437\",\"2\":\"0.96\",\"3\":\"0.453333333\"},{\"1\":\"0.9462795\",\"2\":\"0.96\",\"3\":\"0.446666667\"},{\"1\":\"0.9464552\",\"2\":\"0.96\",\"3\":\"0.440000000\"},{\"1\":\"0.9467276\",\"2\":\"0.96\",\"3\":\"0.433333333\"},{\"1\":\"0.9469366\",\"2\":\"0.96\",\"3\":\"0.426666667\"},{\"1\":\"0.9475966\",\"2\":\"0.96\",\"3\":\"0.420000000\"},{\"1\":\"0.9479432\",\"2\":\"0.96\",\"3\":\"0.413333333\"},{\"1\":\"0.9483942\",\"2\":\"0.96\",\"3\":\"0.406666667\"},{\"1\":\"0.9484216\",\"2\":\"0.96\",\"3\":\"0.400000000\"},{\"1\":\"0.9493923\",\"2\":\"0.96\",\"3\":\"0.393333333\"},{\"1\":\"0.9494125\",\"2\":\"0.96\",\"3\":\"0.386666667\"},{\"1\":\"0.9498423\",\"2\":\"0.96\",\"3\":\"0.380000000\"},{\"1\":\"0.9507588\",\"2\":\"0.96\",\"3\":\"0.373333333\"},{\"1\":\"0.9511123\",\"2\":\"0.96\",\"3\":\"0.366666667\"},{\"1\":\"0.9511303\",\"2\":\"0.96\",\"3\":\"0.360000000\"},{\"1\":\"0.9512608\",\"2\":\"0.96\",\"3\":\"0.353333333\"},{\"1\":\"0.9514780\",\"2\":\"0.96\",\"3\":\"0.346666667\"},{\"1\":\"0.9514906\",\"2\":\"0.96\",\"3\":\"0.340000000\"},{\"1\":\"0.9515993\",\"2\":\"0.96\",\"3\":\"0.333333333\"},{\"1\":\"0.9518442\",\"2\":\"0.96\",\"3\":\"0.326666667\"},{\"1\":\"0.9521108\",\"2\":\"0.96\",\"3\":\"0.320000000\"},{\"1\":\"0.9521394\",\"2\":\"0.96\",\"3\":\"0.313333333\"},{\"1\":\"0.9522986\",\"2\":\"0.96\",\"3\":\"0.306666667\"},{\"1\":\"0.9524772\",\"2\":\"0.96\",\"3\":\"0.300000000\"},{\"1\":\"0.9528218\",\"2\":\"0.96\",\"3\":\"0.293333333\"},{\"1\":\"0.9530419\",\"2\":\"0.96\",\"3\":\"0.286666667\"},{\"1\":\"0.9531022\",\"2\":\"0.96\",\"3\":\"0.280000000\"},{\"1\":\"0.9535494\",\"2\":\"0.96\",\"3\":\"0.273333333\"},{\"1\":\"0.9537767\",\"2\":\"0.96\",\"3\":\"0.266666667\"},{\"1\":\"0.9538235\",\"2\":\"0.96\",\"3\":\"0.260000000\"},{\"1\":\"0.9538572\",\"2\":\"0.96\",\"3\":\"0.253333333\"},{\"1\":\"0.9543559\",\"2\":\"0.96\",\"3\":\"0.246666667\"},{\"1\":\"0.9544223\",\"2\":\"0.96\",\"3\":\"0.240000000\"},{\"1\":\"0.9549280\",\"2\":\"0.96\",\"3\":\"0.233333333\"},{\"1\":\"0.9550933\",\"2\":\"0.96\",\"3\":\"0.226666667\"},{\"1\":\"0.9551264\",\"2\":\"0.96\",\"3\":\"0.220000000\"},{\"1\":\"0.9551386\",\"2\":\"0.96\",\"3\":\"0.213333333\"},{\"1\":\"0.9551463\",\"2\":\"0.96\",\"3\":\"0.206666667\"},{\"1\":\"0.9551817\",\"2\":\"0.96\",\"3\":\"0.200000000\"},{\"1\":\"0.9552410\",\"2\":\"0.96\",\"3\":\"0.193333333\"},{\"1\":\"0.9556365\",\"2\":\"0.96\",\"3\":\"0.186666667\"},{\"1\":\"0.9556527\",\"2\":\"0.96\",\"3\":\"0.180000000\"},{\"1\":\"0.9556849\",\"2\":\"0.96\",\"3\":\"0.173333333\"},{\"1\":\"0.9557851\",\"2\":\"0.96\",\"3\":\"0.166666667\"},{\"1\":\"0.9559672\",\"2\":\"0.96\",\"3\":\"0.160000000\"},{\"1\":\"0.9567128\",\"2\":\"0.96\",\"3\":\"0.153333333\"},{\"1\":\"0.9573536\",\"2\":\"0.96\",\"3\":\"0.146666667\"},{\"1\":\"0.9574598\",\"2\":\"0.96\",\"3\":\"0.140000000\"},{\"1\":\"0.9576027\",\"2\":\"0.96\",\"3\":\"0.133333333\"},{\"1\":\"0.9576509\",\"2\":\"0.96\",\"3\":\"0.126666667\"},{\"1\":\"0.9576829\",\"2\":\"0.96\",\"3\":\"0.120000000\"},{\"1\":\"0.9579762\",\"2\":\"0.96\",\"3\":\"0.113333333\"},{\"1\":\"0.9581439\",\"2\":\"0.96\",\"3\":\"0.106666667\"},{\"1\":\"0.9585570\",\"2\":\"0.96\",\"3\":\"0.100000000\"},{\"1\":\"0.9589964\",\"2\":\"0.96\",\"3\":\"0.093333333\"},{\"1\":\"0.9593236\",\"2\":\"0.96\",\"3\":\"0.086666667\"},{\"1\":\"0.9593296\",\"2\":\"0.96\",\"3\":\"0.080000000\"},{\"1\":\"0.9596621\",\"2\":\"0.96\",\"3\":\"0.073333333\"},{\"1\":\"0.9601657\",\"2\":\"0.96\",\"3\":\"0.066666667\"},{\"1\":\"0.9606230\",\"2\":\"0.96\",\"3\":\"0.060000000\"},{\"1\":\"0.9609269\",\"2\":\"0.96\",\"3\":\"0.053333333\"},{\"1\":\"0.9613658\",\"2\":\"0.98\",\"3\":\"0.053333333\"},{\"1\":\"0.9619203\",\"2\":\"0.98\",\"3\":\"0.046666667\"},{\"1\":\"0.9621489\",\"2\":\"0.98\",\"3\":\"0.040000000\"},{\"1\":\"0.9633516\",\"2\":\"0.98\",\"3\":\"0.033333333\"},{\"1\":\"0.9634181\",\"2\":\"0.98\",\"3\":\"0.026666667\"},{\"1\":\"0.9640602\",\"2\":\"0.98\",\"3\":\"0.020000000\"},{\"1\":\"0.9641741\",\"2\":\"0.98\",\"3\":\"0.013333333\"},{\"1\":\"0.9650414\",\"2\":\"0.98\",\"3\":\"0.006666667\"},{\"1\":\"0.9651124\",\"2\":\"0.98\",\"3\":\"0.000000000\"},{\"1\":\"Inf\",\"2\":\"1.00\",\"3\":\"0.000000000\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nThis produces the different values of `specificity` and `sensitivity` for each threshold. We can get a quick visualization by passing the results of `roc_curve()` into `autoplot()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(svm_rbf_fit, new_data = sim_data2_test) %>%\n  roc_curve(truth = y, .pred_1) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](09-support-vector-machines_files/figure-html/unnamed-chunk-20-1.png){fig-alt='A ROC curve plot. 1-specificity along the x-axis and\nsensitivity along the y-axis. A dotted line is drawn\nalong the diagonal. The line quite closely follows\nthe upper left side.' width=2100}\n:::\n:::\n\n\nA common metric is t calculate the area under this curve. This can be done using the `roc_auc()` function (`_auc` stands for **a**rea **u**nder **c**urve).\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(svm_rbf_fit, new_data = sim_data2_test) %>%\n  roc_auc(truth = y, .pred_1)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".metric\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimator\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"roc_auc\",\"2\":\"binary\",\"3\":\"0.9246667\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## Application to Gene Expression Data\n\nWe now examine the Khan data set, which consists of several tissue samples corresponding to four distinct types of small round blue cell tumors. For each tissue sample, gene expression measurements are available. The data set comes in the `Khan` list which we will wrangle a little bit to create two tibbles, 1 for the training data and 1 for the testing data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKhan_train <- bind_cols(\n  y = factor(Khan$ytrain),\n  as_tibble(Khan$xtrain)\n)\n\nKhan_test <- bind_cols(\n  y = factor(Khan$ytest),\n  as_tibble(Khan$xtest)\n)\n```\n:::\n\n\n\nlooking at the dimensions of the training data reveals that we have 63 observations with 20308 gene expression measurements.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(Khan_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   63 2309\n```\n\n\n:::\n:::\n\n\nThere is a very large number of predictors compared to the number of rows. This indicates that a linear kernel will be preferable, as the added flexibility we would get from a polynomial or radial kernel is unnecessary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkhan_fit <- svm_linear_spec %>%\n  set_args(cost = 10) %>%\n  fit(y ~ ., data = Khan_train)\n```\n:::\n\n\nLet us take a look at the training confusion matrix. And look, we get a perfect confusion matrix. We are getting this because the hyperplane was able to fully separate the classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(khan_fit, new_data = Khan_train) %>%\n  conf_mat(truth = y, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction  1  2  3  4\n         1  8  0  0  0\n         2  0 23  0  0\n         3  0  0 12  0\n         4  0  0  0 20\n```\n\n\n:::\n:::\n\n\nBut remember we don't measure the performance by how well it performs on the training data set. We measure the performance of a model on how well it performs on the testing data set, so let us look at the testing confusion matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(khan_fit, new_data = Khan_test) %>%\n  conf_mat(truth = y, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction 1 2 3 4\n         1 3 0 0 0\n         2 0 6 2 0\n         3 0 0 4 0\n         4 0 0 0 5\n```\n\n\n:::\n:::\n\n\nAnd it performs fairly well. A couple of misclassifications but nothing too bad.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}